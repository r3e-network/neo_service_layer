{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Neo Service Layer Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>Welcome to the Neo Service Layer documentation. This documentation provides comprehensive information about the Neo Service Layer, a serverless platform for Neo N3 blockchain with AWS Nitro Enclave support.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":""},{"location":"#1-introduction","title":"1. Introduction","text":"<ul> <li>Executive Summary: High-level overview of the Neo Service Layer</li> <li>System Architecture: Detailed system architecture and component descriptions</li> </ul>"},{"location":"#2-technical-documentation","title":"2. Technical Documentation","text":"<ul> <li>Data Flow: Data flow diagrams and explanations</li> <li>Workflow: Step-by-step workflows for various operations</li> <li>Implementation Guide: Detailed implementation guidelines and technical specifications</li> <li>Function Execution: Details on function execution implementation and testing</li> <li>TEE Integration: Technical details on Trusted Execution Environment integration</li> </ul>"},{"location":"#3-user-guides","title":"3. User Guides","text":"<ul> <li>Setup and Run Guide: Instructions for setting up and running the Neo Service Layer</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>User Registration and Account Management: Supports both Auth0 integration and Neo N3 account-based registration</li> <li>Secure Wallet Management: Manages service layer wallets for blockchain interaction within the enclave</li> <li>Secrets Management: Allows users to securely store and access private data with strict access controls</li> <li>Price Feed Integration: Fetches price data from various sources and submits to Neo N3 oracle smart contract</li> <li>Event Monitoring: Monitors Neo N3 events and other triggers to execute functions automatically</li> <li>Function Execution: Supports JavaScript, Python, and C# functions in a secure environment</li> <li>Storage Capabilities: Provides persistent storage for functions and services</li> <li>Metrics Collection: Tracks function execution, service performance, and resource usage</li> </ul>"},{"location":"#system-components","title":"System Components","text":"<ol> <li>API Gateway: Entry point for all external requests</li> <li>Service Orchestrator: Coordinates interaction between services</li> <li>Account Service: Manages user registration and authentication</li> <li>Wallet Service: Handles blockchain wallet operations</li> <li>Secrets Service: Provides secure storage and management of user secrets</li> <li>PriceFeed Service: Fetches and submits price data</li> <li>Event Monitor: Tracks blockchain events and triggers</li> <li>Function Runner: Executes user-deployed functions</li> <li>Storage Service: Provides persistent storage capabilities</li> <li>Metrics Service: Collects and reports system metrics</li> </ol>"},{"location":"#security-architecture","title":"Security Architecture","text":"<p>The Neo Service Layer leverages AWS Nitro Enclaves to provide a secure, isolated execution environment for sensitive operations:</p> <ul> <li>Isolated Memory: Enclave memory is encrypted and isolated from the parent instance</li> <li>No Persistent Storage: Enclaves have no persistent storage, enhancing security</li> <li>No Interactive Access: No SSH or other interactive access to the enclave</li> <li>Cryptographic Attestation: Provides proof of the enclave's identity and integrity</li> <li>Secure Communication: VSOCK-based communication between parent instance and enclave</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with the Neo Service Layer, follow these steps:</p> <ol> <li>Set up the development environment as described in the Setup and Run Guide</li> <li>Create the project structure using the provided script</li> <li>Build and run the application</li> <li>Deploy to AWS with Nitro Enclave support for production use</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to the Neo Service Layer. Please follow these steps to contribute:</p> <ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add some amazing feature'</code>)</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"api-documentation/","title":"Neo Service Layer API Documentation","text":"<p>This document provides detailed information about the Neo Service Layer API.</p>"},{"location":"api-documentation/#authentication","title":"Authentication","text":"<p>The Neo Service Layer API uses JWT (JSON Web Token) for authentication.</p>"},{"location":"api-documentation/#obtaining-a-token","title":"Obtaining a Token","text":"<p>To obtain a token, send a POST request to the <code>/api/auth/login</code> endpoint with the following payload:</p> <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}\n</code></pre> <p>The response will include a JWT token:</p> <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expiresAt\": \"2023-04-20T12:34:56.789Z\"\n}\n</code></pre>"},{"location":"api-documentation/#using-the-token","title":"Using the Token","text":"<p>Include the token in the <code>Authorization</code> header of subsequent requests:</p> <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre>"},{"location":"api-documentation/#api-endpoints","title":"API Endpoints","text":""},{"location":"api-documentation/#account-service","title":"Account Service","text":""},{"location":"api-documentation/#register-account","title":"Register Account","text":"<pre><code>POST /api/accounts/register\n</code></pre> <p>Request: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"1234567890\",\n  \"email\": \"user@example.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"createdAt\": \"2023-04-20T12:34:56.789Z\"\n}\n</code></pre></p>"},{"location":"api-documentation/#authenticate-account","title":"Authenticate Account","text":"<pre><code>POST /api/accounts/authenticate\n</code></pre> <p>Request: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"1234567890\",\n  \"email\": \"user@example.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expiresAt\": \"2023-04-20T12:34:56.789Z\"\n}\n</code></pre></p>"},{"location":"api-documentation/#change-password","title":"Change Password","text":"<pre><code>POST /api/accounts/change-password\n</code></pre> <p>Request: <pre><code>{\n  \"currentPassword\": \"password123\",\n  \"newPassword\": \"newPassword123\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"message\": \"Password changed successfully\"\n}\n</code></pre></p>"},{"location":"api-documentation/#verify-account","title":"Verify Account","text":"<pre><code>POST /api/accounts/verify\n</code></pre> <p>Request: <pre><code>{\n  \"verificationCode\": \"123456\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"message\": \"Account verified successfully\"\n}\n</code></pre></p>"},{"location":"api-documentation/#wallet-service","title":"Wallet Service","text":""},{"location":"api-documentation/#create-wallet","title":"Create Wallet","text":"<pre><code>POST /api/wallets\n</code></pre> <p>Request: <pre><code>{\n  \"name\": \"My Wallet\",\n  \"password\": \"walletPassword123\",\n  \"tags\": {\n    \"type\": \"personal\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"1234567890\",\n  \"name\": \"My Wallet\",\n  \"address\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"scriptHash\": \"0x1234567890abcdef1234567890abcdef12345678\",\n  \"publicKey\": \"02a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2\",\n  \"tags\": {\n    \"type\": \"personal\"\n  },\n  \"createdAt\": \"2023-04-20T12:34:56.789Z\"\n}\n</code></pre></p>"},{"location":"api-documentation/#import-wallet-from-wif","title":"Import Wallet from WIF","text":"<pre><code>POST /api/wallets/import\n</code></pre> <p>Request: <pre><code>{\n  \"name\": \"Imported Wallet\",\n  \"wif\": \"KwDiBf89QgGbjEhKnhXJuH7LrciVrZi3qYjgd9M7rFU73sVHnoWn\",\n  \"password\": \"walletPassword123\",\n  \"tags\": {\n    \"type\": \"imported\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"1234567890\",\n  \"name\": \"Imported Wallet\",\n  \"address\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"scriptHash\": \"0x1234567890abcdef1234567890abcdef12345678\",\n  \"publicKey\": \"02a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2\",\n  \"tags\": {\n    \"type\": \"imported\"\n  },\n  \"createdAt\": \"2023-04-20T12:34:56.789Z\"\n}\n</code></pre></p>"},{"location":"api-documentation/#sign-data","title":"Sign Data","text":"<pre><code>POST /api/wallets/{walletId}/sign\n</code></pre> <p>Request: <pre><code>{\n  \"data\": \"SGVsbG8gV29ybGQ=\", // Base64-encoded data\n  \"password\": \"walletPassword123\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"walletId\": \"1234567890\",\n  \"address\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"signature\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"\n}\n</code></pre></p>"},{"location":"api-documentation/#transfer-neo","title":"Transfer NEO","text":"<pre><code>POST /api/wallets/{walletId}/transfer/neo\n</code></pre> <p>Request: <pre><code>{\n  \"toAddress\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"amount\": 10.0,\n  \"password\": \"walletPassword123\",\n  \"network\": \"TestNet\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"walletId\": \"1234567890\",\n  \"fromAddress\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"toAddress\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"amount\": 10.0,\n  \"transactionHash\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"\n}\n</code></pre></p>"},{"location":"api-documentation/#transfer-gas","title":"Transfer GAS","text":"<pre><code>POST /api/wallets/{walletId}/transfer/gas\n</code></pre> <p>Request: <pre><code>{\n  \"toAddress\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"amount\": 5.5,\n  \"password\": \"walletPassword123\",\n  \"network\": \"TestNet\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"walletId\": \"1234567890\",\n  \"fromAddress\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"toAddress\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"amount\": 5.5,\n  \"transactionHash\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"\n}\n</code></pre></p>"},{"location":"api-documentation/#transfer-token","title":"Transfer Token","text":"<pre><code>POST /api/wallets/{walletId}/transfer/token\n</code></pre> <p>Request: <pre><code>{\n  \"toAddress\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"tokenScriptHash\": \"0x1234567890abcdef1234567890abcdef12345678\",\n  \"amount\": 100.0,\n  \"password\": \"walletPassword123\",\n  \"network\": \"TestNet\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"walletId\": \"1234567890\",\n  \"fromAddress\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"toAddress\": \"NXV7ZhHiyMn9SLdRcgYE8S7GZY4PjuLxrA\",\n  \"tokenScriptHash\": \"0x1234567890abcdef1234567890abcdef12345678\",\n  \"amount\": 100.0,\n  \"transactionHash\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"\n}\n</code></pre></p>"},{"location":"api-documentation/#secrets-service","title":"Secrets Service","text":""},{"location":"api-documentation/#create-secret","title":"Create Secret","text":"<pre><code>POST /api/secrets\n</code></pre> <p>Request: <pre><code>{\n  \"name\": \"API Key\",\n  \"description\": \"API key for external service\",\n  \"value\": \"secret-api-key-123\",\n  \"allowedFunctionIds\": [\"1234567890\"],\n  \"tags\": {\n    \"type\": \"api-key\"\n  },\n  \"rotationPeriod\": 90\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"1234567890\",\n  \"name\": \"API Key\",\n  \"description\": \"API key for external service\",\n  \"allowedFunctionIds\": [\"1234567890\"],\n  \"tags\": {\n    \"type\": \"api-key\"\n  },\n  \"version\": 1,\n  \"createdAt\": \"2023-04-20T12:34:56.789Z\",\n  \"updatedAt\": \"2023-04-20T12:34:56.789Z\",\n  \"lastRotatedAt\": \"2023-04-20T12:34:56.789Z\",\n  \"nextRotationAt\": \"2023-07-19T12:34:56.789Z\",\n  \"rotationPeriod\": 90\n}\n</code></pre></p>"},{"location":"api-documentation/#get-secret-value","title":"Get Secret Value","text":"<pre><code>GET /api/secrets/{secretId}/value\n</code></pre> <p>Response: <pre><code>{\n  \"id\": \"1234567890\",\n  \"name\": \"API Key\",\n  \"value\": \"secret-api-key-123\",\n  \"version\": 1\n}\n</code></pre></p>"},{"location":"api-documentation/#update-secret-value","title":"Update Secret Value","text":"<pre><code>PUT /api/secrets/{secretId}/value\n</code></pre> <p>Request: <pre><code>{\n  \"value\": \"new-secret-api-key-123\",\n  \"description\": \"Updated API key for external service\",\n  \"allowedFunctionIds\": [\"1234567890\", \"0987654321\"],\n  \"tags\": {\n    \"type\": \"api-key\",\n    \"environment\": \"production\"\n  },\n  \"rotationPeriod\": 60\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"1234567890\",\n  \"name\": \"API Key\",\n  \"description\": \"Updated API key for external service\",\n  \"allowedFunctionIds\": [\"1234567890\", \"0987654321\"],\n  \"tags\": {\n    \"type\": \"api-key\",\n    \"environment\": \"production\"\n  },\n  \"version\": 2,\n  \"updatedAt\": \"2023-04-20T12:34:56.789Z\",\n  \"lastRotatedAt\": \"2023-04-20T12:34:56.789Z\",\n  \"nextRotationAt\": \"2023-06-19T12:34:56.789Z\",\n  \"rotationPeriod\": 60\n}\n</code></pre></p>"},{"location":"api-documentation/#rotate-secret","title":"Rotate Secret","text":"<pre><code>POST /api/secrets/{secretId}/rotate\n</code></pre> <p>Request: <pre><code>{\n  \"newValue\": \"rotated-secret-api-key-123\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"1234567890\",\n  \"name\": \"API Key\",\n  \"description\": \"Updated API key for external service\",\n  \"allowedFunctionIds\": [\"1234567890\", \"0987654321\"],\n  \"tags\": {\n    \"type\": \"api-key\",\n    \"environment\": \"production\"\n  },\n  \"version\": 3,\n  \"updatedAt\": \"2023-04-20T12:34:56.789Z\",\n  \"lastRotatedAt\": \"2023-04-20T12:34:56.789Z\",\n  \"nextRotationAt\": \"2023-06-19T12:34:56.789Z\",\n  \"rotationPeriod\": 60\n}\n</code></pre></p>"},{"location":"api-documentation/#check-secret-access","title":"Check Secret Access","text":"<pre><code>GET /api/secrets/{secretId}/access/{functionId}\n</code></pre> <p>Response: <pre><code>{\n  \"secretId\": \"1234567890\",\n  \"functionId\": \"1234567890\",\n  \"hasAccess\": true\n}\n</code></pre></p>"},{"location":"api-documentation/#function-service","title":"Function Service","text":""},{"location":"api-documentation/#execute-function","title":"Execute Function","text":"<pre><code>POST /api/functions/{functionId}/execute\n</code></pre> <p>Request: <pre><code>{\n  \"parameters\": {\n    \"param1\": \"value1\",\n    \"param2\": \"value2\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"functionId\": \"1234567890\",\n  \"result\": {\n    \"output\": \"Function output\"\n  },\n  \"executionTime\": 123.45,\n  \"timestamp\": \"2023-04-20T12:34:56.789Z\"\n}\n</code></pre></p>"},{"location":"api-documentation/#execute-function-for-event","title":"Execute Function for Event","text":"<pre><code>POST /api/functions/{functionId}/execute-for-event\n</code></pre> <p>Request: <pre><code>{\n  \"event\": {\n    \"type\": \"blockchain\",\n    \"data\": {\n      \"txid\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n      \"blockHeight\": 12345,\n      \"timestamp\": \"2023-04-20T12:34:56.789Z\"\n    }\n  },\n  \"parameters\": {\n    \"param1\": \"value1\",\n    \"param2\": \"value2\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"functionId\": \"1234567890\",\n  \"result\": {\n    \"output\": \"Function output\"\n  },\n  \"executionTime\": 123.45,\n  \"timestamp\": \"2023-04-20T12:34:56.789Z\"\n}\n</code></pre></p>"},{"location":"api-documentation/#price-feed-service","title":"Price Feed Service","text":""},{"location":"api-documentation/#fetch-prices","title":"Fetch Prices","text":"<pre><code>POST /api/price-feed/fetch\n</code></pre> <p>Request: <pre><code>{\n  \"baseCurrency\": \"USD\",\n  \"sources\": [\n    {\n      \"id\": \"1234567890\",\n      \"name\": \"CoinGecko\",\n      \"type\": \"REST\",\n      \"url\": \"https://api.coingecko.com/api/v3/simple/price?ids={asset}&amp;vs_currencies={currency}\",\n      \"supportedAssets\": [\"BTC\", \"ETH\", \"NEO\"]\n    }\n  ]\n}\n</code></pre></p> <p>Response: <pre><code>[\n  {\n    \"id\": \"1234567890\",\n    \"symbol\": \"BTC\",\n    \"baseCurrency\": \"USD\",\n    \"value\": 50000.0,\n    \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n    \"sourcePrices\": [\n      {\n        \"id\": \"1234567890\",\n        \"sourceId\": \"1234567890\",\n        \"sourceName\": \"CoinGecko\",\n        \"value\": 50000.0,\n        \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n        \"weight\": 100\n      }\n    ],\n    \"confidenceScore\": 100,\n    \"signature\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n    \"createdAt\": \"2023-04-20T12:34:56.789Z\"\n  },\n  {\n    \"id\": \"0987654321\",\n    \"symbol\": \"ETH\",\n    \"baseCurrency\": \"USD\",\n    \"value\": 3000.0,\n    \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n    \"sourcePrices\": [\n      {\n        \"id\": \"0987654321\",\n        \"sourceId\": \"1234567890\",\n        \"sourceName\": \"CoinGecko\",\n        \"value\": 3000.0,\n        \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n        \"weight\": 100\n      }\n    ],\n    \"confidenceScore\": 100,\n    \"signature\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n    \"createdAt\": \"2023-04-20T12:34:56.789Z\"\n  }\n]\n</code></pre></p>"},{"location":"api-documentation/#fetch-price-for-symbol","title":"Fetch Price for Symbol","text":"<pre><code>POST /api/price-feed/fetch-symbol\n</code></pre> <p>Request: <pre><code>{\n  \"symbol\": \"BTC\",\n  \"baseCurrency\": \"USD\",\n  \"sources\": [\n    {\n      \"id\": \"1234567890\",\n      \"name\": \"CoinGecko\",\n      \"type\": \"REST\",\n      \"url\": \"https://api.coingecko.com/api/v3/simple/price?ids={asset}&amp;vs_currencies={currency}\"\n    },\n    {\n      \"id\": \"0987654321\",\n      \"name\": \"CoinMarketCap\",\n      \"type\": \"REST\",\n      \"url\": \"https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?symbol={symbol}&amp;convert={currency}\",\n      \"apiKey\": \"your-api-key\"\n    }\n  ]\n}\n</code></pre></p> <p>Response: <pre><code>[\n  {\n    \"id\": \"1234567890\",\n    \"symbol\": \"BTC\",\n    \"baseCurrency\": \"USD\",\n    \"value\": 50000.0,\n    \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n    \"sourcePrices\": [\n      {\n        \"id\": \"1234567890\",\n        \"sourceId\": \"1234567890\",\n        \"sourceName\": \"CoinGecko\",\n        \"value\": 50000.0,\n        \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n        \"weight\": 100\n      }\n    ],\n    \"confidenceScore\": 100,\n    \"signature\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n    \"createdAt\": \"2023-04-20T12:34:56.789Z\"\n  },\n  {\n    \"id\": \"0987654321\",\n    \"symbol\": \"BTC\",\n    \"baseCurrency\": \"USD\",\n    \"value\": 50100.0,\n    \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n    \"sourcePrices\": [\n      {\n        \"id\": \"0987654321\",\n        \"sourceId\": \"0987654321\",\n        \"sourceName\": \"CoinMarketCap\",\n        \"value\": 50100.0,\n        \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n        \"weight\": 100\n      }\n    ],\n    \"confidenceScore\": 100,\n    \"signature\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n    \"createdAt\": \"2023-04-20T12:34:56.789Z\"\n  },\n  {\n    \"id\": \"abcdef1234\",\n    \"symbol\": \"BTC\",\n    \"baseCurrency\": \"USD\",\n    \"value\": 50050.0,\n    \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n    \"sourcePrices\": [\n      {\n        \"id\": \"1234567890\",\n        \"sourceId\": \"1234567890\",\n        \"sourceName\": \"CoinGecko\",\n        \"value\": 50000.0,\n        \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n        \"weight\": 100\n      },\n      {\n        \"id\": \"0987654321\",\n        \"sourceId\": \"0987654321\",\n        \"sourceName\": \"CoinMarketCap\",\n        \"value\": 50100.0,\n        \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n        \"weight\": 100\n      }\n    ],\n    \"confidenceScore\": 99,\n    \"signature\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n    \"createdAt\": \"2023-04-20T12:34:56.789Z\"\n  }\n]\n</code></pre></p>"},{"location":"api-documentation/#generate-price-history","title":"Generate Price History","text":"<pre><code>POST /api/price-feed/history\n</code></pre> <p>Request: <pre><code>{\n  \"symbol\": \"BTC\",\n  \"baseCurrency\": \"USD\",\n  \"interval\": \"1h\",\n  \"startTime\": \"2023-04-19T00:00:00.000Z\",\n  \"endTime\": \"2023-04-20T00:00:00.000Z\",\n  \"prices\": [\n    {\n      \"id\": \"1234567890\",\n      \"symbol\": \"BTC\",\n      \"baseCurrency\": \"USD\",\n      \"value\": 50000.0,\n      \"timestamp\": \"2023-04-19T00:00:00.000Z\"\n    },\n    {\n      \"id\": \"0987654321\",\n      \"symbol\": \"BTC\",\n      \"baseCurrency\": \"USD\",\n      \"value\": 51000.0,\n      \"timestamp\": \"2023-04-19T01:00:00.000Z\"\n    },\n    {\n      \"id\": \"abcdef1234\",\n      \"symbol\": \"BTC\",\n      \"baseCurrency\": \"USD\",\n      \"value\": 50500.0,\n      \"timestamp\": \"2023-04-19T02:00:00.000Z\"\n    }\n  ]\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"1234567890\",\n  \"symbol\": \"BTC\",\n  \"baseCurrency\": \"USD\",\n  \"interval\": \"1h\",\n  \"startTime\": \"2023-04-19T00:00:00.000Z\",\n  \"endTime\": \"2023-04-20T00:00:00.000Z\",\n  \"dataPoints\": [\n    {\n      \"timestamp\": \"2023-04-19T00:00:00.000Z\",\n      \"open\": 50000.0,\n      \"high\": 50000.0,\n      \"low\": 50000.0,\n      \"close\": 50000.0,\n      \"volume\": 0.0\n    },\n    {\n      \"timestamp\": \"2023-04-19T01:00:00.000Z\",\n      \"open\": 51000.0,\n      \"high\": 51000.0,\n      \"low\": 51000.0,\n      \"close\": 51000.0,\n      \"volume\": 0.0\n    },\n    {\n      \"timestamp\": \"2023-04-19T02:00:00.000Z\",\n      \"open\": 50500.0,\n      \"high\": 50500.0,\n      \"low\": 50500.0,\n      \"close\": 50500.0,\n      \"volume\": 0.0\n    }\n  ],\n  \"createdAt\": \"2023-04-20T12:34:56.789Z\",\n  \"updatedAt\": \"2023-04-20T12:34:56.789Z\"\n}\n</code></pre></p>"},{"location":"api-documentation/#validate-source","title":"Validate Source","text":"<pre><code>POST /api/price-feed/validate-source\n</code></pre> <p>Request: <pre><code>{\n  \"source\": {\n    \"id\": \"1234567890\",\n    \"name\": \"CoinGecko\",\n    \"type\": \"REST\",\n    \"url\": \"https://api.coingecko.com/api/v3/simple/price?ids={asset}&amp;vs_currencies={currency}\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"isValid\": true,\n  \"message\": \"Source validated successfully\"\n}\n</code></pre></p>"},{"location":"api-documentation/#submit-price-to-oracle","title":"Submit Price to Oracle","text":"<pre><code>POST /api/price-feed/submit\n</code></pre> <p>Request: <pre><code>{\n  \"price\": {\n    \"id\": \"1234567890\",\n    \"symbol\": \"BTC\",\n    \"baseCurrency\": \"USD\",\n    \"value\": 50000.0,\n    \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n    \"confidenceScore\": 100,\n    \"signature\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"\n  },\n  \"walletId\": \"1234567890\",\n  \"password\": \"walletPassword123\",\n  \"network\": \"TestNet\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"transactionHash\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"\n}\n</code></pre></p>"},{"location":"api-documentation/#submit-batch-to-oracle","title":"Submit Batch to Oracle","text":"<pre><code>POST /api/price-feed/submit-batch\n</code></pre> <p>Request: <pre><code>{\n  \"prices\": [\n    {\n      \"id\": \"1234567890\",\n      \"symbol\": \"BTC\",\n      \"baseCurrency\": \"USD\",\n      \"value\": 50000.0,\n      \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n      \"confidenceScore\": 100,\n      \"signature\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"\n    },\n    {\n      \"id\": \"0987654321\",\n      \"symbol\": \"ETH\",\n      \"baseCurrency\": \"USD\",\n      \"value\": 3000.0,\n      \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n      \"confidenceScore\": 100,\n      \"signature\": \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"\n    }\n  ],\n  \"walletId\": \"1234567890\",\n  \"password\": \"walletPassword123\",\n  \"network\": \"TestNet\"\n}\n</code></pre></p> <p>Response: <pre><code>[\n  \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n  \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\"\n]\n</code></pre></p>"},{"location":"api-documentation/#error-handling","title":"Error Handling","text":"<p>The API uses standard HTTP status codes to indicate the success or failure of a request:</p> <ul> <li><code>200 OK</code>: The request was successful</li> <li><code>201 Created</code>: The resource was created successfully</li> <li><code>400 Bad Request</code>: The request was invalid</li> <li><code>401 Unauthorized</code>: Authentication is required</li> <li><code>403 Forbidden</code>: The authenticated user does not have permission to access the resource</li> <li><code>404 Not Found</code>: The resource was not found</li> <li><code>500 Internal Server Error</code>: An error occurred on the server</li> </ul> <p>Error responses include a JSON payload with details about the error:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"INVALID_REQUEST\",\n    \"message\": \"The request was invalid\",\n    \"details\": \"The 'email' field is required\"\n  }\n}\n</code></pre>"},{"location":"api-documentation/#rate-limiting","title":"Rate Limiting","text":"<p>The API implements rate limiting to prevent abuse. The rate limits are:</p> <ul> <li>100 requests per minute per IP address</li> <li>1000 requests per hour per IP address</li> <li>10000 requests per day per IP address</li> </ul> <p>Rate limit information is included in the response headers:</p> <ul> <li><code>X-RateLimit-Limit</code>: The maximum number of requests allowed in the current time window</li> <li><code>X-RateLimit-Remaining</code>: The number of requests remaining in the current time window</li> <li><code>X-RateLimit-Reset</code>: The time at which the current time window resets (Unix timestamp)</li> </ul> <p>When the rate limit is exceeded, the API returns a <code>429 Too Many Requests</code> response with a <code>Retry-After</code> header indicating the number of seconds to wait before retrying.</p>"},{"location":"api-documentation/#pagination","title":"Pagination","text":"<p>List endpoints support pagination using the <code>page</code> and <code>pageSize</code> query parameters:</p> <pre><code>GET /api/wallets?page=1&amp;pageSize=10\n</code></pre> <p>Pagination information is included in the response:</p> <pre><code>{\n  \"items\": [...],\n  \"pagination\": {\n    \"page\": 1,\n    \"pageSize\": 10,\n    \"totalItems\": 100,\n    \"totalPages\": 10\n  }\n}\n</code></pre>"},{"location":"api-documentation/#filtering","title":"Filtering","text":"<p>List endpoints support filtering using query parameters:</p> <pre><code>GET /api/wallets?name=My%20Wallet&amp;tags.type=personal\n</code></pre>"},{"location":"api-documentation/#sorting","title":"Sorting","text":"<p>List endpoints support sorting using the <code>sort</code> query parameter:</p> <pre><code>GET /api/wallets?sort=name\nGET /api/wallets?sort=-createdAt\n</code></pre> <p>Use a prefix of <code>-</code> to sort in descending order.</p>"},{"location":"api-documentation/#conclusion","title":"Conclusion","text":"<p>This document provides a comprehensive reference for the Neo Service Layer API. For more detailed information, refer to the documentation in the <code>docs/</code> directory.</p>"},{"location":"data_flow/","title":"Neo Service Layer Data Flow","text":""},{"location":"data_flow/#overview","title":"Overview","text":"<p>This document describes the data flow within the Neo Service Layer, detailing how data moves between different components and services, including interactions with the Neo N3 blockchain and AWS Nitro Enclave.</p>"},{"location":"data_flow/#user-registration-and-authentication-flow","title":"User Registration and Authentication Flow","text":"<pre><code>+--------+    1. Register    +--------+    2. Create Account    +--------+\n|        |-----------------&gt;|        |-----------------------&gt;|        |\n| User   |                  | API    |                        | Account|\n|        |&lt;-----------------|        |&lt;-----------------------| Service|\n+--------+    8. Response   +--------+    7. Account Created  +--------+\n                                |                                  |\n                                |   3. Store Account               |\n                                v                                  v\n                            +--------+    4. Encrypt Data     +--------+\n                            |        |-----------------------&gt;|        |\n                            | DB     |                        | Enclave|\n                            |        |&lt;-----------------------|        |\n                            +--------+    5. Encrypted Data   +--------+\n                                ^                                  |\n                                |   6. Confirmation                |\n                                +----------------------------------+\n</code></pre> <ol> <li>User submits registration information</li> <li>API Gateway forwards request to Account Service</li> <li>Account Service prepares account data</li> <li>Sensitive account data is sent to the enclave for encryption</li> <li>Enclave returns encrypted data</li> <li>Enclave confirms successful encryption</li> <li>Account Service confirms account creation</li> <li>Response is returned to the user</li> </ol>"},{"location":"data_flow/#function-deployment-flow","title":"Function Deployment Flow","text":"<pre><code>+--------+    1. Deploy Function    +--------+    2. Validate    +--------+\n|        |------------------------&gt;|        |------------------&gt;|        |\n| User   |                         | API    |                   |Function|\n|        |&lt;------------------------| Gateway|&lt;------------------| Service|\n+--------+    8. Deployment Status +--------+    7. Status     +--------+\n                                       |                           |\n                                       |   3. Store Function       |\n                                       v                           v\n                                   +--------+    4. Function   +--------+\n                                   |        |-----------------&gt;|        |\n                                   |Function|                  |Function|\n                                   | Store  |&lt;-----------------| Runner |\n                                   +--------+    5. Validation +--------+\n                                       ^                           |\n                                       |   6. Ready Status         |\n                                       +---------------------------+\n</code></pre> <ol> <li>User submits function code for deployment</li> <li>API Gateway forwards to Function Service for validation</li> <li>Function code is stored in Function Store</li> <li>Function is sent to Function Runner for validation</li> <li>Function Runner validates the function</li> <li>Function Runner reports ready status</li> <li>Function Service reports deployment status</li> <li>Deployment status is returned to the user</li> </ol>"},{"location":"data_flow/#function-execution-flow","title":"Function Execution Flow","text":"<pre><code>+--------+    1. Execute    +--------+    2. Request     +--------+\n|        |----------------&gt;|        |------------------&gt;|        |\n| Trigger|                 | API    |                   |Function|\n|        |                 | Gateway|                   | Service|\n+--------+                 +--------+                   +--------+\n                                |                           |\n                                |   3. Fetch Function       |\n                                v                           v\n                            +--------+    4. Function   +--------+\n                            |        |-----------------&gt;|        |\n                            |Function|                  | Enclave|\n                            | Store  |                  |        |\n                            +--------+                  +--------+\n                                                            |\n                                                            | 5. Execute\n                                                            v\n+--------+    8. Result     +--------+    7. Result     +--------+\n|        |&lt;----------------| API    |&lt;-----------------| Function|\n| Client |                 | Gateway|                  | Runner  |\n|        |                 |        |                  |        |\n+--------+                 +--------+                  +--------+\n                                                            |\n                                                            | 6. Access Resources\n                                                            v\n                                                        +--------+\n                                                        |Resources|\n                                                        | - Secrets|\n                                                        | - Storage|\n                                                        | - Neo N3 |\n                                                        +--------+\n</code></pre> <ol> <li>Trigger (HTTP, Event, Schedule) initiates function execution</li> <li>API Gateway forwards execution request to Function Service</li> <li>Function Service fetches function code from Function Store</li> <li>Function is sent to the enclave for secure execution</li> <li>Function is executed in the enclave</li> <li>Function accesses required resources (secrets, storage, blockchain)</li> <li>Execution result is returned</li> <li>Result is forwarded to the client</li> </ol>"},{"location":"data_flow/#wallet-operation-flow","title":"Wallet Operation Flow","text":"<pre><code>+--------+    1. Transaction Request    +--------+    2. Forward    +--------+\n|        |---------------------------&gt;|        |-----------------&gt;|        |\n| User   |                            | API    |                  | Wallet |\n|        |&lt;----------------------------| Gateway|&lt;-----------------| Service|\n+--------+    8. Transaction Status   +--------+    7. Status    +--------+\n                                          |                          |\n                                          |   3. Request             |\n                                          v                          v\n                                      +--------+    4. Sign      +--------+\n                                      |        |----------------&gt;|        |\n                                      | Wallet |                 | Enclave|\n                                      | Data   |&lt;----------------|        |\n                                      +--------+    5. Signed    +--------+\n                                          |                          |\n                                          |   6. Submit              |\n                                          v                          v\n                                      +--------+                 +--------+\n                                      |        |                 |        |\n                                      | Neo N3 |                 | TX     |\n                                      |        |                 | Monitor|\n                                      +--------+                 +--------+\n</code></pre> <ol> <li>User submits transaction request</li> <li>API Gateway forwards to Wallet Service</li> <li>Wallet Service prepares transaction data</li> <li>Transaction is sent to enclave for signing</li> <li>Enclave returns signed transaction</li> <li>Signed transaction is submitted to Neo N3 blockchain</li> <li>Transaction status is reported</li> <li>Status is returned to the user</li> </ol>"},{"location":"data_flow/#price-feed-flow","title":"Price Feed Flow","text":"<pre><code>+--------+    1. Fetch Prices    +--------+    2. Process    +--------+\n|        |--------------------&gt;|        |-----------------&gt;|        |\n|Scheduler|                     |PriceFeed|                 | Enclave|\n|        |                     | Service |                 |        |\n+--------+                     +--------+                 +--------+\n                                   |                          |\n                                   |   3. Store Prices        |\n                                   v                          v\n                               +--------+    4. Sign      +--------+\n                               |        |----------------&gt;|        |\n                               | Price  |                 | Wallet |\n                               | Store  |&lt;----------------|        |\n                               +--------+    5. Signed    +--------+\n                                   |                          |\n                                   |   6. Submit              |\n                                   v                          v\n                               +--------+                 +--------+\n                               |        |                 |        |\n                               | Neo N3 |                 | Oracle |\n                               | Oracle |                 | Monitor|\n                               +--------+                 +--------+\n</code></pre> <ol> <li>Scheduler triggers price feed update</li> <li>Price Feed Service fetches and processes price data</li> <li>Price data is stored locally</li> <li>Price data is signed in the enclave</li> <li>Signed price data is prepared for submission</li> <li>Price data is submitted to Neo N3 Oracle</li> </ol>"},{"location":"data_flow/#event-monitoring-flow","title":"Event Monitoring Flow","text":"<pre><code>+--------+    1. Monitor Events    +--------+    2. Process    +--------+\n|        |----------------------&gt;|        |-----------------&gt;|        |\n| Event  |                        | Event  |                 | Event  |\n| Source |                        | Monitor|                 |Processor|\n+--------+                        +--------+                 +--------+\n                                      |                          |\n                                      |   3. Match Event         |\n                                      v                          v\n                                  +--------+    4. Trigger   +--------+\n                                  |        |----------------&gt;|        |\n                                  | Event  |                 |Function|\n                                  | Rules  |                 | Service|\n                                  +--------+                 +--------+\n                                                                 |\n                                                                 | 5. Execute\n                                                                 v\n                                                             +--------+\n                                                             |        |\n                                                             |Function|\n                                                             | Runner |\n                                                             +--------+\n</code></pre> <ol> <li>Event Source (Neo N3, time-based, external) generates events</li> <li>Event Monitor captures and processes events</li> <li>Events are matched against event rules</li> <li>Matching events trigger function execution</li> <li>Functions are executed in response to events</li> </ol>"},{"location":"data_flow/#secrets-management-flow","title":"Secrets Management Flow","text":"<pre><code>+--------+    1. Store Secret    +--------+    2. Process    +--------+\n|        |--------------------&gt;|        |-----------------&gt;|        |\n| User   |                     | API    |                 | Secrets|\n|        |                     | Gateway|                 | Service|\n+--------+                     +--------+                 +--------+\n                                   |                          |\n                                   |   3. Encrypt             |\n                                   v                          v\n                               +--------+    4. Store     +--------+\n                               |        |----------------&gt;|        |\n                               | Enclave|                 | Secrets|\n                               |        |&lt;----------------| Store  |\n                               +--------+    5. Confirm   +--------+\n                                   |                          |\n                                   |   6. Access Control      |\n                                   v                          v\n                               +--------+                 +--------+\n                               |        |                 |        |\n                               |Function|                 | Access |\n                               | Access |                 | Logs   |\n                               +--------+                 +--------+\n</code></pre> <ol> <li>User submits secret for storage</li> <li>API Gateway forwards to Secrets Service</li> <li>Secret is encrypted in the enclave</li> <li>Encrypted secret is stored</li> <li>Storage is confirmed</li> <li>Access control rules are established for the secret</li> </ol>"},{"location":"data_flow/#data-storage-flow","title":"Data Storage Flow","text":"<pre><code>+--------+    1. Store Data    +--------+    2. Process    +--------+\n|        |------------------&gt;|        |-----------------&gt;|        |\n|Function|                   | Storage|                  | Storage|\n|        |                   | API    |                  | Service|\n+--------+                   +--------+                  +--------+\n                                 |                           |\n                                 |   3. Validate             |\n                                 v                           v\n                             +--------+    4. Store      +--------+\n                             |        |------------------&gt;|        |\n                             | Access |                   | Data   |\n                             | Control|&lt;------------------| Store  |\n                             +--------+    5. Confirm    +--------+\n                                 |                           |\n                                 |   6. Index                |\n                                 v                           v\n                             +--------+                  +--------+\n                             |        |                  |        |\n                             | Search |                  | Backup |\n                             | Index  |                  | Service|\n                             +--------+                  +--------+\n</code></pre> <ol> <li>Function requests data storage</li> <li>Storage API processes the request</li> <li>Access control validates the request</li> <li>Data is stored</li> <li>Storage is confirmed</li> <li>Data is indexed for search and backed up</li> </ol>"},{"location":"data_flow/#metrics-collection-flow","title":"Metrics Collection Flow","text":"<pre><code>+--------+    1. Generate Metrics    +--------+    2. Process    +--------+\n|        |------------------------&gt;|        |-----------------&gt;|        |\n| System |                         | Metrics|                  | Metrics|\n|Component|                        | Agent  |                  |Collector|\n+--------+                         +--------+                  +--------+\n                                       |                           |\n                                       |   3. Aggregate            |\n                                       v                           v\n                                   +--------+    4. Store      +--------+\n                                   |        |------------------&gt;|        |\n                                   | Metrics|                   | Metrics|\n                                   |Processor|&lt;------------------| Store  |\n                                   +--------+    5. Confirm    +--------+\n                                       |                           |\n                                       |   6. Alert                |\n                                       v                           v\n                                   +--------+                  +--------+\n                                   |        |                  |        |\n                                   | Alert  |                  |Dashboard|\n                                   | System |                  | Service|\n                                   +--------+                  +--------+\n</code></pre> <ol> <li>System components generate metrics</li> <li>Metrics Agent collects and forwards metrics</li> <li>Metrics are aggregated and processed</li> <li>Processed metrics are stored</li> <li>Storage is confirmed</li> <li>Alerts are generated for anomalies and dashboards are updated</li> </ol>"},{"location":"deployment-guide/","title":"Neo Service Layer Deployment Guide","text":"<p>This guide outlines the steps to deploy the Neo Service Layer to a production environment.</p>"},{"location":"deployment-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS account with permissions to create and manage Nitro Enclaves</li> <li>EC2 instance with Nitro Enclaves support (e.g., c5.xlarge or larger)</li> <li>Docker installed on the EC2 instance</li> <li>AWS CLI installed and configured</li> <li>.NET 6.0 SDK or later</li> </ul>"},{"location":"deployment-guide/#building-the-enclave-image","title":"Building the Enclave Image","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/r3e-network/neo-service-layer.git\ncd neo-service-layer\n</code></pre></p> </li> <li> <p>Build the enclave application:    <pre><code>dotnet publish -c Release -o ./publish src/NeoServiceLayer.Enclave/NeoServiceLayer.Enclave.csproj\n</code></pre></p> </li> <li> <p>Build the Docker image:    <pre><code>docker build -t neo-service-layer-enclave -f Dockerfile.enclave .\n</code></pre></p> </li> <li> <p>Convert the Docker image to an enclave image:    <pre><code>nitro-cli build-enclave --docker-uri neo-service-layer-enclave:latest --output-file neo-service-layer-enclave.eif\n</code></pre></p> </li> </ol>"},{"location":"deployment-guide/#building-the-parent-application","title":"Building the Parent Application","text":"<ol> <li> <p>Build the parent application:    <pre><code>dotnet publish -c Release -o ./publish src/NeoServiceLayer.Parent/NeoServiceLayer.Parent.csproj\n</code></pre></p> </li> <li> <p>Build the Docker image:    <pre><code>docker build -t neo-service-layer-parent -f Dockerfile.parent .\n</code></pre></p> </li> </ol>"},{"location":"deployment-guide/#deploying-to-aws","title":"Deploying to AWS","text":""},{"location":"deployment-guide/#option-1-manual-deployment","title":"Option 1: Manual Deployment","text":"<ol> <li> <p>Copy the enclave image to the EC2 instance:    <pre><code>scp neo-service-layer-enclave.eif ec2-user@your-ec2-instance:/path/to/enclave/\n</code></pre></p> </li> <li> <p>SSH into the EC2 instance:    <pre><code>ssh ec2-user@your-ec2-instance\n</code></pre></p> </li> <li> <p>Run the enclave:    <pre><code>nitro-cli run-enclave --eif-path /path/to/enclave/neo-service-layer-enclave.eif --memory 4096 --cpu-count 2 --debug-mode\n</code></pre></p> </li> <li> <p>Run the parent application:    <pre><code>docker run -d --name neo-service-layer-parent -p 8080:80 neo-service-layer-parent\n</code></pre></p> </li> </ol>"},{"location":"deployment-guide/#option-2-automated-deployment-with-aws-cdk","title":"Option 2: Automated Deployment with AWS CDK","text":"<ol> <li> <p>Install the AWS CDK:    <pre><code>npm install -g aws-cdk\n</code></pre></p> </li> <li> <p>Navigate to the CDK directory:    <pre><code>cd deployment/cdk\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Deploy the stack:    <pre><code>cdk deploy\n</code></pre></p> </li> </ol>"},{"location":"deployment-guide/#configuration","title":"Configuration","text":""},{"location":"deployment-guide/#environment-variables","title":"Environment Variables","text":"<p>The Neo Service Layer can be configured using environment variables:</p>"},{"location":"deployment-guide/#parent-application","title":"Parent Application","text":"Variable Description Default <code>NSL_API_PORT</code> Port for the API server 8080 <code>NSL_LOG_LEVEL</code> Log level (Debug, Info, Warning, Error) Info <code>NSL_JWT_SECRET</code> Secret for JWT token signing (required) <code>NSL_ENCLAVE_CID</code> CID of the enclave 16 <code>NSL_ENCLAVE_PORT</code> Port of the enclave 5000"},{"location":"deployment-guide/#enclave-application","title":"Enclave Application","text":"Variable Description Default <code>NSL_ENCLAVE_PORT</code> Port for the enclave server 5000 <code>NSL_LOG_LEVEL</code> Log level (Debug, Info, Warning, Error) Info <code>NSL_NEO_RPC_URL</code> URL of the Neo N3 RPC server http://seed1.neo.org:10332 <code>NSL_NEO_NETWORK_MAGIC</code> Network magic number for Neo N3 860833102 (MainNet)"},{"location":"deployment-guide/#configuration-files","title":"Configuration Files","text":"<p>Configuration can also be provided using JSON configuration files:</p>"},{"location":"deployment-guide/#parent-application_1","title":"Parent Application","text":"<pre><code>{\n  \"Api\": {\n    \"Port\": 8080\n  },\n  \"Logging\": {\n    \"LogLevel\": \"Info\"\n  },\n  \"Jwt\": {\n    \"Secret\": \"your-secret-key\",\n    \"Issuer\": \"NeoServiceLayer\",\n    \"Audience\": \"NeoServiceLayerApi\",\n    \"ExpirationMinutes\": 60\n  },\n  \"Enclave\": {\n    \"Cid\": 16,\n    \"Port\": 5000\n  }\n}\n</code></pre>"},{"location":"deployment-guide/#enclave-application_1","title":"Enclave Application","text":"<pre><code>{\n  \"Enclave\": {\n    \"Port\": 5000\n  },\n  \"Logging\": {\n    \"LogLevel\": \"Info\"\n  },\n  \"Neo\": {\n    \"RpcUrl\": \"http://seed1.neo.org:10332\",\n    \"NetworkMagic\": 860833102\n  }\n}\n</code></pre>"},{"location":"deployment-guide/#monitoring","title":"Monitoring","text":""},{"location":"deployment-guide/#health-checks","title":"Health Checks","text":"<p>The Neo Service Layer provides health check endpoints:</p> <ul> <li>Parent application: <code>GET /health</code></li> <li>Enclave application: Not directly accessible, but monitored by the parent application</li> </ul>"},{"location":"deployment-guide/#metrics","title":"Metrics","text":"<p>Metrics are exposed via Prometheus endpoints:</p> <ul> <li>Parent application: <code>GET /metrics</code></li> <li>Enclave application: Not directly accessible, but metrics are forwarded to the parent application</li> </ul>"},{"location":"deployment-guide/#logging","title":"Logging","text":"<p>Logs are written to stdout/stderr and can be collected using standard Docker/AWS logging mechanisms.</p>"},{"location":"deployment-guide/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment-guide/#secrets-management","title":"Secrets Management","text":"<ul> <li>Use AWS Secrets Manager or similar service to store sensitive configuration values</li> <li>Do not hardcode secrets in the application code or configuration files</li> <li>Rotate secrets regularly</li> </ul>"},{"location":"deployment-guide/#network-security","title":"Network Security","text":"<ul> <li>Use a private subnet for the EC2 instance</li> <li>Use security groups to restrict access to the EC2 instance</li> <li>Use HTTPS for all external communication</li> </ul>"},{"location":"deployment-guide/#enclave-security","title":"Enclave Security","text":"<ul> <li>Keep the enclave image up to date</li> <li>Use the minimum required memory and CPU for the enclave</li> <li>Use debug mode only for development and testing</li> </ul>"},{"location":"deployment-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment-guide/#common-issues","title":"Common Issues","text":""},{"location":"deployment-guide/#enclave-fails-to-start","title":"Enclave Fails to Start","text":"<ul> <li>Check the enclave logs: <code>nitro-cli console --enclave-id &lt;enclave-id&gt;</code></li> <li>Ensure the enclave has enough memory and CPU</li> <li>Verify the enclave image is built correctly</li> </ul>"},{"location":"deployment-guide/#parent-application-cannot-connect-to-enclave","title":"Parent Application Cannot Connect to Enclave","text":"<ul> <li>Verify the enclave is running: <code>nitro-cli describe-enclaves</code></li> <li>Check the CID and port configuration</li> <li>Ensure the parent application has permission to connect to the enclave</li> </ul>"},{"location":"deployment-guide/#api-requests-fail","title":"API Requests Fail","text":"<ul> <li>Check the parent application logs</li> <li>Verify the JWT configuration</li> <li>Ensure the API server is running and accessible</li> </ul>"},{"location":"deployment-guide/#conclusion","title":"Conclusion","text":"<p>This guide provides the basic steps to deploy the Neo Service Layer to a production environment. For more detailed information, refer to the documentation in the <code>docs/</code> directory.</p>"},{"location":"function_execution/","title":"Function Execution in Neo Service Layer","text":""},{"location":"function_execution/#overview","title":"Overview","text":"<p>The Function Service in Neo Service Layer allows users to deploy and execute serverless functions in JavaScript, Python, and C#. This document provides details on the implementation of the function execution engine, with a focus on JavaScript function execution.</p>"},{"location":"function_execution/#architecture","title":"Architecture","text":"<p>The function execution system consists of several key components:</p> <ol> <li>FunctionService: The main service that manages function deployment, validation, and execution.</li> <li>FunctionExecutor: Coordinates the execution of functions across different runtime environments.</li> <li>Runtime Implementations:</li> <li>NodeJsRuntime: Executes JavaScript functions</li> <li>DotNetRuntime: Executes C# functions</li> <li>PythonRuntime: Executes Python functions</li> </ol>"},{"location":"function_execution/#javascript-function-execution","title":"JavaScript Function Execution","text":""},{"location":"function_execution/#nodejsruntime","title":"NodeJsRuntime","text":"<p>The <code>NodeJsRuntime</code> class is responsible for executing JavaScript functions. It provides the following capabilities:</p> <ul> <li>Compiling JavaScript code to ensure it's valid</li> <li>Executing JavaScript functions with provided parameters</li> <li>Handling function execution in response to events</li> <li>Providing access to service layer components (PriceFeed, Secrets, Wallet, etc.)</li> </ul>"},{"location":"function_execution/#implementation-details","title":"Implementation Details","text":"<p>The JavaScript runtime uses a secure execution environment to run user-provided code. It:</p> <ol> <li>Validates the JavaScript syntax during compilation</li> <li>Creates a sandboxed execution environment</li> <li>Provides controlled access to Neo Service Layer components</li> <li>Captures function output and logs</li> <li>Enforces execution limits (time, memory)</li> </ol>"},{"location":"function_execution/#security-considerations","title":"Security Considerations","text":"<ul> <li>JavaScript functions run in a sandboxed environment</li> <li>Access to system resources is restricted</li> <li>Service access is controlled through explicit interfaces</li> <li>Function execution is monitored for resource usage</li> </ul>"},{"location":"function_execution/#testing-javascript-function-execution","title":"Testing JavaScript Function Execution","text":""},{"location":"function_execution/#test-implementation","title":"Test Implementation","text":"<p>The <code>JavaScriptFunctionExecutionTests</code> class contains unit tests for the JavaScript function execution capabilities. These tests verify:</p> <ol> <li>JavaScript compilation works correctly</li> <li>Simple function execution returns expected results</li> <li>Functions can access environment variables</li> <li>Console logs are captured correctly</li> <li>Complex objects are handled properly</li> <li>Functions can process event data</li> </ol>"},{"location":"function_execution/#testing-challenges-and-solutions","title":"Testing Challenges and Solutions","text":"<p>When testing the JavaScript function execution system, we encountered challenges with mocking dependencies that don't have parameterless constructors. Specifically:</p> <ol> <li> <p>Challenge: The <code>FunctionExecutor</code> class requires instances of <code>NodeJsRuntime</code>, <code>DotNetRuntime</code>, and <code>PythonRuntime</code>, but these classes don't have parameterless constructors, which is required by the Moq library for automatic mocking.</p> </li> <li> <p>Solution: Instead of trying to mock these classes directly, we:</p> </li> <li>Created actual instances of the runtime classes with mocked loggers</li> <li>Used these actual instances when creating the <code>FunctionExecutor</code></li> <li>Used reflection to update the <code>_runtimes</code> dictionary in the <code>FunctionExecutor</code> to include the <code>NodeJsRuntime</code> instance after it was created</li> </ol> <pre><code>// Create loggers for the runtime dependencies\nvar dotNetRuntimeLoggerMock = new Mock&lt;ILogger&lt;DotNetRuntime&gt;&gt;();\nvar pythonRuntimeLoggerMock = new Mock&lt;ILogger&lt;PythonRuntime&gt;&gt;();\n\n// Create actual instances of the runtime classes\nvar dotNetRuntime = new DotNetRuntime(dotNetRuntimeLoggerMock.Object);\nvar pythonRuntime = new PythonRuntime(pythonRuntimeLoggerMock.Object);\n\n// Create the FunctionExecutor with actual runtime instances\nvar functionExecutor = new FunctionExecutor(\n    functionExecutorLoggerMock.Object,\n    null, // We'll set this after creating the NodeJsRuntime to avoid circular dependency\n    dotNetRuntime,\n    pythonRuntime);\n\n// Create the NodeJsRuntime\n_nodeJsRuntime = new NodeJsRuntime(\n    _loggerMock.Object,\n    priceFeedService,\n    secretsService,\n    walletService,\n    functionService);\n\n// Update the FunctionExecutor's _runtimes dictionary using reflection\nvar runtimesField = typeof(FunctionExecutor).GetField(\"_runtimes\", \n    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);\n\nif (runtimesField != null)\n{\n    var runtimes = runtimesField.GetValue(functionExecutor) as Dictionary&lt;string, IFunctionRuntime&gt;;\n    if (runtimes != null)\n    {\n        runtimes[\"node\"] = _nodeJsRuntime;\n        runtimes[\"javascript\"] = _nodeJsRuntime;\n    }\n}\n</code></pre> <p>This approach allows us to properly test the JavaScript function execution without having to modify the core implementation classes to support parameterless constructors.</p>"},{"location":"function_execution/#best-practices-for-function-development","title":"Best Practices for Function Development","text":""},{"location":"function_execution/#javascript-functions","title":"JavaScript Functions","text":"<p>When developing JavaScript functions for Neo Service Layer:</p> <ol> <li> <p>Function Structure: Use the standard function signature with a parameters object    <pre><code>function myFunction(params) {\n    // Function logic here\n    return result;\n}\n</code></pre></p> </li> <li> <p>Service Access: Access Neo Service Layer services through the provided global objects    <pre><code>// Access price feed data\nconst btcPrice = priceFeed.getPrice(\"BTC\");\n\n// Access secrets\nconst apiKey = secrets.get(\"my-api-key\");\n\n// Use wallet services\nconst txHash = wallet.sendAsset(\"NEO\", \"NeoAddress\", 1);\n</code></pre></p> </li> <li> <p>Event Handling: Process events with the standard event handler signature    <pre><code>function handleEvent(event) {\n    const eventType = event.type;\n    const eventData = event.data;\n    // Process event\n    return result;\n}\n</code></pre></p> </li> <li> <p>Error Handling: Use try/catch blocks for proper error handling    <pre><code>try {\n    // Function logic\n} catch (error) {\n    console.log(\"Error:\", error.message);\n    throw new Error(\"Function execution failed: \" + error.message);\n}\n</code></pre></p> </li> <li> <p>Logging: Use console.log for debugging and monitoring    <pre><code>console.log(\"Processing request:\", params.id);\n</code></pre></p> </li> </ol>"},{"location":"function_execution/#future-enhancements","title":"Future Enhancements","text":"<p>Planned enhancements for the function execution system include:</p> <ol> <li>Improved Performance: Optimizing function cold start times</li> <li>Enhanced Security: Adding more granular access controls</li> <li>Expanded Capabilities: Supporting more service integrations</li> <li>Better Monitoring: Providing more detailed execution metrics</li> <li>Debugging Tools: Adding interactive debugging capabilities</li> </ol>"},{"location":"future-enhancements/","title":"Neo Service Layer Future Enhancements","text":"<p>This document outlines the planned future enhancements for the Neo Service Layer.</p>"},{"location":"future-enhancements/#short-term-enhancements-0-3-months","title":"Short-Term Enhancements (0-3 months)","text":""},{"location":"future-enhancements/#1-performance-optimizations","title":"1. Performance Optimizations","text":""},{"location":"future-enhancements/#11-vsock-communication","title":"1.1 VSOCK Communication","text":"<ul> <li>Implement connection pooling for VSOCK communication</li> <li>Optimize message serialization and deserialization</li> <li>Implement batching for small messages</li> </ul>"},{"location":"future-enhancements/#12-database-access","title":"1.2 Database Access","text":"<ul> <li>Implement connection pooling for database access</li> <li>Optimize database queries</li> <li>Implement caching for frequently accessed data</li> </ul>"},{"location":"future-enhancements/#13-memory-management","title":"1.3 Memory Management","text":"<ul> <li>Optimize memory usage in the enclave</li> <li>Implement memory limits for operations</li> <li>Implement garbage collection strategies</li> </ul>"},{"location":"future-enhancements/#2-security-enhancements","title":"2. Security Enhancements","text":""},{"location":"future-enhancements/#21-attestation","title":"2.1 Attestation","text":"<ul> <li>Implement attestation document verification</li> <li>Implement attestation-based access control</li> <li>Integrate with AWS Nitro Attestation service</li> </ul>"},{"location":"future-enhancements/#22-key-management","title":"2.2 Key Management","text":"<ul> <li>Implement key rotation for service keys</li> <li>Implement key backup and recovery</li> <li>Integrate with AWS KMS for key management</li> </ul>"},{"location":"future-enhancements/#23-audit-logging","title":"2.3 Audit Logging","text":"<ul> <li>Implement comprehensive audit logging</li> <li>Implement log forwarding to a secure log storage</li> <li>Implement log analysis for security events</li> </ul>"},{"location":"future-enhancements/#3-reliability-enhancements","title":"3. Reliability Enhancements","text":""},{"location":"future-enhancements/#31-error-handling","title":"3.1 Error Handling","text":"<ul> <li>Improve error handling and reporting</li> <li>Implement retry mechanisms for transient errors</li> <li>Implement circuit breakers for external services</li> </ul>"},{"location":"future-enhancements/#32-monitoring","title":"3.2 Monitoring","text":"<ul> <li>Implement comprehensive monitoring</li> <li>Implement alerting for critical events</li> <li>Implement health checks for all components</li> </ul>"},{"location":"future-enhancements/#33-backup-and-recovery","title":"3.3 Backup and Recovery","text":"<ul> <li>Implement backup and recovery procedures</li> <li>Implement disaster recovery planning</li> <li>Implement data replication for high availability</li> </ul>"},{"location":"future-enhancements/#medium-term-enhancements-3-6-months","title":"Medium-Term Enhancements (3-6 months)","text":""},{"location":"future-enhancements/#4-feature-enhancements","title":"4. Feature Enhancements","text":""},{"location":"future-enhancements/#41-wallet-management","title":"4.1 Wallet Management","text":"<ul> <li>Implement multi-signature wallets</li> <li>Implement hardware wallet integration</li> <li>Implement wallet recovery mechanisms</li> </ul>"},{"location":"future-enhancements/#42-secret-management","title":"4.2 Secret Management","text":"<ul> <li>Implement secret sharing</li> <li>Implement secret versioning</li> <li>Implement secret rotation scheduling</li> </ul>"},{"location":"future-enhancements/#43-price-feed","title":"4.3 Price Feed","text":"<ul> <li>Implement additional price sources</li> <li>Implement price feed redundancy</li> <li>Implement price feed validation</li> </ul>"},{"location":"future-enhancements/#5-integration-enhancements","title":"5. Integration Enhancements","text":""},{"location":"future-enhancements/#51-blockchain-integration","title":"5.1 Blockchain Integration","text":"<ul> <li>Implement integration with additional Neo N3 RPC nodes</li> <li>Implement integration with Neo N3 state channels</li> <li>Implement integration with Neo N3 oracles</li> </ul>"},{"location":"future-enhancements/#52-external-service-integration","title":"5.2 External Service Integration","text":"<ul> <li>Implement integration with AWS services</li> <li>Implement integration with cloud storage providers</li> <li>Implement integration with monitoring services</li> </ul>"},{"location":"future-enhancements/#53-api-enhancements","title":"5.3 API Enhancements","text":"<ul> <li>Implement GraphQL API</li> <li>Implement WebSocket API</li> <li>Implement API versioning</li> </ul>"},{"location":"future-enhancements/#6-developer-experience","title":"6. Developer Experience","text":""},{"location":"future-enhancements/#61-documentation","title":"6.1 Documentation","text":"<ul> <li>Improve API documentation</li> <li>Implement interactive API documentation</li> <li>Implement code examples and tutorials</li> </ul>"},{"location":"future-enhancements/#62-sdk","title":"6.2 SDK","text":"<ul> <li>Implement SDKs for popular programming languages</li> <li>Implement CLI tools</li> <li>Implement developer portal</li> </ul>"},{"location":"future-enhancements/#63-testing","title":"6.3 Testing","text":"<ul> <li>Implement comprehensive test suite</li> <li>Implement automated testing</li> <li>Implement performance testing</li> </ul>"},{"location":"future-enhancements/#long-term-enhancements-6-months","title":"Long-Term Enhancements (6+ months)","text":""},{"location":"future-enhancements/#7-scalability-enhancements","title":"7. Scalability Enhancements","text":""},{"location":"future-enhancements/#71-horizontal-scaling","title":"7.1 Horizontal Scaling","text":"<ul> <li>Implement horizontal scaling for the parent application</li> <li>Implement load balancing</li> <li>Implement service discovery</li> </ul>"},{"location":"future-enhancements/#72-multi-region-deployment","title":"7.2 Multi-Region Deployment","text":"<ul> <li>Implement multi-region deployment</li> <li>Implement global load balancing</li> <li>Implement data replication across regions</li> </ul>"},{"location":"future-enhancements/#73-auto-scaling","title":"7.3 Auto-Scaling","text":"<ul> <li>Implement auto-scaling for the parent application</li> <li>Implement auto-scaling for the enclave</li> <li>Implement capacity planning</li> </ul>"},{"location":"future-enhancements/#8-advanced-features","title":"8. Advanced Features","text":""},{"location":"future-enhancements/#81-machine-learning","title":"8.1 Machine Learning","text":"<ul> <li>Implement anomaly detection for security events</li> <li>Implement price prediction for price feed</li> <li>Implement fraud detection for transactions</li> </ul>"},{"location":"future-enhancements/#82-smart-contract-integration","title":"8.2 Smart Contract Integration","text":"<ul> <li>Implement smart contract deployment</li> <li>Implement smart contract interaction</li> <li>Implement smart contract monitoring</li> </ul>"},{"location":"future-enhancements/#83-decentralized-identity","title":"8.3 Decentralized Identity","text":"<ul> <li>Implement decentralized identity management</li> <li>Implement verifiable credentials</li> <li>Implement self-sovereign identity</li> </ul>"},{"location":"future-enhancements/#9-ecosystem-development","title":"9. Ecosystem Development","text":""},{"location":"future-enhancements/#91-partner-integration","title":"9.1 Partner Integration","text":"<ul> <li>Implement integration with partner services</li> <li>Implement partner API</li> <li>Implement partner portal</li> </ul>"},{"location":"future-enhancements/#92-community-development","title":"9.2 Community Development","text":"<ul> <li>Implement open-source contributions</li> <li>Implement community forums</li> <li>Implement hackathons and developer events</li> </ul>"},{"location":"future-enhancements/#93-standards-development","title":"9.3 Standards Development","text":"<ul> <li>Contribute to Neo N3 standards</li> <li>Contribute to blockchain interoperability standards</li> <li>Contribute to security standards</li> </ul>"},{"location":"future-enhancements/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"future-enhancements/#phase-1-foundation-0-3-months","title":"Phase 1: Foundation (0-3 months)","text":"<ul> <li>Complete the implementation of all core services</li> <li>Implement basic security features</li> <li>Implement basic monitoring and logging</li> <li>Implement basic documentation</li> </ul>"},{"location":"future-enhancements/#phase-2-enhancement-3-6-months","title":"Phase 2: Enhancement (3-6 months)","text":"<ul> <li>Implement performance optimizations</li> <li>Implement advanced security features</li> <li>Implement reliability enhancements</li> <li>Implement feature enhancements</li> </ul>"},{"location":"future-enhancements/#phase-3-scale-6-9-months","title":"Phase 3: Scale (6-9 months)","text":"<ul> <li>Implement scalability enhancements</li> <li>Implement multi-region deployment</li> <li>Implement auto-scaling</li> <li>Implement advanced features</li> </ul>"},{"location":"future-enhancements/#phase-4-ecosystem-9-months","title":"Phase 4: Ecosystem (9+ months)","text":"<ul> <li>Implement ecosystem development</li> <li>Implement partner integration</li> <li>Implement community development</li> <li>Implement standards development</li> </ul>"},{"location":"future-enhancements/#conclusion","title":"Conclusion","text":"<p>This document outlines the planned future enhancements for the Neo Service Layer. The implementation roadmap provides a timeline for the implementation of these enhancements. The actual implementation timeline may vary based on priorities and resources.</p>"},{"location":"future_work/","title":"Neo Service Layer: Future Work and Enhancement Plan","text":"<p>This document outlines the planned future enhancements and improvements for the Neo Service Layer project. These items represent the roadmap for continued development after the current implementation phase.</p>"},{"location":"future_work/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Advanced Monitoring and Alerting</li> <li>Additional Function Runtimes</li> <li>CI/CD Pipeline</li> <li>Function Versioning and Lifecycle Management</li> <li>Enhanced Function Execution Engine</li> <li>Visual Workflow Editor</li> <li>Event-Driven Architecture</li> <li>Additional Storage Providers</li> <li>Advanced Metrics and Analytics</li> <li>Function Debugging and Profiling</li> <li>Security Enhancements</li> <li>Performance Optimizations</li> <li>Documentation and Developer Experience</li> </ol>"},{"location":"future_work/#advanced-monitoring-and-alerting","title":"Advanced Monitoring and Alerting","text":""},{"location":"future_work/#description","title":"Description","text":"<p>Implement a comprehensive monitoring and alerting system to provide real-time insights into the health and performance of the Neo Service Layer.</p>"},{"location":"future_work/#tasks","title":"Tasks","text":"<ul> <li>[ ] Implement a centralized logging system with Elasticsearch, Logstash, and Kibana (ELK stack)</li> <li>[ ] Add support for custom alerting rules and notifications</li> <li>[ ] Implement anomaly detection for identifying unusual patterns in system behavior</li> <li>[ ] Create dashboards for visualizing system performance and health</li> <li>[ ] Add support for custom metrics and KPIs</li> <li>[ ] Implement proactive monitoring for potential issues</li> <li>[ ] Add support for log correlation across services</li> </ul>"},{"location":"future_work/#expected-benefits","title":"Expected Benefits","text":"<ul> <li>Improved system observability</li> <li>Faster issue detection and resolution</li> <li>Better understanding of system performance</li> <li>Proactive identification of potential issues</li> </ul>"},{"location":"future_work/#additional-function-runtimes","title":"Additional Function Runtimes","text":""},{"location":"future_work/#description_1","title":"Description","text":"<p>Expand the supported function runtimes to include more programming languages and execution environments.</p>"},{"location":"future_work/#tasks_1","title":"Tasks","text":"<ul> <li>[ ] Add support for Go runtime</li> <li>[ ] Add support for Rust runtime</li> <li>[ ] Add support for Ruby runtime</li> <li>[ ] Add support for PHP runtime</li> <li>[ ] Add support for Java runtime</li> <li>[ ] Add support for WebAssembly runtime</li> <li>[ ] Implement a plugin system for custom runtimes</li> <li>[ ] Add support for containerized function execution</li> </ul>"},{"location":"future_work/#expected-benefits_1","title":"Expected Benefits","text":"<ul> <li>Broader developer adoption</li> <li>Support for more use cases and scenarios</li> <li>Flexibility in choosing the right language for the job</li> <li>Better performance for specific workloads</li> </ul>"},{"location":"future_work/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"future_work/#description_2","title":"Description","text":"<p>Implement a comprehensive CI/CD pipeline for automated testing, building, and deployment of the Neo Service Layer.</p>"},{"location":"future_work/#tasks_2","title":"Tasks","text":"<ul> <li>[ ] Set up automated unit testing</li> <li>[ ] Set up automated integration testing</li> <li>[ ] Implement code quality checks and static analysis</li> <li>[ ] Set up automated builds for different environments</li> <li>[ ] Implement automated deployment to staging and production</li> <li>[ ] Add support for canary deployments</li> <li>[ ] Implement automated rollback mechanisms</li> <li>[ ] Set up performance testing as part of the pipeline</li> </ul>"},{"location":"future_work/#expected-benefits_2","title":"Expected Benefits","text":"<ul> <li>Faster and more reliable releases</li> <li>Improved code quality</li> <li>Reduced manual effort for deployments</li> <li>Early detection of issues</li> </ul>"},{"location":"future_work/#function-versioning-and-lifecycle-management","title":"Function Versioning and Lifecycle Management","text":""},{"location":"future_work/#description_3","title":"Description","text":"<p>Implement a comprehensive function versioning and lifecycle management system to support the entire function lifecycle from development to retirement.</p>"},{"location":"future_work/#tasks_3","title":"Tasks","text":"<ul> <li>[ ] Implement semantic versioning for functions</li> <li>[ ] Add support for function aliases (e.g., \"latest\", \"stable\")</li> <li>[ ] Implement function deployment stages (dev, test, prod)</li> <li>[ ] Add support for function rollback</li> <li>[ ] Implement function deprecation and retirement workflows</li> <li>[ ] Add support for function dependencies and dependency management</li> <li>[ ] Implement function migration tools</li> </ul>"},{"location":"future_work/#expected-benefits_3","title":"Expected Benefits","text":"<ul> <li>Better control over function lifecycle</li> <li>Safer deployments with rollback capability</li> <li>Improved developer experience</li> <li>Better management of function dependencies</li> </ul>"},{"location":"future_work/#enhanced-function-execution-engine","title":"Enhanced Function Execution Engine","text":""},{"location":"future_work/#description_4","title":"Description","text":"<p>Enhance the function execution engine to support more advanced execution patterns and improve performance.</p>"},{"location":"future_work/#tasks_4","title":"Tasks","text":"<ul> <li>[ ] Implement parallel function execution</li> <li>[ ] Add support for function chaining</li> <li>[ ] Implement function batching for improved performance</li> <li>[ ] Add support for long-running functions</li> <li>[ ] Implement function execution quotas and rate limiting</li> <li>[ ] Add support for function execution priorities</li> <li>[ ] Implement function execution retries with backoff</li> <li>[ ] Add support for function execution timeouts</li> </ul>"},{"location":"future_work/#expected-benefits_4","title":"Expected Benefits","text":"<ul> <li>Improved performance for complex workflows</li> <li>Better resource utilization</li> <li>Support for more complex use cases</li> <li>Improved reliability with retries</li> </ul>"},{"location":"future_work/#visual-workflow-editor","title":"Visual Workflow Editor","text":""},{"location":"future_work/#description_5","title":"Description","text":"<p>Implement a visual workflow editor for creating and managing function compositions without writing code.</p>"},{"location":"future_work/#tasks_5","title":"Tasks","text":"<ul> <li>[ ] Design and implement a visual workflow editor UI</li> <li>[ ] Add support for drag-and-drop function composition</li> <li>[ ] Implement workflow validation</li> <li>[ ] Add support for conditional branching</li> <li>[ ] Implement loops and iterations in workflows</li> <li>[ ] Add support for error handling and recovery</li> <li>[ ] Implement workflow versioning</li> <li>[ ] Add support for workflow templates</li> </ul>"},{"location":"future_work/#expected-benefits_5","title":"Expected Benefits","text":"<ul> <li>Easier creation of complex workflows</li> <li>Reduced need for coding skills</li> <li>Better visualization of function compositions</li> <li>Improved collaboration between technical and non-technical users</li> </ul>"},{"location":"future_work/#event-driven-architecture","title":"Event-Driven Architecture","text":""},{"location":"future_work/#description_6","title":"Description","text":"<p>Enhance the event-driven capabilities of the Neo Service Layer to support more advanced event processing patterns.</p>"},{"location":"future_work/#tasks_6","title":"Tasks","text":"<ul> <li>[ ] Implement a robust event bus</li> <li>[ ] Add support for event filtering and routing</li> <li>[ ] Implement event persistence and replay</li> <li>[ ] Add support for event schemas and validation</li> <li>[ ] Implement dead letter queues for failed events</li> <li>[ ] Add support for event sourcing</li> <li>[ ] Implement event correlation and aggregation</li> <li>[ ] Add support for complex event processing</li> </ul>"},{"location":"future_work/#expected-benefits_6","title":"Expected Benefits","text":"<ul> <li>Improved scalability through decoupling</li> <li>Better support for asynchronous processing</li> <li>Enhanced reliability with event persistence</li> <li>Support for more complex event processing patterns</li> </ul>"},{"location":"future_work/#additional-storage-providers","title":"Additional Storage Providers","text":""},{"location":"future_work/#description_7","title":"Description","text":"<p>Expand the supported storage providers to include more options for data persistence.</p>"},{"location":"future_work/#tasks_7","title":"Tasks","text":"<ul> <li>[ ] Add support for Azure Blob Storage</li> <li>[ ] Add support for Google Cloud Storage</li> <li>[ ] Add support for MinIO</li> <li>[ ] Implement support for PostgreSQL</li> <li>[ ] Add support for MySQL/MariaDB</li> <li>[ ] Implement support for Cassandra</li> <li>[ ] Add support for DynamoDB</li> <li>[ ] Implement support for Elasticsearch for search</li> </ul>"},{"location":"future_work/#expected-benefits_7","title":"Expected Benefits","text":"<ul> <li>More flexibility in choosing storage solutions</li> <li>Better support for different deployment environments</li> <li>Optimized storage for specific use cases</li> <li>Improved performance with specialized storage</li> </ul>"},{"location":"future_work/#advanced-metrics-and-analytics","title":"Advanced Metrics and Analytics","text":""},{"location":"future_work/#description_8","title":"Description","text":"<p>Implement advanced metrics collection and analytics capabilities to provide deeper insights into system and function performance.</p>"},{"location":"future_work/#tasks_8","title":"Tasks","text":"<ul> <li>[ ] Implement detailed function execution metrics</li> <li>[ ] Add support for custom metrics</li> <li>[ ] Implement metrics aggregation and analysis</li> <li>[ ] Add support for metrics visualization</li> <li>[ ] Implement cost analysis for function execution</li> <li>[ ] Add support for usage reporting</li> <li>[ ] Implement performance trend analysis</li> <li>[ ] Add support for anomaly detection in metrics</li> </ul>"},{"location":"future_work/#expected-benefits_8","title":"Expected Benefits","text":"<ul> <li>Better understanding of system performance</li> <li>Identification of optimization opportunities</li> <li>Improved capacity planning</li> <li>Better cost management</li> </ul>"},{"location":"future_work/#function-debugging-and-profiling","title":"Function Debugging and Profiling","text":""},{"location":"future_work/#description_9","title":"Description","text":"<p>Implement comprehensive debugging and profiling tools for functions to help developers identify and fix issues.</p>"},{"location":"future_work/#tasks_9","title":"Tasks","text":"<ul> <li>[ ] Implement function execution logs with different verbosity levels</li> <li>[ ] Add support for step-by-step debugging</li> <li>[ ] Implement function execution profiling</li> <li>[ ] Add support for memory profiling</li> <li>[ ] Implement CPU profiling</li> <li>[ ] Add support for network call tracing</li> <li>[ ] Implement function execution visualization</li> <li>[ ] Add support for remote debugging</li> </ul>"},{"location":"future_work/#expected-benefits_9","title":"Expected Benefits","text":"<ul> <li>Faster issue identification and resolution</li> <li>Improved developer productivity</li> <li>Better understanding of function performance</li> <li>Easier optimization of functions</li> </ul>"},{"location":"future_work/#security-enhancements","title":"Security Enhancements","text":""},{"location":"future_work/#description_10","title":"Description","text":"<p>Enhance the security capabilities of the Neo Service Layer to protect against various threats and vulnerabilities.</p>"},{"location":"future_work/#tasks_10","title":"Tasks","text":"<ul> <li>[ ] Implement function code scanning for vulnerabilities</li> <li>[ ] Add support for function execution isolation</li> <li>[ ] Implement fine-grained access control for functions</li> <li>[ ] Add support for function execution auditing</li> <li>[ ] Implement encryption for function code and data</li> <li>[ ] Add support for secrets rotation</li> <li>[ ] Implement security compliance reporting</li> <li>[ ] Add support for multi-factor authentication</li> </ul>"},{"location":"future_work/#expected-benefits_10","title":"Expected Benefits","text":"<ul> <li>Improved security posture</li> <li>Better protection against threats</li> <li>Compliance with security standards</li> <li>Enhanced trust in the platform</li> </ul>"},{"location":"future_work/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"future_work/#description_11","title":"Description","text":"<p>Optimize the performance of the Neo Service Layer to improve throughput, reduce latency, and enhance resource utilization.</p>"},{"location":"future_work/#tasks_11","title":"Tasks","text":"<ul> <li>[ ] Implement function cold start optimizations</li> <li>[ ] Add support for function pre-warming</li> <li>[ ] Implement function execution caching</li> <li>[ ] Add support for resource pooling</li> <li>[ ] Implement adaptive scaling based on load</li> <li>[ ] Add support for function execution prioritization</li> <li>[ ] Implement performance benchmarking</li> <li>[ ] Add support for performance tuning recommendations</li> </ul>"},{"location":"future_work/#expected-benefits_11","title":"Expected Benefits","text":"<ul> <li>Reduced function execution latency</li> <li>Improved throughput</li> <li>Better resource utilization</li> <li>Enhanced user experience</li> </ul>"},{"location":"future_work/#documentation-and-developer-experience","title":"Documentation and Developer Experience","text":""},{"location":"future_work/#description_12","title":"Description","text":"<p>Enhance the documentation and developer experience to make it easier for developers to use and contribute to the Neo Service Layer.</p>"},{"location":"future_work/#tasks_12","title":"Tasks","text":"<ul> <li>[ ] Create comprehensive API documentation</li> <li>[ ] Add interactive API examples</li> <li>[ ] Implement a developer portal</li> <li>[ ] Add support for function templates</li> <li>[ ] Implement a function marketplace</li> <li>[ ] Add support for function sharing</li> <li>[ ] Create tutorials and guides</li> <li>[ ] Implement a developer community forum</li> </ul>"},{"location":"future_work/#expected-benefits_12","title":"Expected Benefits","text":"<ul> <li>Improved developer onboarding</li> <li>Faster development of functions</li> <li>Better understanding of platform capabilities</li> <li>Enhanced developer community</li> </ul>"},{"location":"future_work/#implementation-timeline","title":"Implementation Timeline","text":"<p>The implementation of these enhancements will be prioritized based on user needs and strategic importance. The following is a tentative timeline for implementation:</p>"},{"location":"future_work/#short-term-3-6-months","title":"Short-term (3-6 months)","text":"<ul> <li>Advanced Monitoring and Alerting</li> <li>CI/CD Pipeline</li> <li>Function Versioning and Lifecycle Management</li> <li>Documentation and Developer Experience</li> </ul>"},{"location":"future_work/#medium-term-6-12-months","title":"Medium-term (6-12 months)","text":"<ul> <li>Enhanced Function Execution Engine</li> <li>Additional Function Runtimes</li> <li>Function Debugging and Profiling</li> <li>Performance Optimizations</li> </ul>"},{"location":"future_work/#long-term-12-18-months","title":"Long-term (12-18 months)","text":"<ul> <li>Visual Workflow Editor</li> <li>Event-Driven Architecture</li> <li>Additional Storage Providers</li> <li>Advanced Metrics and Analytics</li> <li>Security Enhancements</li> </ul> <p>This timeline is subject to change based on feedback, resource availability, and evolving priorities.</p>"},{"location":"future_work/#conclusion","title":"Conclusion","text":"<p>The future work outlined in this document represents a comprehensive roadmap for enhancing the Neo Service Layer. By implementing these enhancements, we aim to create a more powerful, flexible, and user-friendly platform for serverless function development, testing, sharing, and orchestration.</p> <p>Feedback on this roadmap is welcome and encouraged. Please submit your suggestions and ideas through the project's issue tracker or discussion forum.</p>"},{"location":"implementation/","title":"Neo Service Layer Implementation Guide","text":""},{"location":"implementation/#overview","title":"Overview","text":"<p>This document provides detailed implementation guidelines for the Neo Service Layer, a serverless platform for Neo N3 blockchain with AWS Nitro Enclave support. It outlines the technical specifications, component implementations, and integration details necessary to build the complete system.</p>"},{"location":"implementation/#technology-stack","title":"Technology Stack","text":""},{"location":"implementation/#core-technologies","title":"Core Technologies","text":"<ul> <li>Programming Language: C# (.NET 7.0+)</li> <li>Cloud Platform: AWS (EC2 with Nitro Enclaves)</li> <li>Database: SQL Server for relational data, Redis for caching</li> <li>Message Queue: RabbitMQ for asynchronous processing</li> <li>Blockchain: Neo N3</li> <li>TEE: AWS Nitro Enclaves</li> </ul>"},{"location":"implementation/#development-tools","title":"Development Tools","text":"<ul> <li>IDE: Visual Studio 2022</li> <li>Build System: MSBuild, GitHub Actions</li> <li>Testing: xUnit, Moq</li> <li>Documentation: Markdown, Swagger/OpenAPI</li> <li>Containerization: Docker, AWS Nitro CLI</li> </ul>"},{"location":"implementation/#project-structure","title":"Project Structure","text":"<p>The Neo Service Layer is organized as a multi-project solution with the following structure:</p> <pre><code>/\n\u251c\u2500\u2500 src/                           # Source code\n\u2502   \u251c\u2500\u2500 NeoServiceLayer.Api/       # API Gateway and controllers\n\u2502   \u251c\u2500\u2500 NeoServiceLayer.Core/      # Core domain models and interfaces\n\u2502   \u251c\u2500\u2500 NeoServiceLayer.Services/  # Service implementations\n\u2502   \u2502   \u251c\u2500\u2500 Account/               # Account management service\n\u2502   \u2502   \u251c\u2500\u2500 Wallet/                # Wallet management service\n\u2502   \u2502   \u251c\u2500\u2500 Secrets/               # Secrets management service\n\u2502   \u2502   \u251c\u2500\u2500 PriceFeed/             # Price feed service\n\u2502   \u2502   \u251c\u2500\u2500 EventMonitor/          # Event monitoring service\n\u2502   \u2502   \u251c\u2500\u2500 Functions/             # Function execution service\n\u2502   \u2502   \u251c\u2500\u2500 Storage/               # Storage service\n\u2502   \u2502   \u2514\u2500\u2500 Metrics/               # Metrics collection service\n\u2502   \u251c\u2500\u2500 NeoServiceLayer.Enclave/   # Enclave-specific code\n\u2502   \u2502   \u251c\u2500\u2500 Host/                  # Enclave host application\n\u2502   \u2502   \u2514\u2500\u2500 Enclave/               # Enclave application\n\u2502   \u251c\u2500\u2500 NeoServiceLayer.Common/    # Shared utilities and helpers\n\u2502   \u2514\u2500\u2500 NeoServiceLayer.Tests/     # Unit and integration tests\n\u251c\u2500\u2500 docs/                          # Documentation\n\u251c\u2500\u2500 scripts/                       # Build and deployment scripts\n\u2514\u2500\u2500 tools/                         # Development tools and utilities\n</code></pre>"},{"location":"implementation/#component-implementation-details","title":"Component Implementation Details","text":""},{"location":"implementation/#1-api-gateway-neoservicelayerapi","title":"1. API Gateway (NeoServiceLayer.Api)","text":"<p>The API Gateway serves as the entry point for all external requests, handling authentication, request routing, and response formatting.</p>"},{"location":"implementation/#key-files","title":"Key Files","text":"<ul> <li><code>Program.cs</code>: Application entry point and configuration</li> <li><code>Startup.cs</code>: Service configuration and middleware setup</li> <li><code>Controllers/</code>: API controllers for different services</li> <li><code>Middleware/</code>: Custom middleware components</li> <li><code>Models/</code>: Request and response models</li> </ul>"},{"location":"implementation/#implementation-guidelines","title":"Implementation Guidelines","text":"<ul> <li>Use ASP.NET Core for the API implementation</li> <li>Implement JWT-based authentication</li> <li>Use API versioning for backward compatibility</li> <li>Implement request validation and rate limiting</li> <li>Use Swagger/OpenAPI for API documentation</li> </ul>"},{"location":"implementation/#2-core-domain-neoservicelayercore","title":"2. Core Domain (NeoServiceLayer.Core)","text":"<p>The Core Domain contains the domain models, interfaces, and business logic for the Neo Service Layer.</p>"},{"location":"implementation/#key-files_1","title":"Key Files","text":"<ul> <li><code>Models/</code>: Domain models for various entities</li> <li><code>Interfaces/</code>: Service and repository interfaces</li> <li><code>Exceptions/</code>: Custom exception types</li> <li><code>Enums/</code>: Enumeration types</li> <li><code>Constants.cs</code>: System-wide constants</li> </ul>"},{"location":"implementation/#implementation-guidelines_1","title":"Implementation Guidelines","text":"<ul> <li>Follow Domain-Driven Design principles</li> <li>Keep domain models clean and focused</li> <li>Define clear interfaces for all services</li> <li>Use immutable objects where appropriate</li> <li>Implement proper validation and error handling</li> </ul>"},{"location":"implementation/#3-account-service-neoservicelayerservicesaccount","title":"3. Account Service (NeoServiceLayer.Services.Account)","text":"<p>The Account Service manages user registration, authentication, and account management.</p>"},{"location":"implementation/#key-files_2","title":"Key Files","text":"<ul> <li><code>AccountService.cs</code>: Main service implementation</li> <li><code>Models/</code>: Account-specific models</li> <li><code>Repositories/</code>: Data access components</li> <li><code>Validators/</code>: Input validation logic</li> <li><code>Handlers/</code>: Event handlers</li> </ul>"},{"location":"implementation/#implementation-guidelines_2","title":"Implementation Guidelines","text":"<ul> <li>Implement secure password hashing and storage</li> <li>Support both email/password and Auth0 authentication</li> <li>Implement Neo N3 address verification</li> <li>Store sensitive account data in the enclave</li> <li>Implement proper audit logging for all operations</li> </ul>"},{"location":"implementation/#4-wallet-service-neoservicelayerserviceswallet","title":"4. Wallet Service (NeoServiceLayer.Services.Wallet)","text":"<p>The Wallet Service manages the service layer's own accounts and wallets for blockchain interaction.</p>"},{"location":"implementation/#key-files_3","title":"Key Files","text":"<ul> <li><code>WalletService.cs</code>: Main service implementation</li> <li><code>KeyManager.cs</code>: Private key management</li> <li><code>TransactionBuilder.cs</code>: Neo N3 transaction creation</li> <li><code>TransactionSender.cs</code>: Transaction submission</li> <li><code>WalletRepository.cs</code>: Wallet data storage</li> </ul>"},{"location":"implementation/#implementation-guidelines_3","title":"Implementation Guidelines","text":"<ul> <li>Generate and store private keys in the enclave</li> <li>Implement secure key derivation and storage</li> <li>Use Neo SDK for transaction creation and signing</li> <li>Implement transaction monitoring and confirmation</li> <li>Support multiple wallet types (standard, multi-sig)</li> </ul>"},{"location":"implementation/#5-secrets-service-neoservicelayerservicessecrets","title":"5. Secrets Service (NeoServiceLayer.Services.Secrets)","text":"<p>The Secrets Service provides secure storage and management of user secrets.</p>"},{"location":"implementation/#key-files_4","title":"Key Files","text":"<ul> <li><code>SecretsService.cs</code>: Main service implementation</li> <li><code>EncryptionManager.cs</code>: Secret encryption/decryption</li> <li><code>AccessControl.cs</code>: Secret access control</li> <li><code>SecretsRepository.cs</code>: Secret storage</li> <li><code>AuditLogger.cs</code>: Access logging</li> </ul>"},{"location":"implementation/#implementation-guidelines_4","title":"Implementation Guidelines","text":"<ul> <li>Encrypt all secrets in the enclave</li> <li>Implement fine-grained access control</li> <li>Store only encrypted secrets outside the enclave</li> <li>Implement comprehensive audit logging</li> <li>Support secret versioning and rotation</li> </ul>"},{"location":"implementation/#6-pricefeed-service-neoservicelayerservicespricefeed","title":"6. PriceFeed Service (NeoServiceLayer.Services.PriceFeed)","text":"<p>The PriceFeed Service fetches price data from various sources and submits it to the Neo N3 oracle smart contract.</p>"},{"location":"implementation/#key-files_5","title":"Key Files","text":"<ul> <li><code>PriceFeedService.cs</code>: Main service implementation</li> <li><code>DataSources/</code>: Price data source implementations</li> <li><code>DataProcessors/</code>: Data processing and normalization</li> <li><code>OracleSubmitter.cs</code>: Oracle contract interaction</li> <li><code>PriceRepository.cs</code>: Price data storage</li> </ul>"},{"location":"implementation/#implementation-guidelines_5","title":"Implementation Guidelines","text":"<ul> <li>Support multiple price data sources</li> <li>Implement data validation and anomaly detection</li> <li>Use Neo SDK for oracle contract interaction</li> <li>Store historical price data for analysis</li> <li>Implement configurable update frequency</li> </ul>"},{"location":"implementation/#7-event-monitor-neoservicelayerserviceseventmonitor","title":"7. Event Monitor (NeoServiceLayer.Services.EventMonitor)","text":"<p>The Event Monitor tracks Neo N3 blockchain events and other triggers to execute functions automatically.</p>"},{"location":"implementation/#key-files_6","title":"Key Files","text":"<ul> <li><code>EventMonitorService.cs</code>: Main service implementation</li> <li><code>EventSources/</code>: Event source implementations</li> <li><code>RuleEngine.cs</code>: Event rule matching</li> <li><code>EventProcessor.cs</code>: Event processing</li> <li><code>EventRepository.cs</code>: Event storage</li> </ul>"},{"location":"implementation/#implementation-guidelines_6","title":"Implementation Guidelines","text":"<ul> <li>Use Neo SDK for blockchain event monitoring</li> <li>Implement a flexible rule engine for event matching</li> <li>Support time-based and external events</li> <li>Implement event buffering and retry logic</li> <li>Support custom event filters and transformations</li> </ul>"},{"location":"implementation/#8-function-service-neoservicelayerservicesfunctions","title":"8. Function Service (NeoServiceLayer.Services.Functions)","text":"<p>The Function Service manages the deployment, execution, and monitoring of user functions.</p>"},{"location":"implementation/#key-files_7","title":"Key Files","text":"<ul> <li><code>FunctionService.cs</code>: Main service implementation</li> <li><code>FunctionValidator.cs</code>: Function validation</li> <li><code>FunctionRepository.cs</code>: Function storage</li> <li><code>RuntimeManagers/</code>: Language-specific runtime managers</li> <li><code>ResourceMonitor.cs</code>: Resource usage monitoring</li> </ul>"},{"location":"implementation/#implementation-guidelines_7","title":"Implementation Guidelines","text":"<ul> <li>Support JavaScript, Python, and C# functions</li> <li>Implement secure function validation</li> <li>Execute functions in the enclave</li> <li>Implement resource limits and monitoring</li> <li>Support function versioning and rollback</li> </ul> <p>For detailed information on function execution implementation and testing, see Function Execution.</p>"},{"location":"implementation/#9-storage-service-neoservicelayerservicesstorage","title":"9. Storage Service (NeoServiceLayer.Services.Storage)","text":"<p>The Storage Service provides persistent storage capabilities for functions and services.</p>"},{"location":"implementation/#key-files_8","title":"Key Files","text":"<ul> <li><code>StorageService.cs</code>: Main service implementation</li> <li><code>StorageProviders/</code>: Storage backend implementations</li> <li><code>DataEncryption.cs</code>: Data encryption</li> <li><code>AccessControl.cs</code>: Storage access control</li> <li><code>QuotaManager.cs</code>: Storage quota management</li> </ul>"},{"location":"implementation/#implementation-guidelines_8","title":"Implementation Guidelines","text":"<ul> <li>Support multiple storage backends</li> <li>Implement data encryption for sensitive data</li> <li>Implement access control and quotas</li> <li>Support different storage tiers</li> <li>Implement efficient data indexing and retrieval</li> </ul>"},{"location":"implementation/#10-metrics-service-neoservicelayerservicesmetrics","title":"10. Metrics Service (NeoServiceLayer.Services.Metrics)","text":"<p>The Metrics Service collects and reports metrics on function execution, service performance, and resource usage.</p>"},{"location":"implementation/#key-files_9","title":"Key Files","text":"<ul> <li><code>MetricsService.cs</code>: Main service implementation</li> <li><code>Collectors/</code>: Metric collector implementations</li> <li><code>Processors/</code>: Metric processing</li> <li><code>Storage/</code>: Metrics storage</li> <li><code>Alerting/</code>: Alert generation</li> </ul>"},{"location":"implementation/#implementation-guidelines_9","title":"Implementation Guidelines","text":"<ul> <li>Collect system-wide and per-function metrics</li> <li>Implement efficient metric aggregation</li> <li>Support real-time and historical metrics</li> <li>Implement configurable alerting</li> <li>Provide metrics visualization</li> </ul>"},{"location":"implementation/#11-enclave-integration-neoservicelayerenclave","title":"11. Enclave Integration (NeoServiceLayer.Enclave)","text":"<p>The Enclave Integration components handle the communication between the parent instance and the Nitro Enclave.</p>"},{"location":"implementation/#key-files_10","title":"Key Files","text":"<ul> <li><code>Host/Program.cs</code>: Host application entry point</li> <li><code>Host/EnclaveManager.cs</code>: Enclave lifecycle management</li> <li><code>Host/VsockClient.cs</code>: VSOCK communication client</li> <li><code>Enclave/Program.cs</code>: Enclave application entry point</li> <li><code>Enclave/VsockServer.cs</code>: VSOCK communication server</li> <li><code>Enclave/Services/</code>: Enclave service implementations</li> </ul>"},{"location":"implementation/#implementation-guidelines_10","title":"Implementation Guidelines","text":"<ul> <li>Use AWS Nitro CLI for enclave management</li> <li>Implement secure VSOCK communication</li> <li>Use attestation for enclave verification</li> <li>Implement proper error handling and recovery</li> <li>Minimize the enclave's attack surface</li> </ul>"},{"location":"implementation/#integration-points","title":"Integration Points","text":""},{"location":"implementation/#neo-n3-blockchain-integration","title":"Neo N3 Blockchain Integration","text":"<p>The Neo Service Layer integrates with the Neo N3 blockchain for various operations:</p> <ol> <li>Transaction Submission</li> <li>Use Neo SDK to create and submit transactions</li> <li>Implement proper error handling and retry logic</li> <li> <p>Monitor transaction confirmation</p> </li> <li> <p>Event Monitoring</p> </li> <li>Subscribe to blockchain events</li> <li>Process events according to defined rules</li> <li> <p>Trigger functions based on events</p> </li> <li> <p>Oracle Interaction</p> </li> <li>Submit price data to the oracle contract</li> <li>Verify data submission</li> <li>Monitor oracle contract state</li> </ol>"},{"location":"implementation/#aws-nitro-enclave-integration","title":"AWS Nitro Enclave Integration","text":"<p>The Neo Service Layer leverages AWS Nitro Enclaves for secure operations:</p> <ol> <li>Enclave Lifecycle Management</li> <li>Create and manage enclave instances</li> <li>Monitor enclave health and performance</li> <li> <p>Implement proper shutdown and recovery</p> </li> <li> <p>Secure Communication</p> </li> <li>Use VSOCK for parent-enclave communication</li> <li>Implement secure message serialization</li> <li> <p>Handle communication errors and timeouts</p> </li> <li> <p>Attestation</p> </li> <li>Generate and verify attestation documents</li> <li>Use attestation for secure key exchange</li> <li>Implement attestation-based access control</li> </ol>"},{"location":"implementation/#security-considerations","title":"Security Considerations","text":""},{"location":"implementation/#data-protection","title":"Data Protection","text":"<ol> <li>Encryption</li> <li>Encrypt all sensitive data at rest and in transit</li> <li>Use strong encryption algorithms (AES-256, RSA-2048)</li> <li> <p>Implement proper key management</p> </li> <li> <p>Access Control</p> </li> <li>Implement fine-grained access control</li> <li>Use principle of least privilege</li> <li> <p>Implement proper authentication and authorization</p> </li> <li> <p>Audit Logging</p> </li> <li>Log all security-relevant events</li> <li>Protect log integrity</li> <li>Implement log analysis and alerting</li> </ol>"},{"location":"implementation/#enclave-security","title":"Enclave Security","text":"<ol> <li>Minimizing Attack Surface</li> <li>Include only necessary components in the enclave</li> <li>Limit communication channels</li> <li> <p>Implement proper input validation</p> </li> <li> <p>Secure Boot</p> </li> <li>Verify enclave image integrity</li> <li>Use secure boot process</li> <li> <p>Implement runtime integrity checks</p> </li> <li> <p>Memory Protection</p> </li> <li>Use memory encryption</li> <li>Implement proper memory management</li> <li>Prevent memory leaks and overflows</li> </ol>"},{"location":"implementation/#performance-considerations","title":"Performance Considerations","text":""},{"location":"implementation/#scalability","title":"Scalability","text":"<ol> <li>Horizontal Scaling</li> <li>Design services to be stateless where possible</li> <li>Use load balancing for request distribution</li> <li> <p>Implement proper caching</p> </li> <li> <p>Resource Management</p> </li> <li>Monitor and limit resource usage</li> <li>Implement auto-scaling</li> <li> <p>Optimize resource allocation</p> </li> <li> <p>Database Scaling</p> </li> <li>Use database sharding for large datasets</li> <li>Implement read replicas for high-read workloads</li> <li>Use connection pooling</li> </ol>"},{"location":"implementation/#optimization","title":"Optimization","text":"<ol> <li>Function Execution</li> <li>Optimize function startup time</li> <li>Implement function warm-up</li> <li> <p>Use efficient serialization</p> </li> <li> <p>Network Communication</p> </li> <li>Minimize network round-trips</li> <li>Use compression for large payloads</li> <li> <p>Implement connection pooling</p> </li> <li> <p>Caching</p> </li> <li>Implement multi-level caching</li> <li>Use appropriate cache invalidation strategies</li> <li>Monitor cache hit rates</li> </ol>"},{"location":"implementation/#deployment-and-operations","title":"Deployment and Operations","text":""},{"location":"implementation/#deployment-process","title":"Deployment Process","text":"<ol> <li>Build Pipeline</li> <li>Use CI/CD for automated builds</li> <li>Implement proper versioning</li> <li> <p>Run automated tests</p> </li> <li> <p>Deployment Automation</p> </li> <li>Use infrastructure as code (IaC)</li> <li>Implement blue-green deployments</li> <li> <p>Automate rollback procedures</p> </li> <li> <p>Environment Management</p> </li> <li>Maintain separate development, staging, and production environments</li> <li>Use environment-specific configurations</li> <li>Implement proper secrets management</li> </ol>"},{"location":"implementation/#monitoring-and-alerting","title":"Monitoring and Alerting","text":"<ol> <li>System Monitoring</li> <li>Monitor system health and performance</li> <li>Implement automated alerting</li> <li> <p>Use centralized logging</p> </li> <li> <p>Function Monitoring</p> </li> <li>Track function execution and performance</li> <li>Monitor resource usage</li> <li> <p>Alert on function failures</p> </li> <li> <p>Security Monitoring</p> </li> <li>Monitor for security events</li> <li>Implement intrusion detection</li> <li>Conduct regular security audits</li> </ol>"},{"location":"implementation/#backup-and-recovery","title":"Backup and Recovery","text":"<ol> <li>Data Backup</li> <li>Implement regular data backups</li> <li>Store backups securely</li> <li> <p>Test backup restoration</p> </li> <li> <p>Disaster Recovery</p> </li> <li>Develop disaster recovery plan</li> <li>Implement multi-region redundancy</li> <li> <p>Conduct regular recovery drills</p> </li> <li> <p>Business Continuity</p> </li> <li>Define recovery time objectives (RTO)</li> <li>Define recovery point objectives (RPO)</li> <li>Implement failover mechanisms</li> </ol>"},{"location":"implementation/#testing-strategy","title":"Testing Strategy","text":""},{"location":"implementation/#unit-testing","title":"Unit Testing","text":"<ol> <li>Test Coverage</li> <li>Aim for high test coverage (&gt;80%)</li> <li>Focus on critical components</li> <li> <p>Use test-driven development (TDD) where appropriate</p> </li> <li> <p>Test Types</p> </li> <li>Write unit tests for individual components</li> <li>Implement integration tests for service interactions</li> <li> <p>Develop end-to-end tests for complete workflows</p> </li> <li> <p>Test Automation</p> </li> <li>Automate test execution</li> <li>Integrate tests into CI/CD pipeline</li> <li>Implement test reporting</li> </ol>"},{"location":"implementation/#security-testing","title":"Security Testing","text":"<ol> <li>Vulnerability Scanning</li> <li>Scan code for vulnerabilities</li> <li>Conduct dependency analysis</li> <li> <p>Implement regular security testing</p> </li> <li> <p>Penetration Testing</p> </li> <li>Conduct regular penetration tests</li> <li>Test enclave security</li> <li> <p>Verify access control effectiveness</p> </li> <li> <p>Compliance Testing</p> </li> <li>Verify compliance with relevant standards</li> <li>Implement compliance monitoring</li> <li>Conduct regular compliance audits</li> </ol>"},{"location":"implementation/#documentation","title":"Documentation","text":""},{"location":"implementation/#code-documentation","title":"Code Documentation","text":"<ol> <li>Inline Documentation</li> <li>Document all public APIs</li> <li>Explain complex algorithms</li> <li> <p>Document security considerations</p> </li> <li> <p>Architecture Documentation</p> </li> <li>Document system architecture</li> <li>Explain component interactions</li> <li> <p>Document design decisions</p> </li> <li> <p>API Documentation</p> </li> <li>Use Swagger/OpenAPI for API documentation</li> <li>Document request and response formats</li> <li>Provide usage examples</li> </ol>"},{"location":"implementation/#user-documentation","title":"User Documentation","text":"<ol> <li>User Guides</li> <li>Create comprehensive user guides</li> <li>Provide getting started tutorials</li> <li> <p>Document common workflows</p> </li> <li> <p>API Reference</p> </li> <li>Document all API endpoints</li> <li>Provide request and response examples</li> <li> <p>Document error codes and handling</p> </li> <li> <p>Function Development Guide</p> </li> <li>Document function development process</li> <li>Provide language-specific examples</li> <li>Document available resources and limitations</li> </ol>"},{"location":"monitoring-guide/","title":"Neo Service Layer Monitoring Guide","text":"<p>This guide outlines the monitoring strategy for the Neo Service Layer, including metrics, logging, and alerting.</p>"},{"location":"monitoring-guide/#metrics","title":"Metrics","text":"<p>The Neo Service Layer exposes metrics via Prometheus endpoints. These metrics can be collected and visualized using tools like Prometheus and Grafana.</p>"},{"location":"monitoring-guide/#parent-application-metrics","title":"Parent Application Metrics","text":"<p>The parent application exposes metrics at the <code>/metrics</code> endpoint. These metrics include:</p> <ul> <li>HTTP request count, latency, and error rate</li> <li>VSOCK communication metrics</li> <li>System metrics (CPU, memory, disk, network)</li> <li>Application-specific metrics (account operations, wallet operations, etc.)</li> </ul>"},{"location":"monitoring-guide/#enclave-metrics","title":"Enclave Metrics","text":"<p>The enclave application does not expose metrics directly, but forwards them to the parent application. These metrics include:</p> <ul> <li>CPU usage</li> <li>Memory usage</li> <li>Request count</li> <li>Uptime</li> <li>Operation-specific metrics (secret operations, wallet operations, etc.)</li> </ul>"},{"location":"monitoring-guide/#metric-naming-convention","title":"Metric Naming Convention","text":"<p>Metrics follow the Prometheus naming convention:</p> <ul> <li><code>neo_service_layer_&lt;component&gt;_&lt;metric_name&gt;_&lt;unit&gt;</code></li> </ul> <p>Examples: - <code>neo_service_layer_http_requests_total</code> - <code>neo_service_layer_http_request_duration_seconds</code> - <code>neo_service_layer_enclave_cpu_usage_percent</code> - <code>neo_service_layer_enclave_memory_usage_bytes</code></p>"},{"location":"monitoring-guide/#recommended-metrics-to-monitor","title":"Recommended Metrics to Monitor","text":""},{"location":"monitoring-guide/#system-metrics","title":"System Metrics","text":"<ul> <li>CPU usage</li> <li>Memory usage</li> <li>Disk usage</li> <li>Network I/O</li> </ul>"},{"location":"monitoring-guide/#application-metrics","title":"Application Metrics","text":"<ul> <li>HTTP request count, latency, and error rate</li> <li>VSOCK communication metrics</li> <li>Operation-specific metrics</li> <li>Error count</li> </ul>"},{"location":"monitoring-guide/#logging","title":"Logging","text":"<p>The Neo Service Layer uses structured logging to provide detailed information about the application's behavior.</p>"},{"location":"monitoring-guide/#log-levels","title":"Log Levels","text":"<ul> <li><code>Debug</code>: Detailed information for debugging</li> <li><code>Info</code>: General information about the application's behavior</li> <li><code>Warning</code>: Potential issues that do not affect the application's functionality</li> <li><code>Error</code>: Issues that affect the application's functionality</li> <li><code>Critical</code>: Critical issues that require immediate attention</li> </ul>"},{"location":"monitoring-guide/#log-format","title":"Log Format","text":"<p>Logs are written in JSON format with the following fields:</p> <ul> <li><code>timestamp</code>: ISO 8601 timestamp</li> <li><code>level</code>: Log level</li> <li><code>message</code>: Log message</li> <li><code>exception</code>: Exception details (if applicable)</li> <li><code>context</code>: Additional context information</li> <li><code>service</code>: Service name</li> <li><code>operation</code>: Operation name</li> <li><code>requestId</code>: Request ID for correlation</li> </ul> <p>Example: <pre><code>{\n  \"timestamp\": \"2023-04-20T12:34:56.789Z\",\n  \"level\": \"Info\",\n  \"message\": \"Processing request\",\n  \"context\": {\n    \"service\": \"wallet\",\n    \"operation\": \"createWallet\",\n    \"requestId\": \"1234567890\"\n  }\n}\n</code></pre></p>"},{"location":"monitoring-guide/#log-collection","title":"Log Collection","text":"<p>Logs are written to stdout/stderr and can be collected using standard Docker/AWS logging mechanisms:</p> <ul> <li>AWS CloudWatch Logs</li> <li>ELK Stack (Elasticsearch, Logstash, Kibana)</li> <li>Fluentd/Fluent Bit</li> <li>Loki</li> </ul>"},{"location":"monitoring-guide/#recommended-logs-to-monitor","title":"Recommended Logs to Monitor","text":"<ul> <li>Error and critical logs</li> <li>Authentication and authorization logs</li> <li>Operation-specific logs</li> <li>System logs</li> </ul>"},{"location":"monitoring-guide/#alerting","title":"Alerting","text":"<p>Alerts should be configured to notify the operations team of potential issues.</p>"},{"location":"monitoring-guide/#recommended-alerts","title":"Recommended Alerts","text":""},{"location":"monitoring-guide/#system-alerts","title":"System Alerts","text":"<ul> <li>High CPU usage (&gt; 80% for 5 minutes)</li> <li>High memory usage (&gt; 80% for 5 minutes)</li> <li>Disk space running low (&lt; 20% free)</li> <li>Instance unreachable</li> </ul>"},{"location":"monitoring-guide/#application-alerts","title":"Application Alerts","text":"<ul> <li>High error rate (&gt; 1% of requests)</li> <li>High latency (&gt; 500ms for 95th percentile)</li> <li>Enclave not responding</li> <li>Critical log entries</li> </ul>"},{"location":"monitoring-guide/#alert-severity-levels","title":"Alert Severity Levels","text":"<ul> <li><code>P1</code>: Critical issue requiring immediate attention</li> <li><code>P2</code>: Major issue requiring attention within 1 hour</li> <li><code>P3</code>: Minor issue requiring attention within 24 hours</li> <li><code>P4</code>: Informational alert requiring no immediate action</li> </ul>"},{"location":"monitoring-guide/#alert-channels","title":"Alert Channels","text":"<p>Alerts can be sent to various channels:</p> <ul> <li>Email</li> <li>SMS</li> <li>Slack/Teams</li> <li>PagerDuty</li> <li>OpsGenie</li> </ul>"},{"location":"monitoring-guide/#dashboards","title":"Dashboards","text":"<p>Dashboards provide a visual representation of the application's health and performance.</p>"},{"location":"monitoring-guide/#recommended-dashboards","title":"Recommended Dashboards","text":""},{"location":"monitoring-guide/#system-dashboard","title":"System Dashboard","text":"<ul> <li>CPU usage</li> <li>Memory usage</li> <li>Disk usage</li> <li>Network I/O</li> <li>Instance health</li> </ul>"},{"location":"monitoring-guide/#application-dashboard","title":"Application Dashboard","text":"<ul> <li>Request count, latency, and error rate</li> <li>Operation-specific metrics</li> <li>Error count</li> <li>Enclave health</li> </ul>"},{"location":"monitoring-guide/#service-specific-dashboards","title":"Service-Specific Dashboards","text":"<ul> <li>Account service metrics</li> <li>Wallet service metrics</li> <li>Secrets service metrics</li> <li>Function service metrics</li> <li>Price feed service metrics</li> </ul>"},{"location":"monitoring-guide/#health-checks","title":"Health Checks","text":"<p>Health checks provide a simple way to determine if the application is functioning correctly.</p>"},{"location":"monitoring-guide/#parent-application-health-check","title":"Parent Application Health Check","text":"<p>The parent application exposes a health check endpoint at <code>/health</code>. This endpoint returns:</p> <ul> <li><code>200 OK</code>: Application is healthy</li> <li><code>503 Service Unavailable</code>: Application is unhealthy</li> </ul> <p>The health check includes:</p> <ul> <li>Database connectivity</li> <li>Enclave connectivity</li> <li>External service connectivity</li> </ul>"},{"location":"monitoring-guide/#enclave-health-check","title":"Enclave Health Check","text":"<p>The enclave application does not expose a health check endpoint directly, but its health is monitored by the parent application.</p>"},{"location":"monitoring-guide/#incident-response","title":"Incident Response","text":"<p>When an alert is triggered, the operations team should follow the incident response process:</p> <ol> <li>Acknowledge: Acknowledge the alert and take ownership of the incident</li> <li>Investigate: Investigate the root cause of the incident</li> <li>Mitigate: Take immediate action to mitigate the impact of the incident</li> <li>Resolve: Resolve the incident and restore normal operation</li> <li>Post-Mortem: Conduct a post-mortem analysis to prevent similar incidents in the future</li> </ol>"},{"location":"monitoring-guide/#conclusion","title":"Conclusion","text":"<p>This guide provides a comprehensive monitoring strategy for the Neo Service Layer. By following these recommendations, the operations team can ensure the application's health, performance, and security.</p>"},{"location":"production-readiness/","title":"Neo Service Layer Production Readiness","text":"<p>This document outlines the production readiness status of the Neo Service Layer, including implemented features, security considerations, and next steps.</p>"},{"location":"production-readiness/#implemented-features","title":"Implemented Features","text":""},{"location":"production-readiness/#enclave-services","title":"Enclave Services","text":""},{"location":"production-readiness/#enclavesecretsservice","title":"EnclaveSecretsService","text":"<ul> <li>\u2705 Secret creation with proper encryption</li> <li>\u2705 Secure secret value retrieval with access control</li> <li>\u2705 Secret value update with versioning</li> <li>\u2705 Secret rotation mechanism</li> <li>\u2705 Access control checks</li> </ul>"},{"location":"production-readiness/#enclavewalletservice","title":"EnclaveWalletService","text":"<ul> <li>\u2705 Wallet creation with secure key management</li> <li>\u2705 Wallet import from WIF</li> <li>\u2705 Data signing with proper key management</li> <li>\u2705 NEO transfer functionality</li> <li>\u2705 GAS transfer functionality</li> <li>\u2705 Token transfer functionality</li> </ul>"},{"location":"production-readiness/#enclavepricefeedservice","title":"EnclavePriceFeedService","text":"<ul> <li>\u2705 Price fetching from external sources</li> <li>\u2705 Price aggregation and confidence scoring</li> <li>\u2705 Price signing</li> <li>\u2705 Submission to Neo N3 oracle contract</li> <li>\u2705 Batch submission of prices</li> </ul>"},{"location":"production-readiness/#vsockserver-monitoring","title":"VsockServer Monitoring","text":"<ul> <li>\u2705 CPU usage monitoring</li> <li>\u2705 Memory usage monitoring</li> <li>\u2705 Uptime tracking</li> <li>\u2705 Request counting</li> </ul>"},{"location":"production-readiness/#testing","title":"Testing","text":"<ul> <li>\u2705 Unit tests for EnclaveSecretsService</li> <li>\u2705 Unit tests for EnclaveWalletService</li> <li>\u2705 Unit tests for EnclavePriceFeedService</li> <li>\u2705 Unit tests for VsockServer</li> <li>\u2705 Integration tests for enclave services</li> </ul>"},{"location":"production-readiness/#security-considerations","title":"Security Considerations","text":""},{"location":"production-readiness/#encryption","title":"Encryption","text":"<ul> <li>AES-256 encryption is used for sensitive data</li> <li>Secure key derivation using PBKDF2 with SHA-256</li> <li>Unique encryption keys for each secret</li> <li>Secure random number generation for keys and IVs</li> </ul>"},{"location":"production-readiness/#access-control","title":"Access Control","text":"<ul> <li>Account-based access control for secrets</li> <li>Function-based access control for secrets</li> <li>Wallet access requires password authentication</li> </ul>"},{"location":"production-readiness/#secure-communication","title":"Secure Communication","text":"<ul> <li>VSOCK communication between host and enclave</li> <li>Message length prefixing to prevent message boundary issues</li> <li>Error handling to prevent information leakage</li> </ul>"},{"location":"production-readiness/#performance-considerations","title":"Performance Considerations","text":""},{"location":"production-readiness/#resource-monitoring","title":"Resource Monitoring","text":"<ul> <li>CPU usage monitoring</li> <li>Memory usage monitoring</li> <li>Request counting</li> <li>Uptime tracking</li> </ul>"},{"location":"production-readiness/#optimizations","title":"Optimizations","text":"<ul> <li>Batch processing for price submissions</li> <li>Efficient error handling</li> <li>Thread-safe request counting</li> </ul>"},{"location":"production-readiness/#next-steps","title":"Next Steps","text":""},{"location":"production-readiness/#additional-testing","title":"Additional Testing","text":"<ul> <li>[ ] Load testing to ensure performance under high load</li> <li>[ ] Security testing to identify vulnerabilities</li> <li>[ ] Chaos testing to ensure resilience</li> </ul>"},{"location":"production-readiness/#documentation","title":"Documentation","text":"<ul> <li>[ ] API documentation</li> <li>[ ] Deployment guide</li> <li>[ ] Monitoring guide</li> </ul>"},{"location":"production-readiness/#deployment","title":"Deployment","text":"<ul> <li>[ ] CI/CD pipeline setup</li> <li>[ ] Deployment to staging environment</li> <li>[ ] Deployment to production environment</li> </ul>"},{"location":"production-readiness/#monitoring","title":"Monitoring","text":"<ul> <li>[ ] Set up monitoring and alerting</li> <li>[ ] Set up logging and log aggregation</li> <li>[ ] Set up metrics collection and visualization</li> </ul>"},{"location":"production-readiness/#known-issues","title":"Known Issues","text":""},{"location":"production-readiness/#enclavesecretsservice_1","title":"EnclaveSecretsService","text":"<ul> <li>Placeholder storage implementation needs to be replaced with a secure storage mechanism</li> <li>Secret rotation needs to be automated with a scheduled job</li> </ul>"},{"location":"production-readiness/#enclavewalletservice_1","title":"EnclaveWalletService","text":"<ul> <li>Placeholder wallet generation needs to be replaced with actual Neo SDK implementation</li> <li>Transaction signing needs to be implemented with actual Neo SDK</li> </ul>"},{"location":"production-readiness/#enclavepricefeedservice_1","title":"EnclavePriceFeedService","text":"<ul> <li>Placeholder price submission needs to be replaced with actual Neo N3 oracle contract interaction</li> <li>HTTP client needs to be properly configured for production use</li> </ul>"},{"location":"production-readiness/#vsockserver","title":"VsockServer","text":"<ul> <li>Error handling needs to be improved for production use</li> <li>Socket handling needs to be optimized for high throughput</li> </ul>"},{"location":"production-readiness/#conclusion","title":"Conclusion","text":"<p>The Neo Service Layer is now feature-complete and has a comprehensive test suite. The next steps involve additional testing, documentation, and deployment to ensure a smooth transition to production.</p>"},{"location":"security/","title":"Neo Service Layer Security","text":"<p>This document outlines the security considerations and implementations in the Neo Service Layer.</p>"},{"location":"security/#enclave-security","title":"Enclave Security","text":"<p>The Neo Service Layer uses AWS Nitro Enclaves to provide a secure execution environment for sensitive operations. Nitro Enclaves provide:</p> <ul> <li>Isolated execution environment</li> <li>Memory and CPU isolation</li> <li>No persistent storage</li> <li>No direct network access</li> <li>Cryptographic attestation</li> </ul>"},{"location":"security/#attestation","title":"Attestation","text":"<p>Attestation is the process of verifying the identity and integrity of an enclave. The Neo Service Layer uses the AWS Nitro Attestation Document to prove the identity and integrity of the enclave to external services.</p>"},{"location":"security/#data-security","title":"Data Security","text":""},{"location":"security/#encryption","title":"Encryption","text":"<p>The Neo Service Layer uses the following encryption mechanisms:</p>"},{"location":"security/#secret-encryption","title":"Secret Encryption","text":"<ul> <li>AES-256 in CBC mode with PKCS7 padding</li> <li>Unique encryption key for each secret</li> <li>Secure random number generation for keys and IVs</li> <li>Key derivation using PBKDF2 with SHA-256 for password-based encryption</li> </ul>"},{"location":"security/#wallet-encryption","title":"Wallet Encryption","text":"<ul> <li>Private keys are encrypted using AES-256 in CBC mode with PKCS7 padding</li> <li>Password-based encryption with PBKDF2 key derivation</li> <li>Secure random number generation for salt and IVs</li> </ul>"},{"location":"security/#key-management","title":"Key Management","text":"<ul> <li>Private keys are never stored in plaintext</li> <li>Encryption keys are derived from passwords using secure key derivation</li> <li>Unique encryption keys for each secret</li> <li>Secure random number generation for keys and IVs</li> </ul>"},{"location":"security/#access-control","title":"Access Control","text":""},{"location":"security/#account-based-access-control","title":"Account-Based Access Control","text":"<ul> <li>Each secret is associated with an account</li> <li>Only the account owner can access the secret</li> <li>Account authentication is required for all operations</li> </ul>"},{"location":"security/#function-based-access-control","title":"Function-Based Access Control","text":"<ul> <li>Secrets can be restricted to specific functions</li> <li>Functions must authenticate to access secrets</li> <li>Access control checks are performed for all secret operations</li> </ul>"},{"location":"security/#communication-security","title":"Communication Security","text":""},{"location":"security/#vsock-communication","title":"VSOCK Communication","text":"<ul> <li>VSOCK communication between host and enclave</li> <li>Message length prefixing to prevent message boundary issues</li> <li>Error handling to prevent information leakage</li> </ul>"},{"location":"security/#external-communication","title":"External Communication","text":"<ul> <li>HTTPS for all external API calls</li> <li>TLS 1.2+ for secure communication</li> <li>Certificate validation for all external connections</li> </ul>"},{"location":"security/#secure-coding-practices","title":"Secure Coding Practices","text":""},{"location":"security/#input-validation","title":"Input Validation","text":"<ul> <li>All inputs are validated before processing</li> <li>Type checking and bounds checking for all inputs</li> <li>Error handling to prevent information leakage</li> </ul>"},{"location":"security/#error-handling","title":"Error Handling","text":"<ul> <li>Exceptions are caught and logged</li> <li>Error messages do not reveal sensitive information</li> <li>Graceful degradation in case of errors</li> </ul>"},{"location":"security/#logging","title":"Logging","text":"<ul> <li>Sensitive information is not logged</li> <li>Log levels are appropriate for the environment</li> <li>Logs are structured for easy analysis</li> </ul>"},{"location":"security/#security-testing","title":"Security Testing","text":""},{"location":"security/#unit-testing","title":"Unit Testing","text":"<ul> <li>Security-focused unit tests</li> <li>Edge case testing</li> <li>Error handling testing</li> </ul>"},{"location":"security/#integration-testing","title":"Integration Testing","text":"<ul> <li>End-to-end security testing</li> <li>Authentication and authorization testing</li> <li>Error handling testing</li> </ul>"},{"location":"security/#security-recommendations","title":"Security Recommendations","text":""},{"location":"security/#deployment","title":"Deployment","text":"<ul> <li>Use secure deployment practices</li> <li>Keep the enclave image up to date</li> <li>Use secure boot and measured boot</li> </ul>"},{"location":"security/#monitoring","title":"Monitoring","text":"<ul> <li>Monitor enclave health and performance</li> <li>Set up alerts for suspicious activity</li> <li>Regularly review logs for security issues</li> </ul>"},{"location":"security/#incident-response","title":"Incident Response","text":"<ul> <li>Have an incident response plan</li> <li>Regularly test the incident response plan</li> <li>Have a process for security updates</li> </ul>"},{"location":"security/#conclusion","title":"Conclusion","text":"<p>The Neo Service Layer is designed with security in mind, using industry best practices for encryption, access control, and secure coding. The use of AWS Nitro Enclaves provides an additional layer of security for sensitive operations.</p>"},{"location":"setup_and_run/","title":"Neo Service Layer Setup and Run Guide","text":""},{"location":"setup_and_run/#overview","title":"Overview","text":"<p>This document provides step-by-step instructions for setting up and running the Neo Service Layer. It covers development environment setup, building the project, and deploying it to AWS with Nitro Enclave support.</p>"},{"location":"setup_and_run/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ol> <li>.NET 7.0 SDK or later: Required for building and running the C# projects</li> <li>Docker and Docker Compose: Required for containerization and local development</li> <li>AWS CLI: Required for AWS integration</li> <li>AWS Nitro CLI: Required for Nitro Enclave management</li> <li>SQL Server: Required for database operations</li> <li>Redis: Required for caching</li> <li>Git: Required for version control</li> </ol>"},{"location":"setup_and_run/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"setup_and_run/#1-install-net-sdk","title":"1. Install .NET SDK","text":""},{"location":"setup_and_run/#windows","title":"Windows","text":"<ol> <li>Download the .NET SDK from https://dotnet.microsoft.com/download</li> <li>Run the installer and follow the instructions</li> </ol>"},{"location":"setup_and_run/#macos","title":"macOS","text":"<pre><code>brew install --cask dotnet-sdk\n</code></pre>"},{"location":"setup_and_run/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code>wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\nsudo apt-get update\nsudo apt-get install -y apt-transport-https\nsudo apt-get install -y dotnet-sdk-7.0\n</code></pre>"},{"location":"setup_and_run/#2-install-docker-and-docker-compose","title":"2. Install Docker and Docker Compose","text":""},{"location":"setup_and_run/#windows_1","title":"Windows","text":"<ol> <li>Download Docker Desktop from https://www.docker.com/products/docker-desktop</li> <li>Run the installer and follow the instructions</li> </ol>"},{"location":"setup_and_run/#macos_1","title":"macOS","text":"<pre><code>brew install --cask docker\n</code></pre>"},{"location":"setup_and_run/#linux-ubuntudebian_1","title":"Linux (Ubuntu/Debian)","text":"<pre><code>sudo apt-get update\nsudo apt-get install -y docker.io docker-compose\nsudo systemctl enable docker\nsudo systemctl start docker\nsudo usermod -aG docker $USER\n</code></pre>"},{"location":"setup_and_run/#3-install-aws-cli","title":"3. Install AWS CLI","text":""},{"location":"setup_and_run/#windows_2","title":"Windows","text":"<ol> <li>Download the AWS CLI installer from https://aws.amazon.com/cli/</li> <li>Run the installer and follow the instructions</li> </ol>"},{"location":"setup_and_run/#macos_2","title":"macOS","text":"<pre><code>brew install awscli\n</code></pre>"},{"location":"setup_and_run/#linux-ubuntudebian_2","title":"Linux (Ubuntu/Debian)","text":"<pre><code>sudo apt-get update\nsudo apt-get install -y awscli\n</code></pre>"},{"location":"setup_and_run/#4-install-aws-nitro-cli","title":"4. Install AWS Nitro CLI","text":""},{"location":"setup_and_run/#amazon-linux-2","title":"Amazon Linux 2","text":"<pre><code>sudo amazon-linux-extras install aws-nitro-enclaves-cli\nsudo yum install aws-nitro-enclaves-cli-devel\nsudo usermod -aG ne $USER\nsudo usermod -aG docker $USER\n</code></pre>"},{"location":"setup_and_run/#5-configure-aws-credentials","title":"5. Configure AWS Credentials","text":"<pre><code>aws configure\n</code></pre> <p>Enter your AWS Access Key ID, Secret Access Key, default region, and output format when prompted.</p>"},{"location":"setup_and_run/#project-setup","title":"Project Setup","text":""},{"location":"setup_and_run/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/yourusername/neo_service_layer.git\ncd neo_service_layer\n</code></pre>"},{"location":"setup_and_run/#2-create-project-structure","title":"2. Create Project Structure","text":"<pre><code>chmod +x scripts/create_project_structure.sh\n./scripts/create_project_structure.sh\n</code></pre>"},{"location":"setup_and_run/#3-build-the-solution","title":"3. Build the Solution","text":"<pre><code>cd src\ndotnet build\n</code></pre>"},{"location":"setup_and_run/#local-development","title":"Local Development","text":""},{"location":"setup_and_run/#1-start-required-services","title":"1. Start Required Services","text":"<pre><code>docker-compose up -d\n</code></pre> <p>This will start SQL Server and Redis containers for local development.</p>"},{"location":"setup_and_run/#2-run-the-api","title":"2. Run the API","text":"<pre><code>cd src/NeoServiceLayer.Api\ndotnet run\n</code></pre> <p>The API will be available at <code>http://localhost:5000</code>.</p>"},{"location":"setup_and_run/#3-run-tests","title":"3. Run Tests","text":"<pre><code>cd src/NeoServiceLayer.Tests\ndotnet test\n</code></pre>"},{"location":"setup_and_run/#aws-deployment","title":"AWS Deployment","text":""},{"location":"setup_and_run/#1-create-ec2-instance-with-nitro-enclaves-support","title":"1. Create EC2 Instance with Nitro Enclaves Support","text":"<ol> <li>Log in to the AWS Management Console</li> <li>Navigate to EC2</li> <li>Click \"Launch Instance\"</li> <li>Select an Amazon Linux 2 AMI</li> <li>Choose an instance type that supports Nitro Enclaves (e.g., c5.xlarge)</li> <li>Configure instance details</li> <li>Enable Nitro Enclaves</li> <li>Allocate at least 2GB of memory for enclaves</li> <li>Add storage (at least 20GB)</li> <li>Configure security groups</li> <li>Allow SSH (port 22)</li> <li>Allow HTTP (port 80)</li> <li>Allow HTTPS (port 443)</li> <li>Launch the instance</li> </ol>"},{"location":"setup_and_run/#2-connect-to-the-instance","title":"2. Connect to the Instance","text":"<pre><code>ssh -i your-key.pem ec2-user@your-instance-ip\n</code></pre>"},{"location":"setup_and_run/#3-install-required-software","title":"3. Install Required Software","text":"<pre><code># Update system\nsudo yum update -y\n\n# Install .NET SDK\nsudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm\nsudo yum install -y dotnet-sdk-7.0\n\n# Install Docker\nsudo yum install -y docker\nsudo systemctl enable docker\nsudo systemctl start docker\nsudo usermod -aG docker $USER\n\n# Install AWS Nitro Enclaves CLI\nsudo amazon-linux-extras install aws-nitro-enclaves-cli\nsudo yum install -y aws-nitro-enclaves-cli-devel\nsudo usermod -aG ne $USER\nsudo usermod -aG docker $USER\n\n# Install Git\nsudo yum install -y git\n\n# Log out and log back in for group changes to take effect\nexit\n</code></pre> <p>Log back in:</p> <pre><code>ssh -i your-key.pem ec2-user@your-instance-ip\n</code></pre>"},{"location":"setup_and_run/#4-clone-and-build-the-project","title":"4. Clone and Build the Project","text":"<pre><code>git clone https://github.com/yourusername/neo_service_layer.git\ncd neo_service_layer\nchmod +x scripts/create_project_structure.sh\n./scripts/create_project_structure.sh\ncd src\ndotnet build\n</code></pre>"},{"location":"setup_and_run/#5-build-the-enclave-image","title":"5. Build the Enclave Image","text":"<pre><code>cd src/NeoServiceLayer.Enclave/Enclave\ndotnet publish -c Release -o ./bin/publish\n\n# Create Dockerfile for the enclave\ncat &gt; Dockerfile &lt;&lt; EOF\nFROM mcr.microsoft.com/dotnet/aspnet:7.0\nWORKDIR /app\nCOPY ./bin/publish .\nENTRYPOINT [\"dotnet\", \"NeoServiceLayer.Enclave.dll\"]\nEOF\n\n# Build the Docker image\ndocker build -t neo-service-layer-enclave .\n\n# Create the enclave image file (EIF)\nnitro-cli build-enclave --docker-uri neo-service-layer-enclave --output-file neo-service-layer-enclave.eif\n</code></pre>"},{"location":"setup_and_run/#6-configure-the-application","title":"6. Configure the Application","text":"<p>Create or update the configuration files:</p> <pre><code>cd ~/neo_service_layer/src/NeoServiceLayer.Api\nmkdir -p appsettings\n</code></pre> <p>Create <code>appsettings.json</code>:</p> <pre><code>cat &gt; appsettings.json &lt;&lt; EOF\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=localhost;Database=NeoServiceLayer;User Id=sa;Password=YourStrong!Passw0rd;\"\n  },\n  \"Redis\": {\n    \"ConnectionString\": \"localhost:6379\"\n  },\n  \"Enclave\": {\n    \"Path\": \"/home/ec2-user/neo_service_layer/src/NeoServiceLayer.Enclave/Enclave/neo-service-layer-enclave.eif\",\n    \"Memory\": \"2048\",\n    \"Cpus\": \"2\"\n  },\n  \"Vsock\": {\n    \"Port\": 5000\n  }\n}\nEOF\n</code></pre>"},{"location":"setup_and_run/#7-run-the-application","title":"7. Run the Application","text":"<pre><code>cd ~/neo_service_layer/src/NeoServiceLayer.Api\ndotnet run\n</code></pre>"},{"location":"setup_and_run/#8-set-up-as-a-service","title":"8. Set Up as a Service","text":"<p>Create a systemd service file:</p> <pre><code>sudo cat &gt; /etc/systemd/system/neo-service-layer.service &lt;&lt; EOF\n[Unit]\nDescription=Neo Service Layer\nAfter=network.target\n\n[Service]\nWorkingDirectory=/home/ec2-user/neo_service_layer/src/NeoServiceLayer.Api\nExecStart=/usr/bin/dotnet run\nRestart=always\nRestartSec=10\nSyslogIdentifier=neo-service-layer\nUser=ec2-user\nEnvironment=ASPNETCORE_ENVIRONMENT=Production\n\n[Install]\nWantedBy=multi-user.target\nEOF\n</code></pre> <p>Enable and start the service:</p> <pre><code>sudo systemctl enable neo-service-layer\nsudo systemctl start neo-service-layer\n</code></pre>"},{"location":"setup_and_run/#docker-deployment","title":"Docker Deployment","text":""},{"location":"setup_and_run/#1-build-docker-images","title":"1. Build Docker Images","text":"<pre><code>cd ~/neo_service_layer\ndocker-compose build\n</code></pre>"},{"location":"setup_and_run/#2-run-docker-containers","title":"2. Run Docker Containers","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"setup_and_run/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"setup_and_run/#1-view-logs","title":"1. View Logs","text":"<pre><code># View API logs\nsudo journalctl -u neo-service-layer -f\n\n# View Docker logs\ndocker-compose logs -f\n</code></pre>"},{"location":"setup_and_run/#2-check-enclave-status","title":"2. Check Enclave Status","text":"<pre><code>nitro-cli describe-enclaves\n</code></pre>"},{"location":"setup_and_run/#3-restart-services","title":"3. Restart Services","text":"<pre><code># Restart API service\nsudo systemctl restart neo-service-layer\n\n# Restart Docker containers\ndocker-compose restart\n</code></pre>"},{"location":"setup_and_run/#troubleshooting","title":"Troubleshooting","text":""},{"location":"setup_and_run/#1-enclave-fails-to-start","title":"1. Enclave Fails to Start","text":"<p>Check the enclave logs:</p> <pre><code>nitro-cli console --enclave-id $(nitro-cli describe-enclaves | jq -r '.[0].EnclaveID')\n</code></pre> <p>Ensure the enclave has enough memory and CPU resources:</p> <pre><code># Check allocated resources\nnitro-cli describe-enclaves\n\n# Terminate the enclave\nnitro-cli terminate-enclave --enclave-id $(nitro-cli describe-enclaves | jq -r '.[0].EnclaveID')\n\n# Start with more resources\nnitro-cli run-enclave --eif-path /path/to/enclave.eif --memory 4096 --cpu-count 4\n</code></pre>"},{"location":"setup_and_run/#2-api-cannot-connect-to-enclave","title":"2. API Cannot Connect to Enclave","text":"<p>Check VSOCK communication:</p> <pre><code># On the parent instance\nnc -U /tmp/vsock-test.sock\n\n# In another terminal\nnitro-cli console --enclave-id $(nitro-cli describe-enclaves | jq -r '.[0].EnclaveID')\nnc -l -U /tmp/vsock-test.sock\n</code></pre>"},{"location":"setup_and_run/#3-database-connection-issues","title":"3. Database Connection Issues","text":"<p>Check SQL Server connection:</p> <pre><code># Check if SQL Server is running\ndocker ps | grep sql\n\n# Check connection string in appsettings.json\ncat ~/neo_service_layer/src/NeoServiceLayer.Api/appsettings.json\n</code></pre>"},{"location":"setup_and_run/#security-best-practices","title":"Security Best Practices","text":""},{"location":"setup_and_run/#1-keep-software-updated","title":"1. Keep Software Updated","text":"<p>Regularly update the system and dependencies:</p> <pre><code>sudo yum update -y\ndotnet restore\n</code></pre>"},{"location":"setup_and_run/#2-secure-configuration","title":"2. Secure Configuration","text":"<ul> <li>Store sensitive configuration in AWS Secrets Manager</li> <li>Use environment variables for sensitive values</li> <li>Encrypt configuration files</li> </ul>"},{"location":"setup_and_run/#3-monitor-for-security-events","title":"3. Monitor for Security Events","text":"<ul> <li>Enable AWS CloudTrail</li> <li>Set up alerts for suspicious activities</li> <li>Regularly review logs</li> </ul>"},{"location":"setup_and_run/#4-implement-proper-access-control","title":"4. Implement Proper Access Control","text":"<ul> <li>Use IAM roles with least privilege</li> <li>Implement proper authentication and authorization</li> <li>Regularly rotate credentials</li> </ul>"},{"location":"setup_and_run/#conclusion","title":"Conclusion","text":"<p>You have successfully set up and deployed the Neo Service Layer. The system is now ready to provide serverless functions and blockchain services for Neo N3. For more information on using the system, refer to the other documentation files in the <code>docs</code> directory.</p>"},{"location":"summary/","title":"Neo Service Layer - Executive Summary","text":""},{"location":"summary/#overview","title":"Overview","text":"<p>Neo Service Layer is a comprehensive serverless platform designed for Neo N3 blockchain, providing chainlink-like services with AWS Nitro Enclave support. The system enables users to deploy and execute JavaScript, Python, and C# functions securely, with integrated blockchain interaction capabilities.</p>"},{"location":"summary/#business-value","title":"Business Value","text":"<ol> <li>Enhanced Security: Leverages AWS Nitro Enclaves to provide hardware-level isolation for sensitive operations</li> <li>Simplified Blockchain Integration: Provides ready-to-use services for interacting with Neo N3 blockchain</li> <li>Flexible Function Deployment: Supports multiple programming languages for function development</li> <li>Automated Event Handling: Monitors blockchain events and triggers functions automatically</li> <li>Reliable Price Data: Fetches and submits price data to the blockchain oracle</li> <li>Comprehensive Monitoring: Tracks system performance and resource usage</li> </ol>"},{"location":"summary/#architecture-overview","title":"Architecture Overview","text":"<p>The Neo Service Layer is built on a modular, microservices-based architecture with the following key components:</p> <pre><code>                                  +-------------------+\n                                  |                   |\n                                  |   User Interface  |\n                                  |                   |\n                                  +--------+----------+\n                                           |\n                                           v\n+------------------+            +----------+---------+            +------------------+\n|                  |            |                    |            |                  |\n|  Authentication  +&lt;----------&gt;+  API Gateway       +&lt;----------&gt;+  Function Store  |\n|                  |            |                    |            |                  |\n+------------------+            +----------+---------+            +------------------+\n                                           |\n                                           v\n                               +-----------+------------+\n                               |                        |\n                               |  Service Orchestrator  |\n                               |                        |\n                               +---+----------------+---+\n                                   |                |\n         +----------------------+  |                |  +----------------------+\n         |                      |  |                |  |                      |\n         v                      v  v                v  v                      v\n+--------+-------+    +---------+--+--+    +-------+---+---+    +------------+----+\n|                |    |              |    |               |    |                 |\n| Account Service|    | Wallet Service|    | Secrets Service|    | PriceFeed Service|\n|                |    |              |    |               |    |                 |\n+----------------+    +--------------+    +---------------+    +-----------------+\n         |                   |                   |                      |\n         |                   |                   |                      |\n         v                   v                   v                      v\n+--------+-------------------+-------------------+----------------------+-------+\n|                                                                               |\n|                             AWS Nitro Enclave                                 |\n|                                                                               |\n+-------------------------------------------------------------------------------+\n         |                   |                   |                      |\n         v                   v                   v                      v\n+--------+-------+    +------+-------+    +------+-------+    +--------+-------+\n|                |    |              |    |              |    |                |\n| Event Monitor  |    |Function Runner|    |Storage Service|    |  Metrics Service|\n|                |    |              |    |              |    |                |\n+----------------+    +--------------+    +--------------+    +----------------+\n         |                   |                   |                      |\n         v                   v                   v                      v\n+--------+-------------------+-------------------+----------------------+-------+\n|                                                                               |\n|                               Neo N3 Blockchain                               |\n|                                                                               |\n+-------------------------------------------------------------------------------+\n</code></pre>"},{"location":"summary/#security-architecture","title":"Security Architecture","text":"<p>The Neo Service Layer leverages AWS Nitro Enclaves to provide a secure, isolated execution environment for sensitive operations:</p> <pre><code>+-------------------------------------------+\n|              EC2 Instance                 |\n|                                           |\n|  +-----------------------------------+    |\n|  |         Parent Instance           |    |\n|  |                                   |    |\n|  |  +---------------------------+    |    |\n|  |  |                           |    |    |\n|  |  |    Non-sensitive          |    |    |\n|  |  |    Components             |    |    |\n|  |  |                           |    |    |\n|  |  +---------------------------+    |    |\n|  |                                   |    |\n|  +-----------------------------------+    |\n|                                           |\n|  +-----------------------------------+    |\n|  |         Nitro Enclave            |    |\n|  |                                   |    |\n|  |  +---------------------------+    |    |\n|  |  |                           |    |    |\n|  |  |    Sensitive Components   |    |    |\n|  |  |    - Account Management   |    |    |\n|  |  |    - Wallet (Private Keys)|    |    |\n|  |  |    - Secrets Management   |    |    |\n|  |  |    - Function Execution   |    |    |\n|  |  |    - PriceFeed            |    |    |\n|  |  |                           |    |    |\n|  |  +---------------------------+    |    |\n|  |                                   |    |\n|  +-----------------------------------+    |\n|                                           |\n+-------------------------------------------+\n</code></pre>"},{"location":"summary/#key-components","title":"Key Components","text":""},{"location":"summary/#1-account-service","title":"1. Account Service","text":"<ul> <li>Manages user registration and authentication</li> <li>Supports both Auth0 integration and Neo N3 account-based registration</li> <li>Stores sensitive account data in the enclave</li> </ul>"},{"location":"summary/#2-wallet-service","title":"2. Wallet Service","text":"<ul> <li>Manages service layer wallets for blockchain interaction</li> <li>Generates and stores private keys in the enclave</li> <li>Signs transactions securely within the enclave</li> </ul>"},{"location":"summary/#3-secrets-service","title":"3. Secrets Service","text":"<ul> <li>Allows users to securely store and access private data</li> <li>Implements strict access controls and permission validation</li> <li>Encrypts all secrets in the enclave</li> </ul>"},{"location":"summary/#4-pricefeed-service","title":"4. PriceFeed Service","text":"<ul> <li>Fetches price data from various sources</li> <li>Submits price data to the Neo N3 oracle smart contract</li> <li>Maintains local data copies for function access</li> </ul>"},{"location":"summary/#5-event-monitor","title":"5. Event Monitor","text":"<ul> <li>Monitors Neo N3 blockchain events and other triggers</li> <li>Executes functions automatically based on events</li> <li>Supports time-based, date-based, and custom triggers</li> </ul>"},{"location":"summary/#6-function-runner","title":"6. Function Runner","text":"<ul> <li>Executes user-deployed JavaScript, Python, and C# functions</li> <li>Provides secure access to resources and services</li> <li>Monitors function execution and resource usage</li> </ul>"},{"location":"summary/#7-storage-service","title":"7. Storage Service","text":"<ul> <li>Provides persistent storage capabilities for functions and services</li> <li>Implements data encryption for sensitive data</li> <li>Supports different storage tiers and access controls</li> </ul>"},{"location":"summary/#8-metrics-service","title":"8. Metrics Service","text":"<ul> <li>Collects and reports metrics on function execution, service performance, and resource usage</li> <li>Provides real-time monitoring and alerting</li> <li>Supports historical data analysis</li> </ul>"},{"location":"summary/#implementation-approach","title":"Implementation Approach","text":"<p>The Neo Service Layer is implemented as a multi-project C# solution using .NET 7.0+. The system is designed to be deployed on AWS EC2 instances with Nitro Enclave support.</p>"},{"location":"summary/#technology-stack","title":"Technology Stack","text":"<ul> <li>Programming Language: C# (.NET 7.0+)</li> <li>Cloud Platform: AWS (EC2 with Nitro Enclaves)</li> <li>Database: SQL Server for relational data, Redis for caching</li> <li>Message Queue: RabbitMQ for asynchronous processing</li> <li>Blockchain: Neo N3</li> <li>TEE: AWS Nitro Enclaves</li> </ul>"},{"location":"summary/#development-process","title":"Development Process","text":"<ol> <li>Setup Development Environment: Install required tools and dependencies</li> <li>Create Project Structure: Set up the solution and project structure</li> <li>Implement Core Components: Develop the core domain models and interfaces</li> <li>Implement Services: Develop the service implementations</li> <li>Implement Enclave Integration: Develop the enclave host and application</li> <li>Implement API Gateway: Develop the API controllers and middleware</li> <li>Testing: Conduct unit, integration, and end-to-end testing</li> <li>Deployment: Deploy the system to AWS with Nitro Enclave support</li> </ol>"},{"location":"summary/#conclusion","title":"Conclusion","text":"<p>The Neo Service Layer provides a comprehensive serverless platform for Neo N3 blockchain, enabling secure function execution and blockchain interaction. By leveraging AWS Nitro Enclaves, the system ensures the highest level of security for sensitive operations, making it ideal for financial applications and other security-critical use cases.</p> <p>The modular architecture allows for easy extension and customization, while the comprehensive documentation provides clear guidelines for implementation and deployment. The system is designed to be scalable, secure, and reliable, making it a solid foundation for building blockchain-based applications on Neo N3.</p>"},{"location":"system_architecture/","title":"Neo Service Layer System Architecture","text":""},{"location":"system_architecture/#overview","title":"Overview","text":"<p>Neo Service Layer is a serverless platform designed for Neo N3 blockchain, providing chainlink-like services with AWS Nitro Enclave support. The system enables users to deploy and execute JavaScript, Python, and C# functions securely, with integrated blockchain interaction capabilities.</p>"},{"location":"system_architecture/#system-goals","title":"System Goals","text":"<ol> <li>Provide a secure, scalable serverless platform for Neo N3 blockchain</li> <li>Enable function execution in a secure enclave environment</li> <li>Support blockchain interaction through various services</li> <li>Ensure data privacy and security through TEE (Trusted Execution Environment)</li> <li>Offer comprehensive account and wallet management</li> <li>Provide price feed and event monitoring capabilities</li> </ol>"},{"location":"system_architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>                                  +-------------------+\n                                  |                   |\n                                  |   User Interface  |\n                                  |                   |\n                                  +--------+----------+\n                                           |\n                                           v\n+------------------+            +----------+---------+            +------------------+\n|                  |            |                    |            |                  |\n|  Authentication  +&lt;----------&gt;+  API Gateway       +&lt;----------&gt;+  Function Store  |\n|                  |            |                    |            |                  |\n+------------------+            +----------+---------+            +------------------+\n                                           |\n                                           v\n                               +-----------+------------+\n                               |                        |\n                               |  Service Orchestrator  |\n                               |                        |\n                               +---+----------------+---+\n                                   |                |\n         +----------------------+  |                |  +----------------------+\n         |                      |  |                |  |                      |\n         v                      v  v                v  v                      v\n+--------+-------+    +---------+--+--+    +-------+---+---+    +------------+----+\n|                |    |              |    |               |    |                 |\n| Account Service|    | Wallet Service|    | Secrets Service|    | PriceFeed Service|\n|                |    |              |    |               |    |                 |\n+----------------+    +--------------+    +---------------+    +-----------------+\n         |                   |                   |                      |\n         |                   |                   |                      |\n         v                   v                   v                      v\n+--------+-------------------+-------------------+----------------------+-------+\n|                                                                               |\n|                             AWS Nitro Enclave                                 |\n|                                                                               |\n+-------------------------------------------------------------------------------+\n         |                   |                   |                      |\n         v                   v                   v                      v\n+--------+-------+    +------+-------+    +------+-------+    +--------+-------+\n|                |    |              |    |              |    |                |\n| Event Monitor  |    |Function Runner|    |Storage Service|    |  Metrics Service|\n|                |    |              |    |              |    |                |\n+----------------+    +--------------+    +--------------+    +----------------+\n         |                   |                   |                      |\n         v                   v                   v                      v\n+--------+-------------------+-------------------+----------------------+-------+\n|                                                                               |\n|                               Neo N3 Blockchain                               |\n|                                                                               |\n+-------------------------------------------------------------------------------+\n</code></pre>"},{"location":"system_architecture/#core-components","title":"Core Components","text":""},{"location":"system_architecture/#1-api-gateway","title":"1. API Gateway","text":"<p>Serves as the entry point for all external requests, handling authentication, request routing, and response formatting.</p>"},{"location":"system_architecture/#2-service-orchestrator","title":"2. Service Orchestrator","text":"<p>Coordinates the interaction between various services, manages service discovery, and handles inter-service communication.</p>"},{"location":"system_architecture/#3-account-service","title":"3. Account Service","text":"<p>Manages user registration, authentication, and account management. Integrates with Auth0 and supports Neo N3 accounts for registration.</p>"},{"location":"system_architecture/#4-wallet-service","title":"4. Wallet Service","text":"<p>Manages the service layer's own accounts and wallets for blockchain interaction. Handles transaction signing and submission.</p>"},{"location":"system_architecture/#5-secrets-service","title":"5. Secrets Service","text":"<p>Provides secure storage and management of user secrets, with strict access control and permission validation.</p>"},{"location":"system_architecture/#6-pricefeed-service","title":"6. PriceFeed Service","text":"<p>Fetches price data from various sources and submits it to the Neo N3 oracle smart contract. Maintains local data copies for function access.</p>"},{"location":"system_architecture/#7-event-monitor","title":"7. Event Monitor","text":"<p>Monitors Neo N3 blockchain events and other triggers (time-based, date-based, etc.) to execute functions automatically.</p>"},{"location":"system_architecture/#8-function-runner","title":"8. Function Runner","text":"<p>Executes user-deployed JavaScript, Python, and C# functions in a secure environment.</p>"},{"location":"system_architecture/#9-storage-service","title":"9. Storage Service","text":"<p>Provides persistent storage capabilities for functions and services.</p>"},{"location":"system_architecture/#10-metrics-service","title":"10. Metrics Service","text":"<p>Collects and reports metrics on function execution, service performance, and resource usage.</p>"},{"location":"system_architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"system_architecture/#aws-nitro-enclave-integration","title":"AWS Nitro Enclave Integration","text":"<p>The Neo Service Layer leverages AWS Nitro Enclaves to provide a secure, isolated execution environment for sensitive operations:</p> <pre><code>+-------------------------------------------+\n|              EC2 Instance                 |\n|                                           |\n|  +-----------------------------------+    |\n|  |         Parent Instance           |    |\n|  |                                   |    |\n|  |  +---------------------------+    |    |\n|  |  |                           |    |    |\n|  |  |    Non-sensitive          |    |    |\n|  |  |    Components             |    |    |\n|  |  |                           |    |    |\n|  |  +---------------------------+    |    |\n|  |                                   |    |\n|  +-----------------------------------+    |\n|                                           |\n|  +-----------------------------------+    |\n|  |         Nitro Enclave            |    |\n|  |                                   |    |\n|  |  +---------------------------+    |    |\n|  |  |                           |    |    |\n|  |  |    Sensitive Components   |    |    |\n|  |  |    - Account Management   |    |    |\n|  |  |    - Wallet (Private Keys)|    |    |\n|  |  |    - Secrets Management   |    |    |\n|  |  |    - Function Execution   |    |    |\n|  |  |    - PriceFeed            |    |    |\n|  |  |                           |    |    |\n|  |  +---------------------------+    |    |\n|  |                                   |    |\n|  +-----------------------------------+    |\n|                                           |\n+-------------------------------------------+\n</code></pre> <p>Key security features: 1. Isolated Memory: Enclave memory is encrypted and isolated from the parent instance 2. No Persistent Storage: Enclaves have no persistent storage, enhancing security 3. No Interactive Access: No SSH or other interactive access to the enclave 4. Cryptographic Attestation: Provides proof of the enclave's identity and integrity 5. Secure Communication: VSOCK-based communication between parent instance and enclave</p>"},{"location":"system_architecture/#data-flow-security","title":"Data Flow Security","text":"<pre><code>+----------------+     +----------------+     +----------------+\n|                |     |                |     |                |\n|  Client        +----&gt;+  API Gateway   +----&gt;+  Service       |\n|                |     |                |     |  Orchestrator  |\n+----------------+     +----------------+     +-------+--------+\n                                                      |\n                                                      v\n+----------------+     +----------------+     +-------+--------+\n|                |     |                |     |                |\n|  Neo N3        |&lt;----+  Enclave       |&lt;----+  Service       |\n|  Blockchain    |     |  Services      |     |  Request       |\n|                |     |                |     |                |\n+----------------+     +----------------+     +----------------+\n</code></pre> <p>All sensitive operations, including account management, wallet operations, secrets management, and function execution, are performed within the secure enclave environment.</p>"},{"location":"system_architecture/#communication-architecture","title":"Communication Architecture","text":""},{"location":"system_architecture/#inter-service-communication","title":"Inter-Service Communication","text":"<p>Services communicate using a combination of: 1. Direct API Calls: For synchronous operations 2. Message Queue: For asynchronous operations 3. Event Bus: For event-driven communication</p>"},{"location":"system_architecture/#enclave-communication","title":"Enclave Communication","text":"<p>Communication with the enclave is handled through: 1. VSOCK: For direct communication between parent instance and enclave 2. Attestation: For verifying enclave identity and integrity</p>"},{"location":"system_architecture/#deployment-architecture","title":"Deployment Architecture","text":"<p>The Neo Service Layer is deployed as a set of containerized services on AWS, with sensitive components running in Nitro Enclaves:</p> <pre><code>+-------------------------------------------+\n|              AWS Environment              |\n|                                           |\n|  +----------------+  +----------------+   |\n|  |                |  |                |   |\n|  |  EC2 Instance  |  |  EC2 Instance  |   |\n|  |  with Enclave  |  |  with Enclave  |   |\n|  |                |  |                |   |\n|  +----------------+  +----------------+   |\n|                                           |\n|  +----------------+  +----------------+   |\n|  |                |  |                |   |\n|  |  Load Balancer |  |  API Gateway   |   |\n|  |                |  |                |   |\n|  +----------------+  +----------------+   |\n|                                           |\n|  +----------------+  +----------------+   |\n|  |                |  |                |   |\n|  |  Database      |  |  Storage       |   |\n|  |                |  |                |   |\n|  +----------------+  +----------------+   |\n|                                           |\n+-------------------------------------------+\n</code></pre>"},{"location":"system_architecture/#scalability-architecture","title":"Scalability Architecture","text":"<p>The system is designed to scale horizontally by adding more instances as needed:</p> <pre><code>+-------------------+\n|                   |\n| Load Balancer     |\n|                   |\n+--------+----------+\n         |\n         v\n+--------+----------+\n|                   |\n| Auto Scaling Group|\n|                   |\n+---+----------+----+\n    |          |\n    v          v\n+---+---+  +---+---+\n|       |  |       |\n| EC2   |  | EC2   |\n|       |  |       |\n+-------+  +-------+\n</code></pre> <p>Each component is designed to be stateless where possible, enabling easy scaling and high availability.</p>"},{"location":"tee_integration/","title":"TEE Integration with VSOCK","text":""},{"location":"tee_integration/#overview","title":"Overview","text":"<p>This document describes how the Neo Service Layer integrates with AWS Nitro Enclaves using VSOCK for secure communication. It provides technical details on the implementation, configuration, and usage of the Trusted Execution Environment (TEE) within the system.</p>"},{"location":"tee_integration/#aws-nitro-enclaves","title":"AWS Nitro Enclaves","text":"<p>AWS Nitro Enclaves is a feature of Amazon EC2 that enables the creation of isolated compute environments to protect and securely process highly sensitive data. Key features include:</p> <ol> <li>Isolated Memory: Enclave memory is encrypted and isolated from the parent instance</li> <li>No Persistent Storage: Enclaves have no persistent storage, enhancing security</li> <li>No Interactive Access: No SSH or other interactive access to the enclave</li> <li>Cryptographic Attestation: Provides proof of the enclave's identity and integrity</li> </ol>"},{"location":"tee_integration/#vsock-communication","title":"VSOCK Communication","text":"<p>VSOCK (Virtual Socket) is a communication protocol used for communication between the parent EC2 instance and the Nitro Enclave. It provides a secure channel for data exchange without exposing the enclave to the network.</p>"},{"location":"tee_integration/#vsock-architecture","title":"VSOCK Architecture","text":"<pre><code>+-------------------------------------------+\n|              EC2 Instance                 |\n|                                           |\n|  +-----------------------------------+    |\n|  |         Parent Instance           |    |\n|  |                                   |    |\n|  |  +---------------------------+    |    |\n|  |  |                           |    |    |\n|  |  |    VSOCK Client           |    |    |\n|  |  |    (CID: 3)               |    |    |\n|  |  |                           |    |    |\n|  |  +------------+--------------+    |    |\n|  |               |                   |    |\n|  +---------------+-------------------+    |\n|                  |                        |\n|                  | VSOCK                  |\n|                  | Communication          |\n|                  |                        |\n|  +---------------+-------------------+    |\n|  |               |                   |    |\n|  |  +------------+--------------+    |    |\n|  |  |                           |    |    |\n|  |  |    VSOCK Server           |    |    |\n|  |  |    (CID: 16)              |    |    |\n|  |  |                           |    |    |\n|  |  +---------------------------+    |    |\n|  |                                   |    |\n|  |         Nitro Enclave            |    |\n|  +-----------------------------------+    |\n|                                           |\n+-------------------------------------------+\n</code></pre>"},{"location":"tee_integration/#vsock-addressing","title":"VSOCK Addressing","text":"<p>VSOCK uses Context Identifiers (CIDs) to identify endpoints: - CID 3: The parent instance - CID 16: The enclave instance</p> <p>Ports are used to identify specific services within each endpoint.</p>"},{"location":"tee_integration/#implementation-in-neo-service-layer","title":"Implementation in Neo Service Layer","text":""},{"location":"tee_integration/#1-vsock-client-parent-instance","title":"1. VSOCK Client (Parent Instance)","text":"<p>The VSOCK client runs on the parent instance and communicates with the enclave. It is implemented in the <code>NeoServiceLayer.Enclave.Host.VsockClient</code> class.</p> <pre><code>public class VsockClient\n{\n    private const int EnclavePort = 5000;\n    private const int EnclaveCid = 16;\n\n    public async Task&lt;byte[]&gt; SendMessageAsync(byte[] message)\n    {\n        using var socket = new Socket(AddressFamily.Unix, SocketType.Stream, ProtocolType.Unspecified);\n        var endpoint = new VsockEndPoint(EnclaveCid, EnclavePort);\n\n        await socket.ConnectAsync(endpoint);\n\n        // Send message length\n        var lengthBytes = BitConverter.GetBytes(message.Length);\n        await socket.SendAsync(lengthBytes, SocketFlags.None);\n\n        // Send message\n        await socket.SendAsync(message, SocketFlags.None);\n\n        // Receive response length\n        var responseLengthBytes = new byte[4];\n        await socket.ReceiveAsync(responseLengthBytes, SocketFlags.None);\n        var responseLength = BitConverter.ToInt32(responseLengthBytes);\n\n        // Receive response\n        var response = new byte[responseLength];\n        var totalBytesReceived = 0;\n\n        while (totalBytesReceived &lt; responseLength)\n        {\n            var bytesReceived = await socket.ReceiveAsync(\n                response.AsMemory(totalBytesReceived, responseLength - totalBytesReceived),\n                SocketFlags.None);\n\n            totalBytesReceived += bytesReceived;\n        }\n\n        return response;\n    }\n}\n</code></pre>"},{"location":"tee_integration/#2-vsock-server-enclave","title":"2. VSOCK Server (Enclave)","text":"<p>The VSOCK server runs in the enclave and handles requests from the parent instance. It is implemented in the <code>NeoServiceLayer.Enclave.Enclave.VsockServer</code> class.</p> <pre><code>public class VsockServer\n{\n    private const int EnclavePort = 5000;\n    private readonly IServiceProvider _serviceProvider;\n    private readonly CancellationTokenSource _cancellationTokenSource;\n    private readonly Socket _socket;\n\n    public VsockServer(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n        _cancellationTokenSource = new CancellationTokenSource();\n        _socket = new Socket(AddressFamily.Unix, SocketType.Stream, ProtocolType.Unspecified);\n    }\n\n    public void Start()\n    {\n        var endpoint = new VsockEndPoint(VsockEndPoint.LocalCid, EnclavePort);\n        _socket.Bind(endpoint);\n        _socket.Listen(10);\n\n        Task.Run(AcceptConnectionsAsync);\n    }\n\n    private async Task AcceptConnectionsAsync()\n    {\n        while (!_cancellationTokenSource.Token.IsCancellationRequested)\n        {\n            var clientSocket = await _socket.AcceptAsync();\n            _ = HandleClientAsync(clientSocket);\n        }\n    }\n\n    private async Task HandleClientAsync(Socket clientSocket)\n    {\n        using (clientSocket)\n        {\n            try\n            {\n                // Receive message length\n                var lengthBytes = new byte[4];\n                await clientSocket.ReceiveAsync(lengthBytes, SocketFlags.None);\n                var messageLength = BitConverter.ToInt32(lengthBytes);\n\n                // Receive message\n                var message = new byte[messageLength];\n                var totalBytesReceived = 0;\n\n                while (totalBytesReceived &lt; messageLength)\n                {\n                    var bytesReceived = await clientSocket.ReceiveAsync(\n                        message.AsMemory(totalBytesReceived, messageLength - totalBytesReceived),\n                        SocketFlags.None);\n\n                    totalBytesReceived += bytesReceived;\n                }\n\n                // Process message\n                var response = await ProcessMessageAsync(message);\n\n                // Send response length\n                var responseLengthBytes = BitConverter.GetBytes(response.Length);\n                await clientSocket.SendAsync(responseLengthBytes, SocketFlags.None);\n\n                // Send response\n                await clientSocket.SendAsync(response, SocketFlags.None);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error handling client: {ex.Message}\");\n            }\n        }\n    }\n\n    private async Task&lt;byte[]&gt; ProcessMessageAsync(byte[] message)\n    {\n        // Deserialize message\n        var request = JsonSerializer.Deserialize&lt;EnclaveRequest&gt;(message);\n\n        // Route to appropriate service\n        var response = request.ServiceType switch\n        {\n            \"account\" =&gt; await ProcessAccountRequestAsync(request),\n            \"wallet\" =&gt; await ProcessWalletRequestAsync(request),\n            \"secrets\" =&gt; await ProcessSecretsRequestAsync(request),\n            \"function\" =&gt; await ProcessFunctionRequestAsync(request),\n            _ =&gt; CreateErrorResponse(\"Unknown service type\")\n        };\n\n        // Serialize response\n        return JsonSerializer.SerializeToUtf8Bytes(response);\n    }\n\n    private async Task&lt;EnclaveResponse&gt; ProcessAccountRequestAsync(EnclaveRequest request)\n    {\n        var accountService = _serviceProvider.GetRequiredService&lt;IAccountService&gt;();\n        // Process account request\n        // ...\n        return new EnclaveResponse { /* ... */ };\n    }\n\n    // Similar methods for other service types\n\n    private EnclaveResponse CreateErrorResponse(string errorMessage)\n    {\n        return new EnclaveResponse\n        {\n            Success = false,\n            ErrorMessage = errorMessage\n        };\n    }\n\n    public void Stop()\n    {\n        _cancellationTokenSource.Cancel();\n        _socket.Close();\n    }\n}\n</code></pre>"},{"location":"tee_integration/#3-message-format","title":"3. Message Format","text":"<p>Messages exchanged between the parent instance and the enclave are serialized using JSON. The basic message format is:</p> <pre><code>public class EnclaveRequest\n{\n    public string RequestId { get; set; }\n    public string ServiceType { get; set; }\n    public string Operation { get; set; }\n    public byte[] Payload { get; set; }\n}\n\npublic class EnclaveResponse\n{\n    public string RequestId { get; set; }\n    public bool Success { get; set; }\n    public string ErrorMessage { get; set; }\n    public byte[] Payload { get; set; }\n}\n</code></pre>"},{"location":"tee_integration/#4-enclave-manager","title":"4. Enclave Manager","text":"<p>The Enclave Manager is responsible for creating and managing the enclave. It is implemented in the <code>NeoServiceLayer.Enclave.Host.EnclaveManager</code> class.</p> <pre><code>public class EnclaveManager\n{\n    private readonly ILogger&lt;EnclaveManager&gt; _logger;\n    private readonly IConfiguration _configuration;\n    private Process _enclaveProcess;\n    private VsockClient _vsockClient;\n\n    public EnclaveManager(ILogger&lt;EnclaveManager&gt; logger, IConfiguration configuration)\n    {\n        _logger = logger;\n        _configuration = configuration;\n        _vsockClient = new VsockClient();\n    }\n\n    public async Task&lt;bool&gt; StartEnclaveAsync()\n    {\n        try\n        {\n            var enclavePath = _configuration[\"Enclave:Path\"];\n            var enclaveMemory = _configuration[\"Enclave:Memory\"];\n            var enclaveCpus = _configuration[\"Enclave:Cpus\"];\n\n            var startInfo = new ProcessStartInfo\n            {\n                FileName = \"nitro-cli\",\n                Arguments = $\"run-enclave --eif-path {enclavePath} --memory {enclaveMemory} --cpu-count {enclaveCpus}\",\n                RedirectStandardOutput = true,\n                RedirectStandardError = true,\n                UseShellExecute = false,\n                CreateNoWindow = true\n            };\n\n            _enclaveProcess = new Process { StartInfo = startInfo };\n            _enclaveProcess.Start();\n\n            var output = await _enclaveProcess.StandardOutput.ReadToEndAsync();\n            var error = await _enclaveProcess.StandardError.ReadToEndAsync();\n\n            if (!string.IsNullOrEmpty(error))\n            {\n                _logger.LogError(\"Error starting enclave: {Error}\", error);\n                return false;\n            }\n\n            _logger.LogInformation(\"Enclave started: {Output}\", output);\n\n            // Wait for enclave to initialize\n            await Task.Delay(5000);\n\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error starting enclave\");\n            return false;\n        }\n    }\n\n    public async Task&lt;EnclaveResponse&gt; SendRequestAsync(EnclaveRequest request)\n    {\n        try\n        {\n            var requestBytes = JsonSerializer.SerializeToUtf8Bytes(request);\n            var responseBytes = await _vsockClient.SendMessageAsync(requestBytes);\n            return JsonSerializer.Deserialize&lt;EnclaveResponse&gt;(responseBytes);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error sending request to enclave\");\n            return new EnclaveResponse\n            {\n                RequestId = request.RequestId,\n                Success = false,\n                ErrorMessage = $\"Error communicating with enclave: {ex.Message}\"\n            };\n        }\n    }\n\n    public async Task StopEnclaveAsync()\n    {\n        try\n        {\n            var startInfo = new ProcessStartInfo\n            {\n                FileName = \"nitro-cli\",\n                Arguments = \"terminate-enclave --enclave-id $(nitro-cli describe-enclaves | jq -r '.[0].EnclaveID')\",\n                RedirectStandardOutput = true,\n                RedirectStandardError = true,\n                UseShellExecute = false,\n                CreateNoWindow = true\n            };\n\n            var process = new Process { StartInfo = startInfo };\n            process.Start();\n\n            var output = await process.StandardOutput.ReadToEndAsync();\n            var error = await process.StandardError.ReadToEndAsync();\n\n            if (!string.IsNullOrEmpty(error))\n            {\n                _logger.LogError(\"Error stopping enclave: {Error}\", error);\n            }\n\n            _logger.LogInformation(\"Enclave stopped: {Output}\", output);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error stopping enclave\");\n        }\n    }\n}\n</code></pre>"},{"location":"tee_integration/#enclave-services","title":"Enclave Services","text":"<p>The following services run within the enclave to provide secure processing of sensitive operations:</p>"},{"location":"tee_integration/#1-account-service","title":"1. Account Service","text":"<p>The Account Service in the enclave handles sensitive account operations such as: - Password hashing and verification - Account data encryption and decryption - Authentication token generation</p>"},{"location":"tee_integration/#2-wallet-service","title":"2. Wallet Service","text":"<p>The Wallet Service in the enclave handles sensitive wallet operations such as: - Private key generation and storage - Transaction signing - Key derivation</p>"},{"location":"tee_integration/#3-secrets-service","title":"3. Secrets Service","text":"<p>The Secrets Service in the enclave handles sensitive secrets operations such as: - Secret encryption and decryption - Access control validation - Secret versioning</p>"},{"location":"tee_integration/#4-function-execution","title":"4. Function Execution","text":"<p>The Function Execution service in the enclave provides a secure environment for executing user functions with access to sensitive data.</p>"},{"location":"tee_integration/#attestation","title":"Attestation","text":"<p>Attestation is a process that proves the identity and integrity of the enclave to remote parties. It is used to establish trust between the enclave and external systems.</p>"},{"location":"tee_integration/#attestation-process","title":"Attestation Process","text":"<pre><code>+----------------+     +----------------+     +----------------+\n|                |     |                |     |                |\n|  Client        |     |  Enclave       |     |  AWS Nitro     |\n|                |     |                |     |  Attestation   |\n+-------+--------+     +-------+--------+     +-------+--------+\n        |                      |                      |\n        | 1. Request           |                      |\n        | Attestation          |                      |\n        +---------------------&gt;|                      |\n        |                      |                      |\n        |                      | 2. Generate          |\n        |                      | Attestation Document |\n        |                      +---------------------&gt;|\n        |                      |                      |\n        |                      | 3. Signed            |\n        |                      | Attestation Document |\n        |                      |&lt;---------------------+\n        |                      |                      |\n        | 4. Attestation       |                      |\n        | Document             |                      |\n        |&lt;---------------------+                      |\n        |                      |                      |\n        | 5. Verify            |                      |\n        | Attestation          |                      |\n        +---------------------&gt;|                      |\n        |                      |                      |\n        | 6. Establish         |                      |\n        | Secure Channel       |                      |\n        |&lt;---------------------&gt;                      |\n        |                      |                      |\n</code></pre>"},{"location":"tee_integration/#attestation-implementation","title":"Attestation Implementation","text":"<pre><code>public class AttestationService\n{\n    private readonly ILogger&lt;AttestationService&gt; _logger;\n\n    public AttestationService(ILogger&lt;AttestationService&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task&lt;byte[]&gt; GenerateAttestationDocumentAsync()\n    {\n        try\n        {\n            var startInfo = new ProcessStartInfo\n            {\n                FileName = \"nitro-cli\",\n                Arguments = \"describe-enclaves\",\n                RedirectStandardOutput = true,\n                UseShellExecute = false,\n                CreateNoWindow = true\n            };\n\n            var process = new Process { StartInfo = startInfo };\n            process.Start();\n\n            var output = await process.StandardOutput.ReadToEndAsync();\n            var enclaveInfo = JsonSerializer.Deserialize&lt;JsonElement[]&gt;(output);\n            var enclaveId = enclaveInfo[0].GetProperty(\"EnclaveID\").GetString();\n\n            startInfo = new ProcessStartInfo\n            {\n                FileName = \"nitro-cli\",\n                Arguments = $\"get-attestation-document --enclave-id {enclaveId}\",\n                RedirectStandardOutput = true,\n                UseShellExecute = false,\n                CreateNoWindow = true\n            };\n\n            process = new Process { StartInfo = startInfo };\n            process.Start();\n\n            output = await process.StandardOutput.ReadToEndAsync();\n            var attestationDoc = JsonSerializer.Deserialize&lt;JsonElement&gt;(output);\n            var document = attestationDoc.GetProperty(\"Document\").GetString();\n\n            return Convert.FromBase64String(document);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error generating attestation document\");\n            throw;\n        }\n    }\n\n    public bool VerifyAttestationDocument(byte[] attestationDocument)\n    {\n        try\n        {\n            // Verify the attestation document\n            // This would typically involve checking the signature, PCR values, etc.\n            // For simplicity, we're just returning true here\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error verifying attestation document\");\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"tee_integration/#configuration","title":"Configuration","text":""},{"location":"tee_integration/#parent-instance-configuration","title":"Parent Instance Configuration","text":"<pre><code>{\n  \"Enclave\": {\n    \"Path\": \"/path/to/enclave.eif\",\n    \"Memory\": \"2048\",\n    \"Cpus\": \"2\"\n  },\n  \"Vsock\": {\n    \"Port\": 5000\n  }\n}\n</code></pre>"},{"location":"tee_integration/#enclave-configuration","title":"Enclave Configuration","text":"<pre><code>{\n  \"Vsock\": {\n    \"Port\": 5000\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  }\n}\n</code></pre>"},{"location":"tee_integration/#security-considerations","title":"Security Considerations","text":""},{"location":"tee_integration/#1-minimizing-attack-surface","title":"1. Minimizing Attack Surface","text":"<ul> <li>Include only necessary components in the enclave</li> <li>Limit communication channels to VSOCK only</li> <li>Implement proper input validation for all messages</li> </ul>"},{"location":"tee_integration/#2-secure-boot","title":"2. Secure Boot","text":"<ul> <li>Verify enclave image integrity before launching</li> <li>Use secure boot process to ensure the enclave is not tampered with</li> <li>Implement runtime integrity checks</li> </ul>"},{"location":"tee_integration/#3-memory-protection","title":"3. Memory Protection","text":"<ul> <li>Use memory encryption to protect sensitive data</li> <li>Implement proper memory management to prevent leaks</li> <li>Clear sensitive data from memory when no longer needed</li> </ul>"},{"location":"tee_integration/#4-communication-security","title":"4. Communication Security","text":"<ul> <li>Validate all messages received from the parent instance</li> <li>Encrypt sensitive data before sending it over VSOCK</li> <li>Implement proper error handling to prevent information leakage</li> </ul>"},{"location":"tee_integration/#conclusion","title":"Conclusion","text":"<p>The Neo Service Layer leverages AWS Nitro Enclaves and VSOCK communication to provide a secure environment for processing sensitive operations. By isolating critical components in the enclave and using secure communication channels, the system ensures the highest level of security for user data and blockchain operations.</p>"},{"location":"workflow/","title":"Neo Service Layer Workflows","text":""},{"location":"workflow/#overview","title":"Overview","text":"<p>This document describes the key workflows within the Neo Service Layer, detailing the step-by-step processes for various operations and interactions.</p>"},{"location":"workflow/#user-registration-and-account-management","title":"User Registration and Account Management","text":""},{"location":"workflow/#user-registration-workflow","title":"User Registration Workflow","text":"<ol> <li>User Submits Registration</li> <li>User provides email, password, and optional Neo N3 address</li> <li> <p>System validates input data</p> </li> <li> <p>Account Creation</p> </li> <li>System creates user account in the database</li> <li> <p>If Neo N3 address is provided, system verifies ownership</p> </li> <li> <p>Wallet Association</p> </li> <li>If Neo N3 address is provided, system associates it with the user account</li> <li> <p>If not, system can optionally create a new wallet for the user</p> </li> <li> <p>Confirmation</p> </li> <li>System sends confirmation email</li> <li> <p>User confirms email to activate account</p> </li> <li> <p>Initial Setup</p> </li> <li>User completes profile information</li> <li>User sets up security preferences</li> </ol>"},{"location":"workflow/#account-management-workflow","title":"Account Management Workflow","text":"<ol> <li>User Authentication</li> <li>User logs in with credentials or Auth0</li> <li>System validates credentials in the enclave</li> <li> <p>System issues authentication token</p> </li> <li> <p>Profile Management</p> </li> <li>User can update profile information</li> <li> <p>Changes to sensitive information require re-authentication</p> </li> <li> <p>Security Management</p> </li> <li>User can enable/disable two-factor authentication</li> <li> <p>User can manage API keys and access tokens</p> </li> <li> <p>Billing and Credits</p> </li> <li>User can view current balance and usage</li> <li>User can add credits to their account</li> <li>Credits are used to pay for function execution and other services</li> </ol>"},{"location":"workflow/#function-deployment-and-management","title":"Function Deployment and Management","text":""},{"location":"workflow/#function-deployment-workflow","title":"Function Deployment Workflow","text":"<ol> <li>Function Creation</li> <li>User creates function through UI or API</li> <li>User specifies runtime (JavaScript, Python, C#)</li> <li> <p>User provides function code and metadata</p> </li> <li> <p>Function Validation</p> </li> <li>System validates function syntax</li> <li>System checks for prohibited operations</li> <li> <p>System estimates resource requirements</p> </li> <li> <p>Function Storage</p> </li> <li>Function code is stored in the function store</li> <li> <p>Metadata is indexed for quick retrieval</p> </li> <li> <p>Function Testing</p> </li> <li>User can test function with sample inputs</li> <li> <p>System provides execution results and logs</p> </li> <li> <p>Function Deployment</p> </li> <li>User deploys function to production</li> <li>System assigns resources and prepares execution environment</li> </ol>"},{"location":"workflow/#function-execution-workflow","title":"Function Execution Workflow","text":"<ol> <li>Execution Trigger</li> <li>Function is triggered by HTTP request, event, or schedule</li> <li> <p>System validates trigger against function configuration</p> </li> <li> <p>Resource Allocation</p> </li> <li>System allocates necessary resources for execution</li> <li> <p>Function is loaded into the execution environment</p> </li> <li> <p>Secure Execution</p> </li> <li>Function is executed in the enclave</li> <li> <p>System monitors execution for resource usage and errors</p> </li> <li> <p>Resource Access</p> </li> <li>Function accesses authorized resources (secrets, storage, blockchain)</li> <li> <p>Access is controlled by function permissions</p> </li> <li> <p>Result Handling</p> </li> <li>Execution results are captured</li> <li> <p>Results are returned to the caller or stored as specified</p> </li> <li> <p>Logging and Metrics</p> </li> <li>Execution details are logged</li> <li>Metrics are collected for billing and monitoring</li> </ol>"},{"location":"workflow/#wallet-and-transaction-management","title":"Wallet and Transaction Management","text":""},{"location":"workflow/#wallet-creation-workflow","title":"Wallet Creation Workflow","text":"<ol> <li>Wallet Request</li> <li>User requests new wallet creation</li> <li> <p>System validates user authorization</p> </li> <li> <p>Secure Key Generation</p> </li> <li>Private key is generated in the enclave</li> <li> <p>Public key and address are derived</p> </li> <li> <p>Key Storage</p> </li> <li>Private key is encrypted and stored in the enclave</li> <li> <p>Public key and address are stored in the database</p> </li> <li> <p>Wallet Activation</p> </li> <li>Wallet is activated and associated with the user account</li> <li>Initial balance is set to zero</li> </ol>"},{"location":"workflow/#transaction-submission-workflow","title":"Transaction Submission Workflow","text":"<ol> <li>Transaction Request</li> <li>User or function requests transaction submission</li> <li> <p>System validates request and authorization</p> </li> <li> <p>Transaction Preparation</p> </li> <li>Transaction parameters are validated</li> <li> <p>Transaction is prepared according to Neo N3 protocol</p> </li> <li> <p>Transaction Signing</p> </li> <li>Transaction is sent to the enclave for signing</li> <li> <p>Enclave uses the stored private key to sign the transaction</p> </li> <li> <p>Transaction Submission</p> </li> <li>Signed transaction is submitted to the Neo N3 blockchain</li> <li> <p>Transaction hash is returned</p> </li> <li> <p>Transaction Monitoring</p> </li> <li>System monitors transaction status</li> <li>User is notified of transaction completion or failure</li> </ol>"},{"location":"workflow/#secrets-management","title":"Secrets Management","text":""},{"location":"workflow/#secret-storage-workflow","title":"Secret Storage Workflow","text":"<ol> <li>Secret Submission</li> <li>User submits secret through UI or API</li> <li> <p>User specifies secret name, value, and access control</p> </li> <li> <p>Secret Validation</p> </li> <li>System validates secret format and size</li> <li> <p>System checks for duplicate names</p> </li> <li> <p>Secret Encryption</p> </li> <li>Secret is sent to the enclave for encryption</li> <li> <p>Enclave encrypts the secret with a secure key</p> </li> <li> <p>Secret Storage</p> </li> <li>Encrypted secret is stored in the secrets store</li> <li> <p>Metadata and access control information is stored separately</p> </li> <li> <p>Access Control Setup</p> </li> <li>Access control rules are established for the secret</li> <li>User can specify which functions can access the secret</li> </ol>"},{"location":"workflow/#secret-access-workflow","title":"Secret Access Workflow","text":"<ol> <li>Secret Request</li> <li>Function requests access to a secret</li> <li> <p>Request includes function identity and secret name</p> </li> <li> <p>Access Validation</p> </li> <li>System validates function's authorization to access the secret</li> <li> <p>System logs access attempt</p> </li> <li> <p>Secret Retrieval</p> </li> <li>Encrypted secret is retrieved from the secrets store</li> <li> <p>Secret is sent to the enclave for decryption</p> </li> <li> <p>Secret Decryption</p> </li> <li>Enclave decrypts the secret</li> <li> <p>Decrypted secret is provided to the function within the enclave</p> </li> <li> <p>Usage Tracking</p> </li> <li>System tracks secret usage for auditing</li> <li>Access logs are maintained for security purposes</li> </ol>"},{"location":"workflow/#price-feed-management","title":"Price Feed Management","text":""},{"location":"workflow/#price-data-collection-workflow","title":"Price Data Collection Workflow","text":"<ol> <li>Data Source Configuration</li> <li>Administrator configures price data sources</li> <li> <p>System validates source availability and reliability</p> </li> <li> <p>Scheduled Collection</p> </li> <li>System schedules regular price data collection</li> <li> <p>Collection frequency is configurable per data source</p> </li> <li> <p>Data Retrieval</p> </li> <li>System connects to data sources</li> <li> <p>Raw price data is retrieved</p> </li> <li> <p>Data Validation</p> </li> <li>Data is validated for completeness and accuracy</li> <li> <p>Anomalies are detected and flagged</p> </li> <li> <p>Data Processing</p> </li> <li>Raw data is processed into standardized format</li> <li>Aggregation and normalization are applied as needed</li> </ol>"},{"location":"workflow/#oracle-submission-workflow","title":"Oracle Submission Workflow","text":"<ol> <li>Data Preparation</li> <li>Processed price data is prepared for blockchain submission</li> <li> <p>Data is formatted according to Neo N3 Oracle requirements</p> </li> <li> <p>Data Signing</p> </li> <li>Price data is sent to the enclave for signing</li> <li> <p>Enclave signs the data with the service wallet</p> </li> <li> <p>Oracle Submission</p> </li> <li>Signed data is submitted to the Neo N3 Oracle contract</li> <li> <p>Submission transaction is monitored for confirmation</p> </li> <li> <p>Local Storage</p> </li> <li>Price data is stored locally for function access</li> <li> <p>Historical data is maintained according to retention policy</p> </li> <li> <p>Notification</p> </li> <li>Interested parties are notified of price updates</li> <li>Functions subscribed to price events are triggered</li> </ol>"},{"location":"workflow/#event-monitoring-and-triggering","title":"Event Monitoring and Triggering","text":""},{"location":"workflow/#event-configuration-workflow","title":"Event Configuration Workflow","text":"<ol> <li>Event Source Definition</li> <li>User defines event sources (Neo N3 events, time-based, external)</li> <li> <p>System validates source configuration</p> </li> <li> <p>Event Rule Creation</p> </li> <li>User creates rules for event matching</li> <li> <p>Rules specify conditions and actions</p> </li> <li> <p>Function Association</p> </li> <li>User associates functions with event rules</li> <li> <p>System validates function compatibility with event data</p> </li> <li> <p>Rule Activation</p> </li> <li>User activates event rules</li> <li>System begins monitoring for matching events</li> </ol>"},{"location":"workflow/#event-processing-workflow","title":"Event Processing Workflow","text":"<ol> <li>Event Capture</li> <li>System monitors event sources</li> <li> <p>Events are captured and normalized</p> </li> <li> <p>Rule Matching</p> </li> <li>Events are matched against active rules</li> <li> <p>Matching rules trigger associated actions</p> </li> <li> <p>Function Triggering</p> </li> <li>Functions associated with matching rules are triggered</li> <li> <p>Event data is passed to the functions</p> </li> <li> <p>Execution Tracking</p> </li> <li>Function execution is tracked</li> <li> <p>Results are logged and stored</p> </li> <li> <p>Notification</p> </li> <li>Users can be notified of event processing</li> <li>Notification methods include email, webhook, and in-app</li> </ol>"},{"location":"workflow/#storage-management","title":"Storage Management","text":""},{"location":"workflow/#data-storage-workflow","title":"Data Storage Workflow","text":"<ol> <li>Storage Request</li> <li>Function requests data storage</li> <li> <p>Request includes data, key, and storage options</p> </li> <li> <p>Authorization Check</p> </li> <li>System validates function's authorization to use storage</li> <li> <p>Storage quotas are checked</p> </li> <li> <p>Data Processing</p> </li> <li>Data is processed according to storage options</li> <li> <p>Encryption is applied if specified</p> </li> <li> <p>Storage Operation</p> </li> <li>Data is stored in the appropriate storage system</li> <li> <p>Storage metadata is updated</p> </li> <li> <p>Confirmation</p> </li> <li>Storage confirmation is returned to the function</li> <li>Storage metrics are updated</li> </ol>"},{"location":"workflow/#data-retrieval-workflow","title":"Data Retrieval Workflow","text":"<ol> <li>Retrieval Request</li> <li>Function requests data retrieval</li> <li> <p>Request includes key and retrieval options</p> </li> <li> <p>Authorization Check</p> </li> <li>System validates function's authorization to access the data</li> <li> <p>Access logs are updated</p> </li> <li> <p>Data Lookup</p> </li> <li>System locates the requested data</li> <li> <p>Data is prepared for retrieval</p> </li> <li> <p>Data Processing</p> </li> <li>Retrieved data is processed according to retrieval options</li> <li> <p>Decryption is applied if necessary</p> </li> <li> <p>Data Return</p> </li> <li>Processed data is returned to the function</li> <li>Retrieval metrics are updated</li> </ol>"},{"location":"workflow/#metrics-and-monitoring","title":"Metrics and Monitoring","text":""},{"location":"workflow/#metrics-collection-workflow","title":"Metrics Collection Workflow","text":"<ol> <li>Metric Definition</li> <li>System defines metrics to collect</li> <li> <p>Metrics cover system performance, function execution, and resource usage</p> </li> <li> <p>Data Collection</p> </li> <li>Metrics agents collect data from system components</li> <li> <p>Data is collected at defined intervals</p> </li> <li> <p>Data Aggregation</p> </li> <li>Raw metrics are aggregated</li> <li> <p>Statistical processing is applied</p> </li> <li> <p>Storage and Indexing</p> </li> <li>Processed metrics are stored</li> <li> <p>Metrics are indexed for efficient querying</p> </li> <li> <p>Alerting</p> </li> <li>Metrics are compared against thresholds</li> <li>Alerts are generated for anomalies</li> </ol>"},{"location":"workflow/#monitoring-workflow","title":"Monitoring Workflow","text":"<ol> <li>Dashboard Configuration</li> <li>Administrators configure monitoring dashboards</li> <li> <p>Dashboards display key metrics and system status</p> </li> <li> <p>Real-time Monitoring</p> </li> <li>Dashboards update in real-time</li> <li> <p>System status is continuously evaluated</p> </li> <li> <p>Alert Processing</p> </li> <li>Alerts are processed according to severity</li> <li> <p>Notification channels are selected based on alert type</p> </li> <li> <p>Incident Management</p> </li> <li>Critical alerts generate incidents</li> <li> <p>Incidents are tracked through resolution</p> </li> <li> <p>Reporting</p> </li> <li>Regular reports are generated</li> <li>Reports include system performance, usage, and incidents</li> </ol>"},{"location":"architecture/","title":"Neo Service Layer Architecture Documentation","text":"<p>This directory contains architectural documentation for the Neo Service Layer, providing a comprehensive overview of the system design, components, and interactions.</p>"},{"location":"architecture/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Overview</li> <li>High-level architecture</li> <li>Key components</li> <li> <p>Security model</p> </li> <li> <p>Service Communication Flow</p> </li> <li>Communication patterns</li> <li>Request flow</li> <li>VSOCK communication protocol</li> <li>Message format</li> <li> <p>Service routing</p> </li> <li> <p>Enclave Architecture</p> </li> <li>Enclave overview</li> <li>Enclave components</li> <li>Security features</li> <li> <p>Data flow within the enclave</p> </li> <li> <p>Service Layer Components</p> </li> <li>Service layer overview</li> <li>Core components</li> <li>Service components</li> <li> <p>Service interactions</p> </li> <li> <p>Data Flow Diagram</p> </li> <li>Client request flow</li> <li>Function execution flow</li> <li>Price feed data flow</li> <li>Wallet operation flow</li> <li>Secrets management flow</li> <li>Event monitoring flow</li> <li>Analytics data flow</li> </ol>"},{"location":"architecture/#architecture-principles","title":"Architecture Principles","text":"<p>The Neo Service Layer architecture is guided by the following principles:</p> <ol> <li>Security First: Critical operations are performed within secure enclaves</li> <li>Separation of Concerns: Each component has a clear, focused responsibility</li> <li>Loose Coupling: Components interact through well-defined interfaces</li> <li>Scalability: The architecture supports horizontal scaling of components</li> <li>Resilience: The system is designed to handle failures gracefully</li> <li>Observability: All components provide metrics, logs, and traces for monitoring</li> </ol>"},{"location":"architecture/#diagrams","title":"Diagrams","text":"<p>The architecture documentation includes ASCII diagrams to illustrate the system design. These diagrams provide a visual representation of the components and their interactions, making it easier to understand the overall architecture.</p> <p>Example:</p> <pre><code>+----------------+     +----------------+     +----------------+\n|                |     |                |     |                |\n|  Client        +----&gt;+  API Gateway   +----&gt;+  Service Layer |\n|                |     |                |     |                |\n+----------------+     +----------------+     +-------+--------+\n                                                      |\n                                                      |\n                                                      v\n                                        +-------------+-------------+\n                                        |                           |\n                                        |  Enclave Services         |\n                                        |                           |\n                                        +---------------------------+\n</code></pre>"},{"location":"architecture/#implementation-guidelines","title":"Implementation Guidelines","text":"<p>When implementing components based on this architecture, developers should:</p> <ol> <li>Follow the single responsibility principle</li> <li>Program to interfaces, not implementations</li> <li>Use dependency injection for component composition</li> <li>Implement proper error handling and logging</li> <li>Write comprehensive unit and integration tests</li> <li>Document public APIs and interfaces</li> </ol>"},{"location":"architecture/#future-enhancements","title":"Future Enhancements","text":"<p>The architecture is designed to support future enhancements, including:</p> <ol> <li>Multi-enclave support for increased isolation</li> <li>Additional blockchain network integrations</li> <li>Enhanced analytics and monitoring capabilities</li> <li>Expanded function runtime environments</li> <li>Advanced price feed aggregation algorithms</li> </ol>"},{"location":"architecture/#references","title":"References","text":"<ul> <li>AWS Nitro Enclaves Documentation</li> <li>Neo N3 Documentation</li> <li>C# Coding Standards</li> </ul>"},{"location":"architecture/data_flow/","title":"Neo Service Layer - Data Flow Diagram","text":""},{"location":"architecture/data_flow/#overview","title":"Overview","text":"<p>This document illustrates the data flow within the Neo Service Layer, showing how data moves between different components and services.</p>"},{"location":"architecture/data_flow/#client-request-flow","title":"Client Request Flow","text":"<pre><code>+--------+     +--------+     +--------+     +--------+     +--------+\n|        |     |        |     |        |     |        |     |        |\n| Client +----&gt;+ API    +----&gt;+ Auth   +----&gt;+ Service+----&gt;+ Storage|\n|        |     | Gateway|     | Service|     | Layer  |     | Layer  |\n|        |     |        |     |        |     |        |     |        |\n+--------+     +--------+     +--------+     +--------+     +--------+\n    ^                                            |\n    |                                            |\n    |                                            v\n    |                                        +--------+\n    |                                        |        |\n    +----------------------------------------+ Enclave|\n                                             | Service|\n                                             |        |\n                                             +--------+\n</code></pre> <ol> <li>Client sends a request to the API Gateway</li> <li>API Gateway validates the request format and routes it to the Auth Service</li> <li>Auth Service authenticates the request and authorizes the operation</li> <li>Service Layer processes the business logic</li> <li>If needed, the Service Layer interacts with the Enclave Service for secure operations</li> <li>Service Layer stores/retrieves data from the Storage Layer</li> <li>Response flows back to the client</li> </ol>"},{"location":"architecture/data_flow/#function-execution-flow","title":"Function Execution Flow","text":"<pre><code>+--------+     +--------+     +--------+     +--------+\n|        |     |        |     |        |     |        |\n| Client +----&gt;+ API    +----&gt;+ Function+----&gt;+ Runtime|\n|        |     | Gateway|     | Service |     | Engine |\n|        |     |        |     |         |     |        |\n+--------+     +--------+     +--------+     +--------+\n                                  |              |\n                                  v              v\n                              +--------+     +--------+\n                              |        |     |        |\n                              | Storage+----&gt;+ Enclave|\n                              | Layer  |     | Service|\n                              |        |     |        |\n                              +--------+     +--------+\n                                  |              |\n                                  v              v\n                              +--------+     +--------+\n                              |        |     |        |\n                              | Neo N3 |     | Gas    |\n                              | RPC    |     | Bank   |\n                              |        |     |        |\n                              +--------+     +--------+\n</code></pre> <ol> <li>Client submits a function execution request</li> <li>API Gateway validates and routes the request</li> <li>Function Service prepares the execution environment</li> <li>Runtime Engine executes the function code</li> <li>During execution, the function may:</li> <li>Access data from the Storage Layer</li> <li>Request secure operations from the Enclave Service</li> <li>Interact with the Neo N3 blockchain via RPC</li> <li>Consume GAS from the Gas Bank</li> <li>Results are returned to the client</li> </ol>"},{"location":"architecture/data_flow/#price-feed-data-flow","title":"Price Feed Data Flow","text":"<pre><code>+--------+     +--------+     +--------+     +--------+\n|        |     |        |     |        |     |        |\n| External+----&gt;+ Price  +----&gt;+ Enclave +----&gt;+ Storage|\n| Sources|     | Feed   |     | Service |     | Layer  |\n|        |     | Service|     |         |     |        |\n+--------+     +--------+     +--------+     +--------+\n                    |              |\n                    v              v\n                +--------+     +--------+\n                |        |     |        |\n                | Event  |     | Neo N3 |\n                | Monitor|     | RPC    |\n                |        |     |        |\n                +--------+     +--------+\n</code></pre> <ol> <li>External price sources provide data</li> <li>Price Feed Service collects and validates the data</li> <li>Enclave Service securely processes and signs the data</li> <li>Processed data is stored in the Storage Layer</li> <li>Event Monitor tracks relevant blockchain events</li> <li>Price data is submitted to the Neo N3 blockchain when needed</li> </ol>"},{"location":"architecture/data_flow/#wallet-operation-flow","title":"Wallet Operation Flow","text":"<pre><code>+--------+     +--------+     +--------+     +--------+\n|        |     |        |     |        |     |        |\n| Client +----&gt;+ API    +----&gt;+ Wallet +----&gt;+ Enclave|\n|        |     | Gateway|     | Service|     | Service|\n|        |     |        |     |        |     |        |\n+--------+     +--------+     +--------+     +--------+\n                                  |              |\n                                  v              v\n                              +--------+     +--------+\n                              |        |     |        |\n                              | Storage+----&gt;+ Neo N3 |\n                              | Layer  |     | RPC    |\n                              |        |     |        |\n                              +--------+     +--------+\n</code></pre> <ol> <li>Client sends a wallet operation request</li> <li>API Gateway validates and routes the request</li> <li>Wallet Service processes the request</li> <li>For sensitive operations (key management, signing), the Enclave Service is used</li> <li>Wallet data is stored in the Storage Layer</li> <li>Transactions are submitted to the Neo N3 blockchain</li> </ol>"},{"location":"architecture/data_flow/#secrets-management-flow","title":"Secrets Management Flow","text":"<pre><code>+--------+     +--------+     +--------+     +--------+\n|        |     |        |     |        |     |        |\n| Client +----&gt;+ API    +----&gt;+ Secrets+----&gt;+ Enclave|\n|        |     | Gateway|     | Service|     | Service|\n|        |     |        |     |        |     |        |\n+--------+     +--------+     +--------+     +--------+\n                                  |              |\n                                  v              v\n                              +--------+     +--------+\n                              |        |     |        |\n                              | Storage+----&gt;+ Function|\n                              | Layer  |     | Service |\n                              |        |     |        |\n                              +--------+     +--------+\n</code></pre> <ol> <li>Client sends a secrets management request</li> <li>API Gateway validates and routes the request</li> <li>Secrets Service processes the request</li> <li>Sensitive operations are performed in the Enclave Service</li> <li>Encrypted secrets are stored in the Storage Layer</li> <li>Function Service can access secrets when authorized</li> </ol>"},{"location":"architecture/data_flow/#event-monitoring-flow","title":"Event Monitoring Flow","text":"<pre><code>+--------+     +--------+     +--------+     +--------+\n|        |     |        |     |        |     |        |\n| Neo N3 +----&gt;+ Event  +----&gt;+ Storage+----&gt;+ Function|\n| Network|     | Monitor|     | Layer  |     | Service |\n|        |     |        |     |        |     |        |\n+--------+     +--------+     +--------+     +--------+\n                    |                            |\n                    v                            v\n                +--------+                   +--------+\n                |        |                   |        |\n                | Notifi-|                   | Client |\n                | cation |                   | Apps   |\n                |        |                   |        |\n                +--------+                   +--------+\n</code></pre> <ol> <li>Neo N3 Network generates events</li> <li>Event Monitor captures and processes events</li> <li>Event data is stored in the Storage Layer</li> <li>Function Service can be triggered by events</li> <li>Notifications can be sent to subscribed clients</li> <li>Client applications can query event data</li> </ol>"},{"location":"architecture/data_flow/#analytics-data-flow","title":"Analytics Data Flow","text":"<pre><code>+--------+     +--------+     +--------+     +--------+\n|        |     |        |     |        |     |        |\n| Service+----&gt;+ Metrics+----&gt;+ Analytics+--&gt;+ Storage|\n| Layer  |     | Service|     | Service |    | Layer  |\n|        |     |        |     |         |    |        |\n+--------+     +--------+     +--------+     +--------+\n                                  |              |\n                                  v              v\n                              +--------+     +--------+\n                              |        |     |        |\n                              | Dash-  |     | Alert  |\n                              | boards |     | System |\n                              |        |     |        |\n                              +--------+     +--------+\n</code></pre> <ol> <li>Service Layer components generate metrics and logs</li> <li>Metrics Service collects and processes metrics</li> <li>Analytics Service performs data analysis</li> <li>Processed data is stored in the Storage Layer</li> <li>Dashboards visualize the analytics data</li> <li>Alert System monitors for anomalies and triggers notifications</li> </ol> <p>These data flow diagrams provide a high-level overview of how data moves through the Neo Service Layer, illustrating the interactions between different components and services.</p>"},{"location":"architecture/enclave_architecture/","title":"Neo Service Layer - Enclave Architecture","text":""},{"location":"architecture/enclave_architecture/#enclave-overview","title":"Enclave Overview","text":"<p>The Neo Service Layer uses AWS Nitro Enclaves to provide a secure, isolated environment for processing sensitive operations. The enclave architecture ensures that even if the parent instance is compromised, the sensitive data and operations remain protected.</p> <pre><code>+------------------------------------------+\n|                                          |\n|             Parent Instance              |\n|                                          |\n+------------------+---------------------+-+\n                   |                     |\n                   | VSOCK               |\n                   | Communication       |\n                   |                     |\n+------------------v---------------------v-+\n|                                          |\n|             Nitro Enclave                |\n|                                          |\n|  +----------------------------------+    |\n|  |                                  |    |\n|  |         VSOCK Server             |    |\n|  |                                  |    |\n|  +---------------+------------------+    |\n|                  |                       |\n|                  |                       |\n|  +---------------v------------------+    |\n|  |                                  |    |\n|  |       Request Router             |    |\n|  |                                  |    |\n|  +--+-------------+-------------+---+    |\n|     |             |             |        |\n|     |             |             |        |\n|  +--v----+     +--v----+     +--v----+  |\n|  |       |     |       |     |       |  |\n|  | Acct  |     |Wallet |     |Secret |  |\n|  | Svc   |     | Svc   |     | Svc   |  |\n|  |       |     |       |     |       |  |\n|  +-------+     +-------+     +-------+  |\n|                                          |\n|  +-------+     +-------+     +-------+  |\n|  |       |     |       |     |       |  |\n|  | Func  |     | Price |     | Gas   |  |\n|  | Svc   |     | Feed  |     | Bank  |  |\n|  |       |     |       |     |       |  |\n|  +-------+     +-------+     +-------+  |\n|                                          |\n+------------------------------------------+\n</code></pre>"},{"location":"architecture/enclave_architecture/#enclave-components","title":"Enclave Components","text":""},{"location":"architecture/enclave_architecture/#vsock-server","title":"VSOCK Server","text":"<p>The VSOCK Server is responsible for handling communication between the parent instance and the enclave. It:</p> <ol> <li>Listens for incoming connections on a predefined port</li> <li>Receives and deserializes requests</li> <li>Routes requests to the appropriate service</li> <li>Serializes and sends responses back to the parent instance</li> </ol>"},{"location":"architecture/enclave_architecture/#request-router","title":"Request Router","text":"<p>The Request Router determines which enclave service should handle a particular request based on the <code>serviceType</code> and <code>operation</code> fields in the request. It:</p> <ol> <li>Validates incoming requests</li> <li>Routes requests to the appropriate service</li> <li>Handles error conditions and generates appropriate error responses</li> </ol>"},{"location":"architecture/enclave_architecture/#enclave-services","title":"Enclave Services","text":"<p>The enclave hosts several services that handle sensitive operations:</p> <ol> <li>Account Service: Manages user accounts and permissions</li> <li>Wallet Service: Manages cryptographic keys and signs transactions</li> <li>Secrets Service: Securely stores and manages sensitive data</li> <li>Function Service: Executes user-defined functions in a secure environment</li> <li>Price Feed Service: Securely fetches, validates, and provides price data</li> <li>Gas Bank Service: Manages gas allocation and usage for transactions</li> </ol>"},{"location":"architecture/enclave_architecture/#security-features","title":"Security Features","text":"<pre><code>+------------------------------------------+\n|                                          |\n|             Enclave Security             |\n|                                          |\n|  +----------------------------------+    |\n|  |                                  |    |\n|  |     Memory Encryption            |    |\n|  |                                  |    |\n|  +----------------------------------+    |\n|                                          |\n|  +----------------------------------+    |\n|  |                                  |    |\n|  |     Attestation                  |    |\n|  |                                  |    |\n|  +----------------------------------+    |\n|                                          |\n|  +----------------------------------+    |\n|  |                                  |    |\n|  |     Secure Key Management        |    |\n|  |                                  |    |\n|  +----------------------------------+    |\n|                                          |\n|  +----------------------------------+    |\n|  |                                  |    |\n|  |     Isolated Execution           |    |\n|  |                                  |    |\n|  +----------------------------------+    |\n|                                          |\n+------------------------------------------+\n</code></pre> <ol> <li> <p>Memory Encryption: All memory within the enclave is encrypted, ensuring that sensitive data cannot be accessed even if the parent instance is compromised.</p> </li> <li> <p>Attestation: The enclave provides cryptographic proof of its identity and integrity, allowing clients to verify that they are communicating with a legitimate enclave.</p> </li> <li> <p>Secure Key Management: Cryptographic keys are generated and stored within the enclave, never leaving the secure environment.</p> </li> <li> <p>Isolated Execution: The enclave runs in a separate, isolated environment with its own memory and CPU resources, preventing the parent instance from accessing its operations.</p> </li> </ol>"},{"location":"architecture/enclave_architecture/#data-flow-within-the-enclave","title":"Data Flow Within the Enclave","text":"<pre><code>+------------------+     +------------------+     +------------------+\n|                  |     |                  |     |                  |\n| Request Received +----&gt;+ Request Validated+----&gt;+ Service Selected |\n|                  |     |                  |     |                  |\n+------------------+     +------------------+     +--------+---------+\n                                                           |\n                                                           v\n+------------------+     +------------------+     +--------+---------+\n|                  |     |                  |     |                  |\n| Response Sent    +&lt;----+ Result Processed +&lt;----+ Operation        |\n|                  |     |                  |     | Executed         |\n+------------------+     +------------------+     +------------------+\n</code></pre> <ol> <li>Request is received by the VSOCK Server</li> <li>Request is validated for proper format and permissions</li> <li>Appropriate service is selected based on the request type</li> <li>Operation is executed within the secure enclave</li> <li>Result is processed and formatted for response</li> <li>Response is sent back to the parent instance</li> </ol> <p>This architecture ensures that all sensitive operations are performed within the secure enclave, protecting them from potential attacks on the parent instance.</p>"},{"location":"architecture/security_model/","title":"Neo Service Layer - Security Model","text":""},{"location":"architecture/security_model/#overview","title":"Overview","text":"<p>The Neo Service Layer implements a comprehensive security model to protect sensitive operations, data, and cryptographic keys. This document outlines the security architecture, threat model, and security controls implemented throughout the system.</p>"},{"location":"architecture/security_model/#security-architecture","title":"Security Architecture","text":"<pre><code>+----------------------------------------------------------------------+\n|                                                                      |\n|                        Security Layers                               |\n|                                                                      |\n|  +----------------+  +----------------+  +---------------------+     |\n|  |                |  |                |  |                     |     |\n|  | Network        |  | Application    |  | Data                |     |\n|  | Security       |  | Security       |  | Security            |     |\n|  |                |  |                |  |                     |     |\n|  +----------------+  +----------------+  +---------------------+     |\n|                                                                      |\n|  +----------------+  +----------------+  +---------------------+     |\n|  |                |  |                |  |                     |     |\n|  | Identity &amp;     |  | Enclave        |  | Cryptographic       |     |\n|  | Access Control |  | Security       |  | Security            |     |\n|  |                |  |                |  |                     |     |\n|  +----------------+  +----------------+  +---------------------+     |\n|                                                                      |\n+----------------------------------------------------------------------+\n</code></pre>"},{"location":"architecture/security_model/#threat-model","title":"Threat Model","text":"<p>The Neo Service Layer is designed to protect against the following threats:</p> <pre><code>+----------------------------------------------------------------------+\n|                                                                      |\n|                        Threat Model                                  |\n|                                                                      |\n|  +----------------+  +----------------+  +---------------------+     |\n|  |                |  |                |  |                     |     |\n|  | External       |  | Malicious      |  | Data                |     |\n|  | Attackers      |  | Insiders       |  | Exfiltration        |     |\n|  |                |  |                |  |                     |     |\n|  +----------------+  +----------------+  +---------------------+     |\n|                                                                      |\n|  +----------------+  +----------------+  +---------------------+     |\n|  |                |  |                |  |                     |     |\n|  | Compromised    |  | Supply Chain  |  | Side-Channel        |     |\n|  | Host           |  | Attacks       |  | Attacks             |     |\n|  |                |  |                |  |                     |     |\n|  +----------------+  +----------------+  +---------------------+     |\n|                                                                      |\n+----------------------------------------------------------------------+\n</code></pre>"},{"location":"architecture/security_model/#enclave-security","title":"Enclave Security","text":"<p>The AWS Nitro Enclave provides hardware-level isolation for sensitive operations:</p> <pre><code>+------------------------------------------+\n|                                          |\n|             Parent Instance              |\n|                                          |\n|  +----------------------------------+    |\n|  |                                  |    |\n|  |  Non-Sensitive Operations        |    |\n|  |  - API Handling                  |    |\n|  |  - Request Validation            |    |\n|  |  - Response Formatting           |    |\n|  |                                  |    |\n|  +---------------+------------------+    |\n|                  |                       |\n|                  | VSOCK                 |\n|                  | Communication         |\n|  +---------------v------------------+    |\n|  |                                  |    |\n|  |        Nitro Enclave             |    |\n|  |                                  |    |\n|  |  +---------------------------+   |    |\n|  |  |                           |   |    |\n|  |  |  Sensitive Operations     |   |    |\n|  |  |  - Key Management         |   |    |\n|  |  |  - Transaction Signing    |   |    |\n|  |  |  - Secret Management      |   |    |\n|  |  |                           |   |    |\n|  |  +---------------------------+   |    |\n|  |                                  |    |\n|  +----------------------------------+    |\n|                                          |\n+------------------------------------------+\n</code></pre> <p>Key security features of the enclave:</p> <ol> <li>Hardware-Based Isolation: The enclave runs in a separate virtual machine with dedicated CPU and memory resources</li> <li>Memory Encryption: All memory within the enclave is encrypted</li> <li>No Direct Access: The parent instance cannot directly access the enclave's memory or CPU state</li> <li>Attestation: The enclave can provide cryptographic proof of its identity and integrity</li> <li>No Persistent Storage: The enclave has no persistent storage, ensuring that sensitive data is not persisted</li> </ol>"},{"location":"architecture/security_model/#defense-in-depth","title":"Defense in Depth","text":"<p>The Neo Service Layer implements multiple layers of security controls:</p> <pre><code>+----------------------------------------------------------------------+\n|                                                                      |\n|                        Defense in Depth                              |\n|                                                                      |\n|  +----------------+                                                  |\n|  |                |                                                  |\n|  | Network        | - TLS/HTTPS for all communications               |\n|  | Security       | - IP whitelisting                                |\n|  |                | - DDoS protection                                |\n|  +----------------+                                                  |\n|                                                                      |\n|  +----------------+                                                  |\n|  |                | - Input validation                               |\n|  | Application    | - Output encoding                                |\n|  | Security       | - CSRF protection                                |\n|  |                | - Rate limiting                                  |\n|  +----------------+                                                  |\n|                                                                      |\n|  +----------------+                                                  |\n|  |                | - Authentication                                 |\n|  | Identity &amp;     | - Authorization                                  |\n|  | Access Control | - Role-based access control                      |\n|  |                | - Principle of least privilege                   |\n|  +----------------+                                                  |\n|                                                                      |\n|  +----------------+                                                  |\n|  |                | - Encryption at rest                             |\n|  | Data           | - Encryption in transit                          |\n|  | Security       | - Data minimization                              |\n|  |                | - Secure deletion                                |\n|  +----------------+                                                  |\n|                                                                      |\n|  +----------------+                                                  |\n|  |                | - Hardware isolation                             |\n|  | Enclave        | - Memory encryption                              |\n|  | Security       | - Attestation                                    |\n|  |                | - Secure key management                          |\n|  +----------------+                                                  |\n|                                                                      |\n+----------------------------------------------------------------------+\n</code></pre>"},{"location":"architecture/security_model/#cryptographic-security","title":"Cryptographic Security","text":"<p>The Neo Service Layer uses strong cryptographic algorithms and protocols:</p> <pre><code>+----------------------------------------------------------------------+\n|                                                                      |\n|                    Cryptographic Security                            |\n|                                                                      |\n|  +----------------+  +----------------+  +---------------------+     |\n|  |                |  |                |  |                     |     |\n|  | Key            |  | Data           |  | Communication       |     |\n|  | Management     |  | Encryption     |  | Encryption          |     |\n|  |                |  |                |  |                     |     |\n|  +----------------+  +----------------+  +---------------------+     |\n|                                                                      |\n|  - Secure key generation within enclave                              |\n|  - Key rotation policies                                             |\n|  - AES-256 for symmetric encryption                                  |\n|  - RSA-2048/4096 for asymmetric encryption                           |\n|  - ECDSA for digital signatures                                      |\n|  - SHA-256/512 for hashing                                           |\n|  - TLS 1.3 for secure communications                                 |\n|                                                                      |\n+----------------------------------------------------------------------+\n</code></pre>"},{"location":"architecture/security_model/#security-monitoring-and-response","title":"Security Monitoring and Response","text":"<p>The Neo Service Layer implements comprehensive security monitoring:</p> <pre><code>+----------------------------------------------------------------------+\n|                                                                      |\n|                Security Monitoring and Response                      |\n|                                                                      |\n|  +----------------+  +----------------+  +---------------------+     |\n|  |                |  |                |  |                     |     |\n|  | Log            |  | Intrusion      |  | Anomaly             |     |\n|  | Collection     |  | Detection      |  | Detection           |     |\n|  |                |  |                |  |                     |     |\n|  +-------+--------+  +-------+--------+  +---------+-----------+     |\n|          |                   |                     |                 |\n|          |                   |                     |                 |\n|          v                   v                     v                 |\n|  +-------+-------------------+---------------------+-----------+     |\n|  |                                                             |     |\n|  |                 Security Information and                    |     |\n|  |                 Event Management (SIEM)                     |     |\n|  |                                                             |     |\n|  +-----+----------------------------------------------------+--+     |\n|        |                                                    |        |\n|        |                                                    |        |\n|        v                                                    v        |\n|  +-----+----+                                         +----+-----+  |\n|  |          |                                         |          |  |\n|  | Alerting |                                         | Incident |  |\n|  | System   |                                         | Response |  |\n|  |          |                                         |          |  |\n|  +----------+                                         +----------+  |\n|                                                                     |\n+---------------------------------------------------------------------+\n</code></pre>"},{"location":"architecture/security_model/#compliance-and-auditing","title":"Compliance and Auditing","text":"<p>The Neo Service Layer maintains comprehensive audit logs for all security-relevant events:</p> <pre><code>+----------------------------------------------------------------------+\n|                                                                      |\n|                    Compliance and Auditing                           |\n|                                                                      |\n|  +----------------+  +----------------+  +---------------------+     |\n|  |                |  |                |  |                     |     |\n|  | Authentication | | Authorization   |  | Data Access         |     |\n|  | Events         | | Events          |  | Events              |     |\n|  |                |  |                |  |                     |     |\n|  +-------+--------+  +-------+--------+  +---------+-----------+     |\n|          |                   |                     |                 |\n|          |                   |                     |                 |\n|          v                   v                     v                 |\n|  +-------+-------------------+---------------------+-----------+     |\n|  |                                                             |     |\n|  |                 Secure Audit Log Storage                    |     |\n|  |                                                             |     |\n|  +-----+----------------------------------------------------+--+     |\n|        |                                                    |        |\n|        |                                                    |        |\n|        v                                                    v        |\n|  +-----+----+                                         +----+-----+  |\n|  |          |                                         |          |  |\n|  | Reporting|                                         | Forensic |  |\n|  | System   |                                         | Analysis |  |\n|  |          |                                         |          |  |\n|  +----------+                                         +----------+  |\n|                                                                     |\n+---------------------------------------------------------------------+\n</code></pre>"},{"location":"architecture/security_model/#secure-development-lifecycle","title":"Secure Development Lifecycle","text":"<p>The Neo Service Layer follows a secure development lifecycle:</p> <pre><code>+----------------------------------------------------------------------+\n|                                                                      |\n|                    Secure Development Lifecycle                      |\n|                                                                      |\n|  +----------------+     +----------------+     +----------------+    |\n|  |                |     |                |     |                |    |\n|  | Security       +----&gt;+ Threat         +----&gt;+ Secure         |    |\n|  | Requirements   |     | Modeling       |     | Design         |    |\n|  |                |     |                |     |                |    |\n|  +----------------+     +----------------+     +-------+--------+    |\n|                                                        |             |\n|                                                        |             |\n|                                                        v             |\n|  +----------------+     +----------------+     +-------+--------+    |\n|  |                |     |                |     |                |    |\n|  | Security       +&lt;----+ Security       +&lt;----+ Secure         |    |\n|  | Monitoring     |     | Testing        |     | Implementation |    |\n|  |                |     |                |     |                |    |\n|  +----------------+     +----------------+     +----------------+    |\n|                                                                      |\n+----------------------------------------------------------------------+\n</code></pre> <p>This comprehensive security model ensures that the Neo Service Layer provides a secure platform for blockchain operations, protecting sensitive data and operations from a wide range of threats.</p>"},{"location":"architecture/service_communication/","title":"Neo Service Layer - Service Communication Flow","text":""},{"location":"architecture/service_communication/#communication-patterns","title":"Communication Patterns","text":"<p>The Neo Service Layer uses a combination of direct method calls and VSOCK communication to enable secure interaction between services and the enclave.</p> <pre><code>+----------------+     +----------------+     +----------------+\n|                |     |                |     |                |\n|  Client        +----&gt;+  API Gateway   +----&gt;+  Service Layer |\n|                |     |                |     |                |\n+----------------+     +----------------+     +-------+--------+\n                                                      |\n                                                      |\n                                                      v\n                                        +-------------+-------------+\n                                        |                           |\n                                        |  VSOCK Communication      |\n                                        |                           |\n                                        +-------------+-------------+\n                                                      |\n                                                      |\n                                                      v\n                                        +-------------+-------------+\n                                        |                           |\n                                        |  Enclave Services         |\n                                        |                           |\n                                        +---------------------------+\n</code></pre>"},{"location":"architecture/service_communication/#request-flow","title":"Request Flow","text":"<ol> <li>Client sends a request to the API Gateway</li> <li>API Gateway routes the request to the appropriate Service Layer component</li> <li>Service Layer processes the request and determines if enclave operations are needed</li> <li>If enclave operations are required, the Service Layer sends a request to the Enclave via VSOCK</li> <li>Enclave processes the request securely and returns the result</li> <li>Service Layer completes the request processing and returns the response to the client</li> </ol>"},{"location":"architecture/service_communication/#vsock-communication-protocol","title":"VSOCK Communication Protocol","text":"<p>The VSOCK communication between the parent instance and the enclave follows a request-response pattern:</p> <pre><code>Parent Instance                                 Enclave\n     |                                            |\n     |  1. Serialize Request                      |\n     |  2. Send Request Length                    |\n     |  ----------------------------------------&gt; |\n     |  3. Send Request Data                      |\n     |  ----------------------------------------&gt; |\n     |                                            |\n     |                                            |  4. Process Request\n     |                                            |\n     |  &lt;---------------------------------------- |  5. Send Response Length\n     |  &lt;---------------------------------------- |  6. Send Response Data\n     |  7. Deserialize Response                   |\n     |                                            |\n</code></pre>"},{"location":"architecture/service_communication/#message-format","title":"Message Format","text":"<p>All messages exchanged between the parent instance and the enclave use a standardized JSON format:</p> <pre><code>{\n    \"requestId\": \"unique-request-identifier\",\n    \"serviceType\": \"service-name\",\n    \"operation\": \"operation-name\",\n    \"payload\": { ... operation-specific data ... }\n}\n</code></pre> <p>Response format:</p> <pre><code>{\n    \"requestId\": \"unique-request-identifier\",\n    \"success\": true/false,\n    \"errorMessage\": \"error message if success is false\",\n    \"payload\": { ... operation-specific response data ... }\n}\n</code></pre>"},{"location":"architecture/service_communication/#service-routing","title":"Service Routing","text":"<p>The enclave routes requests to the appropriate service based on the <code>serviceType</code> field:</p> <pre><code>                      +------------------+\n                      |                  |\n                      |  VSOCK Server    |\n                      |                  |\n                      +--------+---------+\n                               |\n                               v\n                      +--------+---------+\n                      |                  |\n                      |  Request Router  |\n                      |                  |\n                      +--------+---------+\n                               |\n           +------------------+------------------+\n           |                  |                  |\n           v                  v                  v\n+----------+------+  +--------+-------+  +-------+--------+\n|                 |  |                |  |                |\n| Account Service |  | Wallet Service |  | Secrets Service|\n|                 |  |                |  |                |\n+-----------------+  +----------------+  +----------------+\n           |                  |                  |\n           v                  v                  v\n+----------+------+  +--------+-------+  +-------+--------+\n|                 |  |                |  |                |\n| Function Service|  | Price Feed     |  | Gas Bank       |\n|                 |  |                |  |                |\n+-----------------+  +----------------+  +----------------+\n</code></pre> <p>This architecture ensures that all sensitive operations are performed within the secure enclave while maintaining a clean separation of concerns between different service components.</p>"},{"location":"architecture/service_layer_components/","title":"Neo Service Layer - Service Layer Components","text":""},{"location":"architecture/service_layer_components/#service-layer-overview","title":"Service Layer Overview","text":"<p>The Neo Service Layer consists of several core components that work together to provide a comprehensive set of services for the Neo N3 blockchain. Each component is designed with a specific responsibility and interacts with other components through well-defined interfaces.</p> <pre><code>+----------------------------------------------------------------------+\n|                                                                      |\n|                        Neo Service Layer                             |\n|                                                                      |\n|  +----------------+  +----------------+  +---------------------+     |\n|  |                |  |                |  |                     |     |\n|  | API Gateway    |  | Authentication |  | Service Registry    |     |\n|  |                |  |                |  |                     |     |\n|  +-------+--------+  +-------+--------+  +---------+-----------+     |\n|          |                   |                     |                 |\n|          |                   |                     |                 |\n|          v                   v                     v                 |\n|  +-------+-------------------+---------------------+-----------+     |\n|  |                                                             |     |\n|  |                     Service Layer Core                      |     |\n|  |                                                             |     |\n|  +-----+----------+----------+-----------+-----------+--------+     |\n|        |          |          |           |           |              |\n|        |          |          |           |           |              |\n|        v          v          v           v           v              |\n|  +-----+----+ +---+------+ +-+--------+ ++--------+ ++---------+    |\n|  |          | |          | |          | |         | |          |    |\n|  | Account  | | Wallet   | | Secrets  | | Function| | Price    |    |\n|  | Service  | | Service  | | Service  | | Service | | Feed     |    |\n|  |          | |          | |          | |         | |          |    |\n|  +----------+ +----------+ +----------+ +---------+ +----------+    |\n|                                                                     |\n|  +----------+ +----------+ +----------+ +---------+ +----------+    |\n|  |          | |          | |          | |         | |          |    |\n|  | Gas Bank | | Storage  | | Analytics| | Event   | | Metrics  |    |\n|  | Service  | | Service  | | Service  | | Monitor | | Service  |    |\n|  |          | |          | |          | |         | |          |    |\n|  +----------+ +----------+ +----------+ +---------+ +----------+    |\n|                                                                     |\n+---------------------------------------------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#core-components","title":"Core Components","text":""},{"location":"architecture/service_layer_components/#api-gateway","title":"API Gateway","text":"<p>The API Gateway serves as the entry point for all client requests. It:</p> <ol> <li>Handles HTTP/HTTPS requests from clients</li> <li>Routes requests to the appropriate service</li> <li>Manages API versioning</li> <li>Implements rate limiting and request validation</li> <li>Provides API documentation through Swagger/OpenAPI</li> </ol>"},{"location":"architecture/service_layer_components/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This component manages user authentication and authorization:</p> <ol> <li>Validates user credentials</li> <li>Issues and validates JWT tokens</li> <li>Manages user roles and permissions</li> <li>Implements OAuth2 flows for third-party integrations</li> <li>Enforces access control policies</li> </ol>"},{"location":"architecture/service_layer_components/#service-registry","title":"Service Registry","text":"<p>The Service Registry maintains information about available services:</p> <ol> <li>Tracks service availability and health</li> <li>Facilitates service discovery</li> <li>Manages service configurations</li> <li>Provides load balancing capabilities</li> <li>Supports service versioning</li> </ol>"},{"location":"architecture/service_layer_components/#service-layer-core","title":"Service Layer Core","text":"<p>The Service Layer Core provides common functionality used by all services:</p> <ol> <li>Dependency injection container</li> <li>Logging and telemetry</li> <li>Error handling and exception management</li> <li>Transaction management</li> <li>Event publishing and subscription</li> </ol>"},{"location":"architecture/service_layer_components/#service-components","title":"Service Components","text":""},{"location":"architecture/service_layer_components/#account-service","title":"Account Service","text":"<p>The Account Service manages user accounts and profiles:</p> <pre><code>+----------------------------------+\n|                                  |\n|         Account Service          |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Account Management       |   |\n|  |  - Create/Update/Delete   |   |\n|  |  - Profile Management     |   |\n|  |  - Account Verification   |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Permission Management    |   |\n|  |  - Role Assignment        |   |\n|  |  - Permission Checks      |   |\n|  |  - Access Control         |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n+----------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#wallet-service","title":"Wallet Service","text":"<p>The Wallet Service manages blockchain wallets and transactions:</p> <pre><code>+----------------------------------+\n|                                  |\n|         Wallet Service           |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Wallet Management        |   |\n|  |  - Create/Import Wallets  |   |\n|  |  - Key Management         |   |\n|  |  - Address Generation     |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Transaction Management   |   |\n|  |  - Transaction Building   |   |\n|  |  - Transaction Signing    |   |\n|  |  - Transaction Broadcast  |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n+----------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#secrets-service","title":"Secrets Service","text":"<p>The Secrets Service manages sensitive data securely:</p> <pre><code>+----------------------------------+\n|                                  |\n|         Secrets Service          |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Secret Management        |   |\n|  |  - Create/Update/Delete   |   |\n|  |  - Encryption/Decryption  |   |\n|  |  - Access Control         |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Secret Rotation          |   |\n|  |  - Automatic Rotation     |   |\n|  |  - Version Management     |   |\n|  |  - Audit Logging          |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n+----------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#function-service","title":"Function Service","text":"<p>The Function Service manages and executes serverless functions:</p> <pre><code>+----------------------------------+\n|                                  |\n|         Function Service         |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Function Management      |   |\n|  |  - Deploy/Update/Delete   |   |\n|  |  - Version Management     |   |\n|  |  - Environment Config     |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Function Execution       |   |\n|  |  - Invocation Handling    |   |\n|  |  - Runtime Management     |   |\n|  |  - Resource Allocation    |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n+----------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#price-feed-service","title":"Price Feed Service","text":"<p>The Price Feed Service provides reliable price data:</p> <pre><code>+----------------------------------+\n|                                  |\n|         Price Feed Service       |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Data Source Management   |   |\n|  |  - Source Configuration   |   |\n|  |  - Source Validation      |   |\n|  |  - Failover Management    |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Price Aggregation        |   |\n|  |  - Data Collection        |   |\n|  |  - Outlier Detection      |   |\n|  |  - Consensus Calculation  |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n+----------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#gas-bank-service","title":"Gas Bank Service","text":"<p>The Gas Bank Service manages GAS allocation and usage:</p> <pre><code>+----------------------------------+\n|                                  |\n|         Gas Bank Service         |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  GAS Management           |   |\n|  |  - Deposit/Withdrawal     |   |\n|  |  - Balance Tracking       |   |\n|  |  - Transaction History    |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Fee Management           |   |\n|  |  - Fee Calculation        |   |\n|  |  - Fee Collection         |   |\n|  |  - Fee Distribution       |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n+----------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#storage-service","title":"Storage Service","text":"<p>The Storage Service provides data persistence:</p> <pre><code>+----------------------------------+\n|                                  |\n|         Storage Service          |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Data Storage             |   |\n|  |  - CRUD Operations        |   |\n|  |  - Query Processing       |   |\n|  |  - Transaction Support    |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Provider Management      |   |\n|  |  - Provider Selection     |   |\n|  |  - Connection Pooling     |   |\n|  |  - Failover Handling      |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n+----------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#analytics-service","title":"Analytics Service","text":"<p>The Analytics Service collects and analyzes system data:</p> <pre><code>+----------------------------------+\n|                                  |\n|         Analytics Service        |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Data Collection          |   |\n|  |  - Event Capture          |   |\n|  |  - Metrics Collection     |   |\n|  |  - Log Aggregation        |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Data Analysis            |   |\n|  |  - Real-time Processing   |   |\n|  |  - Batch Processing       |   |\n|  |  - Reporting              |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n+----------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#event-monitoring-service","title":"Event Monitoring Service","text":"<p>The Event Monitoring Service tracks blockchain events:</p> <pre><code>+----------------------------------+\n|                                  |\n|     Event Monitoring Service     |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Event Subscription       |   |\n|  |  - Contract Events        |   |\n|  |  - Block Events           |   |\n|  |  - Transaction Events     |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Event Processing         |   |\n|  |  - Filtering              |   |\n|  |  - Transformation         |   |\n|  |  - Notification           |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n+----------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#metrics-service","title":"Metrics Service","text":"<p>The Metrics Service collects and reports system metrics:</p> <pre><code>+----------------------------------+\n|                                  |\n|         Metrics Service          |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Metrics Collection       |   |\n|  |  - System Metrics         |   |\n|  |  - Service Metrics        |   |\n|  |  - Custom Metrics         |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n|  +---------------------------+   |\n|  |                           |   |\n|  |  Metrics Reporting        |   |\n|  |  - Dashboards             |   |\n|  |  - Alerts                 |   |\n|  |  - Exporters              |   |\n|  |                           |   |\n|  +---------------------------+   |\n|                                  |\n+----------------------------------+\n</code></pre>"},{"location":"architecture/service_layer_components/#service-interactions","title":"Service Interactions","text":"<p>Services interact with each other through well-defined interfaces, following these principles:</p> <ol> <li>Loose Coupling: Services depend on interfaces rather than concrete implementations</li> <li>Single Responsibility: Each service has a clear, focused responsibility</li> <li>Encapsulation: Services hide their internal implementation details</li> <li>Idempotency: Operations can be safely retried without side effects</li> <li>Asynchronous Communication: Services use async/await patterns for non-blocking operations</li> </ol> <p>This architecture provides a flexible, maintainable, and scalable foundation for the Neo Service Layer.</p>"},{"location":"architecture/system_overview/","title":"Neo Service Layer - System Overview","text":""},{"location":"architecture/system_overview/#architecture-overview","title":"Architecture Overview","text":"<p>The Neo Service Layer is a centralized chainlink providing various services for the Neo N3 blockchain. It functions as a serverless platform allowing users to deploy JS/Python/C# functions with secure enclave support.</p> <pre><code>+---------------------+     +------------------------+     +-------------------+\n|                     |     |                        |     |                   |\n|  External Clients   +----&gt;+  Neo Service Layer API +----&gt;+  Service Layer    |\n|  (dApps, Users)     |     |  (Public Endpoints)    |     |  (Core Services)  |\n|                     |     |                        |     |                   |\n+---------------------+     +------------------------+     +--------+----------+\n                                                                   |\n                                                                   |\n                                                                   v\n                                      +----------------------------+----------------------------+\n                                      |                                                        |\n                                      |                  AWS Nitro Enclave                     |\n                                      |                                                        |\n                                      |  +----------------+  +------------------------+        |\n                                      |  |                |  |                        |        |\n                                      |  | Wallet Service |  | Secrets Management     |        |\n                                      |  |                |  |                        |        |\n                                      |  +----------------+  +------------------------+        |\n                                      |                                                        |\n                                      |  +----------------+  +------------------------+        |\n                                      |  |                |  |                        |        |\n                                      |  | Account Mgmt   |  | Function Execution     |        |\n                                      |  |                |  |                        |        |\n                                      |  +----------------+  +------------------------+        |\n                                      |                                                        |\n                                      |  +----------------+  +------------------------+        |\n                                      |  |                |  |                        |        |\n                                      |  | Price Feed     |  | Gas Bank               |        |\n                                      |  |                |  |                        |        |\n                                      |  +----------------+  +------------------------+        |\n                                      |                                                        |\n                                      +--------------------------------------------------------+\n                                                           |\n                                                           |\n                                                           v\n                                      +--------------------------------------------------------+\n                                      |                                                        |\n                                      |                    Neo N3 Blockchain                   |\n                                      |                                                        |\n                                      +--------------------------------------------------------+\n</code></pre>"},{"location":"architecture/system_overview/#key-components","title":"Key Components","text":"<ol> <li>API Layer: Public-facing endpoints that handle client requests</li> <li>Service Layer: Core business logic implementation</li> <li>Enclave Services: Secure execution environment for sensitive operations</li> <li>Storage Layer: Persistence layer for service data</li> <li>Blockchain Integration: Communication with Neo N3 blockchain</li> </ol>"},{"location":"architecture/system_overview/#security-model","title":"Security Model","text":"<p>The Neo Service Layer uses AWS Nitro Enclaves to provide hardware-level isolation for sensitive operations:</p> <pre><code>+------------------------------------------+\n|                                          |\n|             Parent Instance              |\n|                                          |\n|  +----------------------------------+    |\n|  |                                  |    |\n|  |  Public Services &amp; API Endpoints |    |\n|  |                                  |    |\n|  +---------------+------------------+    |\n|                  |                       |\n|                  | VSOCK                 |\n|                  | Communication         |\n|  +---------------v------------------+    |\n|  |                                  |    |\n|  |        Nitro Enclave             |    |\n|  |                                  |    |\n|  |  +---------------------------+   |    |\n|  |  |                           |   |    |\n|  |  |  Sensitive Operations     |   |    |\n|  |  |  - Key Management         |   |    |\n|  |  |  - Transaction Signing    |   |    |\n|  |  |  - Secret Management      |   |    |\n|  |  |                           |   |    |\n|  |  +---------------------------+   |    |\n|  |                                  |    |\n|  +----------------------------------+    |\n|                                          |\n+------------------------------------------+\n</code></pre> <p>All sensitive operations, including private key management, transaction signing, and secret management, are performed within the secure enclave to ensure that even if the parent instance is compromised, the sensitive data remains protected.</p>"},{"location":"development/todos/","title":"TODOs and Implementation Notes","text":"<p>This document lists the current TODOs and implementation notes for the Neo Service Layer project. These items should be addressed in future releases.</p>"},{"location":"development/todos/#core-services","title":"Core Services","text":""},{"location":"development/todos/#metrics-service","title":"Metrics Service","text":"<ul> <li>Implement metric recording</li> <li>Implement metric retrieval</li> <li>Implement dashboard creation and retrieval</li> <li>Implement alert creation and retrieval</li> </ul>"},{"location":"development/todos/#enclave-service","title":"Enclave Service","text":"<ul> <li>Implement attestation document verification</li> <li>Implement actual enclave communication</li> </ul>"},{"location":"development/todos/#function-service","title":"Function Service","text":"<ul> <li>Implement template functionality</li> <li>Implement upload functionality</li> <li>Implement ZIP functionality</li> <li>Implement YAML parsing and serialization</li> <li>Implement more sophisticated test generation and coverage analysis</li> </ul>"},{"location":"development/todos/#function-dependency-service","title":"Function Dependency Service","text":"<ul> <li>Implement actual installation logic</li> <li>Implement update checking and update logic</li> <li>Implement validation logic</li> </ul>"},{"location":"development/todos/#function-composition-service","title":"Function Composition Service","text":"<ul> <li>Implement output mappings</li> <li>Implement condition evaluation</li> </ul>"},{"location":"development/todos/#wallet-service","title":"Wallet Service","text":"<ul> <li>Implement Neo RPC client to get balance</li> </ul>"},{"location":"development/todos/#common-utilities","title":"Common Utilities","text":"<ul> <li>Implement string extensions</li> <li>Implement encryption utilities</li> <li>Implement JSON serialization utilities</li> </ul>"},{"location":"development/todos/#tests","title":"Tests","text":"<ul> <li>Implement API integration tests</li> </ul>"},{"location":"development/todos/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Most TODOs in the external/neo directory are related to the Neo blockchain implementation and should be addressed by the Neo team.</li> </ul>"},{"location":"development/todos/#next-steps","title":"Next Steps","text":"<ol> <li>Prioritize these TODOs based on their importance for the core functionality</li> <li>Create issues in the GitHub repository for each TODO</li> <li>Assign issues to team members</li> <li>Track progress in the project board</li> </ol> <p>This list was generated using the <code>./scripts/check_todos.sh</code> script, which can be run at any time to get an updated list of TODOs in the codebase.</p>"}]}