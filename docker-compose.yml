version: '3.8'

services:
  # Database and Cache Services
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./init-mongodb.sh:/docker-entrypoint-initdb.d/init-mongodb.sh
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand({ping:1}).ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - neo-service-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neo-service-network

  # Core Services
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      enclave:
        condition: service_started
    volumes:
      - api-storage:/app/Storage
      - api-database:/app/Database
      - api-backups:/app/Backups
      - ./docker-appsettings.json:/app/appsettings.json
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__MongoDB=mongodb://mongodb:27017/neo_service_layer
      - ConnectionStrings__Redis=redis:6379
      - Enclave__Host=enclave
      - Enclave__Port=5000
      - Enclave__UseVsock=false
      - Enclave__Enabled=true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - neo-service-network

  enclave:
    build:
      context: .
      dockerfile: Dockerfile.enclave
    volumes:
      - enclave-data:/app/data
      - ./docker-appsettings.json:/app/appsettings.json
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__MongoDB=mongodb://mongodb:27017/neo_service_layer
      - ConnectionStrings__Redis=redis:6379
    restart: unless-stopped
    # In a real AWS Nitro Enclave environment, this would be replaced with the actual enclave setup
    # For local development, we're simulating the enclave as a regular container
    networks:
      - neo-service-network

  # Function Runtime Services
  js-runtime:
    build:
      context: .
      dockerfile: Dockerfile.js-runtime
    volumes:
      - js-runtime-data:/app/data
    restart: unless-stopped
    depends_on:
      - enclave
    networks:
      - neo-service-network

  python-runtime:
    build:
      context: .
      dockerfile: Dockerfile.python-runtime
    volumes:
      - python-runtime-data:/app/data
    restart: unless-stopped
    depends_on:
      - enclave
    networks:
      - neo-service-network

  dotnet-runtime:
    build:
      context: .
      dockerfile: Dockerfile.dotnet-runtime
    volumes:
      - dotnet-runtime-data:/app/data
    restart: unless-stopped
    depends_on:
      - enclave
    networks:
      - neo-service-network

  # Support Services
  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    restart: unless-stopped
    networks:
      - neo-service-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - neo-service-network

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - neo-service-network

  # Development Tools
  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    ports:
      - "8081:8080"
    environment:
      - API_URL=http://localhost:8080/swagger/v1/swagger.json
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - neo-service-network

volumes:
  mongodb-data:
  redis-data:
  api-storage:
  api-database:
  api-backups:
  enclave-data:
  js-runtime-data:
  python-runtime-data:
  dotnet-runtime-data:
  prometheus-data:
  grafana-data:

networks:
  neo-service-network:
    driver: bridge
