syntax = "proto3";

package functionservice.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/will/neo_service_layer/pkg/functionservicev1";

// functionservice provides API for managing and executing serverless functions.
service functionservice {
  // CreateFunction creates a new function with the provided configuration.
  rpc CreateFunction(CreateFunctionRequest) returns (Function) {
    option (google.api.http) = {
      post: "/v1/functions"
      body: "*"
    };
  }

  // GetFunction retrieves a function by its ID.
  rpc GetFunction(GetFunctionRequest) returns (Function) {
    option (google.api.http) = {
      get: "/v1/functions/{function_id}"
    };
  }

  // ListFunctions retrieves a list of functions based on the provided filters.
  rpc ListFunctions(ListFunctionsRequest) returns (ListFunctionsResponse) {
    option (google.api.http) = {
      get: "/v1/functions"
    };
  }

  // UpdateFunction updates an existing function.
  rpc UpdateFunction(UpdateFunctionRequest) returns (Function) {
    option (google.api.http) = {
      patch: "/v1/functions/{function.id}"
      body: "*"
    };
  }

  // DeleteFunction marks a function as deleted.
  rpc DeleteFunction(DeleteFunctionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/functions/{function_id}"
    };
  }

  // ExecuteFunction executes a function with the provided input.
  rpc ExecuteFunction(ExecuteFunctionRequest) returns (ExecutionResult) {
    option (google.api.http) = {
      post: "/v1/functions/{function_id}/execute"
      body: "*"
    };
  }

  // GetExecution retrieves an execution by its ID.
  rpc GetExecution(GetExecutionRequest) returns (Execution) {
    option (google.api.http) = {
      get: "/v1/executions/{execution_id}"
    };
  }

  // ListExecutions retrieves a list of executions based on the provided filters.
  rpc ListExecutions(ListExecutionsRequest) returns (ListExecutionsResponse) {
    option (google.api.http) = {
      get: "/v1/executions"
    };
  }

  // ListFunctionExecutions retrieves a list of executions for a specific function.
  rpc ListFunctionExecutions(ListFunctionExecutionsRequest) returns (ListExecutionsResponse) {
    option (google.api.http) = {
      get: "/v1/functions/{function_id}/executions"
    };
  }
}

// FunctionStatus represents the current status of a function.
enum FunctionStatus {
  // Default value, should not be used
  FUNCTION_STATUS_UNSPECIFIED = 0;
  // Function is active and can be executed
  FUNCTION_STATUS_ACTIVE = 1;
  // Function is inactive and cannot be executed
  FUNCTION_STATUS_INACTIVE = 2;
  // Function has been deleted
  FUNCTION_STATUS_DELETED = 3;
}

// RuntimeType represents the supported runtime environments for functions.
enum RuntimeType {
  // Default value, should not be used
  RUNTIME_TYPE_UNSPECIFIED = 0;
  // Function runs in a Docker container
  RUNTIME_TYPE_DOCKER = 1;
  // Function runs in a WebAssembly runtime
  RUNTIME_TYPE_WASM = 2;
  // Function runs directly on the host
  RUNTIME_TYPE_NATIVE = 3;
  // Function runs in a Trusted Execution Environment
  RUNTIME_TYPE_TEE = 4;
}

// SecurityLevel represents the level of security required for function execution.
enum SecurityLevel {
  // Default value, should not be used
  SECURITY_LEVEL_UNSPECIFIED = 0;
  // Standard security measures
  SECURITY_LEVEL_STANDARD = 1;
  // Enhanced security measures
  SECURITY_LEVEL_ENHANCED = 2;
  // Confidential computing security measures
  SECURITY_LEVEL_CONFIDENTIAL = 3;
}

// Function represents a serverless function with its configuration.
message Function {
  // Unique identifier for the function
  string id = 1;
  // Name of the function
  string name = 2;
  // Description of the function
  string description = 3;
  // Version of the function
  string version = 4;
  // Source code or reference to the function code
  string source = 5;
  // Runtime environment for the function
  RuntimeType runtime = 6;
  // Handler defines the entry point for the function
  string handler = 7;
  // Security level for the function execution
  SecurityLevel security = 8;
  // Current status of the function
  FunctionStatus status = 9;
  // Execution timeout in seconds
  int32 timeout = 10;
  // Memory allocation in MB
  int32 memory = 11;
  // Environment variables for the function
  map<string, string> environment = 12;
  // Creation timestamp
  google.protobuf.Timestamp created_at = 13;
  // Last update timestamp
  google.protobuf.Timestamp updated_at = 14;
  // User or service that created the function
  string created_by = 15;
  // Tags for categorizing and filtering functions
  repeated string tags = 16;
}

// ExecutionStatus represents the current status of a function execution.
enum ExecutionStatus {
  // Default value, should not be used
  EXECUTION_STATUS_UNSPECIFIED = 0;
  // Execution is queued
  EXECUTION_STATUS_QUEUED = 1;
  // Execution is in progress
  EXECUTION_STATUS_RUNNING = 2;
  // Execution completed successfully
  EXECUTION_STATUS_SUCCEEDED = 3;
  // Execution failed
  EXECUTION_STATUS_FAILED = 4;
  // Execution timed out
  EXECUTION_STATUS_TIMEOUT = 5;
}

// ResourceUsage tracks resource consumption during execution.
message ResourceUsage {
  // CPU usage as a percentage
  double cpu_usage = 1;
  // Memory usage in bytes
  int64 memory_usage = 2;
  // Network ingress in bytes
  int64 network_in = 3;
  // Network egress in bytes
  int64 network_out = 4;
  // I/O read operations in bytes
  int64 io_read = 5;
  // I/O write operations in bytes
  int64 io_write = 6;
}

// TEEAttestation contains attestation data for TEE executions.
message TEEAttestation {
  // Provider of the TEE (e.g., "AWS_NITRO", "INTEL_SGX")
  string provider = 1;
  // Attestation evidence
  string evidence = 2;
  // Security measurements
  map<string, string> measurements = 3;
  // Attestation timestamp
  google.protobuf.Timestamp timestamp = 4;
  // Verification status
  bool verified = 5;
}

// Execution represents a single execution of a function.
message Execution {
  // Unique identifier for the execution
  string id = 1;
  // Function ID this execution belongs to
  string function_id = 2;
  // Current status of the execution
  ExecutionStatus status = 3;
  // Input data for the execution
  bytes input = 4;
  // Output data from the execution
  bytes output = 5;
  // Error message if execution failed
  string error = 6;
  // Execution start time
  google.protobuf.Timestamp start_time = 7;
  // Execution end time
  google.protobuf.Timestamp end_time = 8;
  // Execution duration in milliseconds
  int64 duration = 9;
  // Source of the execution request
  string request_source = 10;
  // Resource usage statistics
  ResourceUsage resource_usage = 11;
  // Execution logs
  string log_output = 12;
  // Execution trace information
  string execution_trace = 13;
  // TEE attestation data (if applicable)
  TEEAttestation tee_attestation = 14;
}

// ExecutionResult represents the immediate result of a function execution.
message ExecutionResult {
  // Execution ID for tracking
  string execution_id = 1;
  // Current status of the execution
  ExecutionStatus status = 2;
  // Output data if execution completed synchronously
  bytes output = 3;
  // Error message if execution failed
  string error = 4;
  // Execution duration in milliseconds
  int64 duration = 5;
}

// CreateFunctionRequest is the request message for creating a function.
message CreateFunctionRequest {
  // Name of the function
  string name = 1;
  // Description of the function
  string description = 2;
  // Source code or reference to the function code
  string source = 3;
  // Runtime environment for the function
  RuntimeType runtime = 4;
  // Handler defines the entry point for the function
  string handler = 5;
  // Security level for the function execution
  SecurityLevel security = 6;
  // Execution timeout in seconds
  int32 timeout = 7;
  // Memory allocation in MB
  int32 memory = 8;
  // Environment variables for the function
  map<string, string> environment = 9;
  // Tags for categorizing and filtering functions
  repeated string tags = 10;
}

// GetFunctionRequest is the request message for retrieving a function.
message GetFunctionRequest {
  // Function ID to retrieve
  string function_id = 1;
}

// ListFunctionsRequest is the request message for listing functions.
message ListFunctionsRequest {
  // Maximum number of functions to return
  int32 page_size = 1;
  // Token for pagination
  string page_token = 2;
  // Filter by function status
  FunctionStatus status = 3;
  // Filter by runtime type
  RuntimeType runtime = 4;
  // Filter by tags
  repeated string tags = 5;
}

// ListFunctionsResponse is the response message for listing functions.
message ListFunctionsResponse {
  // List of functions
  repeated Function functions = 1;
  // Token for retrieving the next page
  string next_page_token = 2;
  // Total number of functions matching the criteria
  int32 total_size = 3;
}

// UpdateFunctionRequest is the request message for updating a function.
message UpdateFunctionRequest {
  // Function with updated fields
  Function function = 1;
  // Fields to update
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteFunctionRequest is the request message for deleting a function.
message DeleteFunctionRequest {
  // Function ID to delete
  string function_id = 1;
}

// ExecuteFunctionRequest is the request message for executing a function.
message ExecuteFunctionRequest {
  // Function ID to execute
  string function_id = 1;
  // Input data for the function
  bytes input = 2;
  // Whether to execute asynchronously
  bool async = 3;
  // Execution context options
  map<string, string> execution_context = 4;
}

// GetExecutionRequest is the request message for retrieving an execution.
message GetExecutionRequest {
  // Execution ID to retrieve
  string execution_id = 1;
}

// ListExecutionsRequest is the request message for listing executions.
message ListExecutionsRequest {
  // Maximum number of executions to return
  int32 page_size = 1;
  // Token for pagination
  string page_token = 2;
  // Filter by execution status
  ExecutionStatus status = 3;
  // Filter by start time range (start)
  google.protobuf.Timestamp start_time_from = 4;
  // Filter by start time range (end)
  google.protobuf.Timestamp start_time_to = 5;
}

// ListFunctionExecutionsRequest is the request message for listing executions of a specific function.
message ListFunctionExecutionsRequest {
  // Function ID to list executions for
  string function_id = 1;
  // Maximum number of executions to return
  int32 page_size = 2;
  // Token for pagination
  string page_token = 3;
  // Filter by execution status
  ExecutionStatus status = 4;
}

// ListExecutionsResponse is the response message for listing executions.
message ListExecutionsResponse {
  // List of executions
  repeated Execution executions = 1;
  // Token for retrieving the next page
  string next_page_token = 2;
  // Total number of executions matching the criteria
  int32 total_size = 3;
} 